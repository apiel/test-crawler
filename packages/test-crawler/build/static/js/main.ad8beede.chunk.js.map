{"version":3,"sources":["server/lib/CrawlerProvider.ts","server/lib/config.ts","server/lib/storage/GitHubStorage.ts","server/lib/storage/Storage.ts","server/lib/CrawlerProviderStorage.ts","server/lib/CrawlerProviderBase.ts","server/lib sync","server/lib/utils.ts","server/error.ts","routes.tsx","server/service.ts","common/Info.tsx","search/search.ts","common/refreshMasonry.ts","viewport.ts","projects/new/Viewport.tsx","projects/new/NewProject.tsx","hook/useAsync.ts","projects/useProjects.tsx","auth/GitHubAuth.tsx","projects/ProjectsPerRemote.tsx","hook/useError.tsx","projects/Projects.tsx","pages/pageStyle.tsx","common/ErrorHandler.tsx","search/Search.tsx","utils/index.ts","diff/DiffImageButtons.tsx","diff/DiffZone.tsx","pages/PageImageDiffZone.tsx","pages/PageImageDiff.tsx","pages/PageImage.tsx","pages/Page.tsx","pages/PagesActionZone.tsx","pages/PagesActionPin.tsx","diff/DiffImage.tsx","diff/DiffImageWithZone.tsx","pages/PagesActionFullscreen.tsx","pages/PagesActions.tsx","pages/Pages.tsx","crawler/SwitchStatus.tsx","projects/useProject.tsx","projects/ProjectName.tsx","crawler/CrawlerInfo.tsx","crawler/CrawlerResults.tsx","pin/PinPage.tsx","pin/Pins.tsx","code/CodeInfo.tsx","code/codeStyle.ts","code/CodeFrom.tsx","code/CodeSnippet.tsx","code/Code.tsx","Settings.tsx","code/Codes.tsx","projects/Project.tsx","projects/useCrawlers.tsx","projects/ProjectBreadcrumb.tsx","crawler/CrawlerResultsBreadcrumb.tsx","pin/PinsBreadcrumb.tsx","code/CodeBreadcrumb.tsx","App.tsx","serviceWorker.ts","index.tsx","server/storage.typing.ts"],"names":["CrawlerProvider","dir","__dirname","storageType","projectId","this","readJSON","join","readdir","PROJECT_FOLDER","projects","Promise","all","map","loadProject","crawlerInput","name","md5","project","id","saveJSON","timestamp","path","CRAWL_FOLDER","folders","getCrawler","crawlers","crawlerFolder","crawlerFolderPath","getFilePath","data","png","diff","pixelDiffRatio","zones","pinFolderPath","PIN_FOLDER","copy","remove","getPins","folder","target","blob","code","source","codeInfo","getCodeList","list","CODE_FOLDER","saveFile","sourcePath","read","buffer","toString","pattern","listPath","getPinsInFolder","getPageInFolder","files","filter","file","extname","status","crawler","index","filePath","pinPath","pin","push","item","zone","sort","a","b","xMin","yMin","groupedZones","groupOverlappingZone","page","length","setZoneStatus","newPage","pagesFolder","Math","floor","Date","now","crawl","CrawlerProviderBase","ROOT_FOLDER","process","MAX_HISTORY","TIMEOUT","CONSUMER_COUNT","USER_AGENT","CONSUME_TIMEOUT","parseInt","config","configFile","require","e","cookies","Cookies","remote","github","get","getConfig","GitHubStorage","getContents","dirname","filename","basename","filedata","find","call","url","blobUrl","sha","content","Buffer","from","JSON","parse","undefined","stringify","message","method","contentsUrl","src","dst","srcData","crawlTarget","consumeTimeout","Error","ERR","missingGitHubConfig","axios","headers","token","user","repo","Storage","gitHubStorage","CrawlerProviderStorage","StorageType","GitHub","getStorage","webpackEmptyContext","req","keys","resolve","module","exports","distFolder","extension","getPinsRoute","getCodeRoute","getResultsRoute","getProjectRoute","crawlerProvider","getSettings","saveProject","getCrawlers","getAllCrawlers","getPages","setCode","saveCode","getThumbnail","image","removePin","removeFromPins","copyToPins","setZonesStatus","setStatus","setCrawlerStatus","startCrawler","startCrawlers","timerSearch","masonry","timer","infoStyle","lineHeight","borderLeft","paddingLeft","color","textAlign","Info","children","style","viewports","value","width","height","isMobile","hasTouch","viewportsStr","viewport","getViewportName","valueStr","findIndex","vp","Option","Select","Viewport","getFieldDecorator","initialValue","key","inlineStyle","marginRight","display","radioGroupdStyle","save","history","input","notification","description","handleSubmit","validateFields","event","preventDefault","err","values","NewForm","Form","create","form","getFieldValue","onSubmit","Item","rules","required","addonBefore","placeholder","addonAfter","Group","size","Button","type","min","trigger","overlayStyle","Paragraph","ellipsis","rows","expandable","valuePropName","icon","htmlType","load","fn","setResult","setError","setLoading","result","useAsync","deps","React","useState","error","loading","useEffect","useProjects","loadProjects","console","log","set","GitHubAuth","Title","level","href","rel","Password","ProjectsPerRemote","title","ErrorComponent","useError","itemLayout","bordered","dataSource","renderItem","actions","to","Meta","Projects","Object","coverStyle","imgStyle","cardStyle","cardImgMargin","marginBottom","masonryStyle","paddingTop","paddingBottom","masonryOptions","gutter","fitWidth","ErrorHandler","showIcon","searchStyle","onSearch","setPages","pages","filters","clearTimeout","setTimeout","filterPages","searchPages","Fuse","search","onFilter","setFilters","searchValue","availableFilters","includes","res","Search","response","withFilters","selectedFilters","setSelectedFilters","pagesFiltered","setPagesFiltered","mode","onChange","tokenSeparators","filterOption","timestampToString","unix","calendar","buttonStyle","marginLeft","onSetStatus","success","DiffImageButtons","props","onClick","getColorByStatus","zoneStyle","ratio","img","over","top","left","xMax","yMax","border","position","backgroundImage","backgroundPosition","backgroundSize","DiffZone","originalWidth","thumb","setThumb","hover","setHover","onMouseOver","onMouseOut","PageImageDiffZone","more","Fragment","perStatus","getCountZonesPerStatus","PageImageDiff","theme","n","precision","fix","toFixed","sigDig","PageImage","convert","fg","alertStyle","Page","pageError","dangerouslySetInnerHTML","__html","toHtml","PagesActionZone","onPin","hide","PagesActionPin","DiffImage","onImg","alt","DiffImageWithZone","setVisible","onCancel","PagesActionFullscreen","visible","footer","PagesActions","setMasonry","m","onMasonryImg","layout","Pages","lastUpdate","options","ref","c","cover","setCrawler","SwitchStatus","checkedChildren","unCheckedChildren","checked","useProject","setProject","ProjectName","Typography","warningStyle","limitStyle","fontSize","CrawlerInfo","diffZoneCount","errorCount","urlsCount","inQueue","startAt","limit","total","percent","screen","duration","format","CrawlerResults","match","params","subscrib","unsubscrib","handleDelete","setPins","pins","PinPage","onConfirm","okText","cancelText","pathname","state","Pins","Text","CodeInfo","full","aceEditorStyle","float","buttonBarStyle","inputStyle","maxWidth","margin","onPlay","warn","info","CodeForm","setSource","location","overlay","Code","loadCode","getCode","setSettings","Settings","settings","Codes","getCodes","onStart","onAutoPinChange","autopin","getCrawlerStatusIcon","Project","setCrawlers","useCrawlers","ProjectBreadcrumb","CrawlerResultsBreadcrumb","PinsBreadcrumb","CodeBreadcrumb","Content","Layout","Header","layoutStyle","minHeight","titleStyle","marginTop","contentStyle","background","padding","App","className","exact","component","NewProject","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAWaA,EAAb,sLAEQ,MAAO,CACHC,IAAKC,KAHjB,kCAOgBC,EAA0BC,GAClC,OAAOC,KAAKC,SAASH,EAAaE,KAAKE,KAAKH,EAAV,mBAR1C,4EAWuBD,GAXvB,8FAa+BE,KAAKG,QAAQL,EAAaM,kBAbzD,cAacC,EAbd,yBAceC,QAAQC,IACXF,EAASG,KAAI,SAAAT,GAAS,OAAI,EAAKU,YAAYX,EAAaC,QAfpE,kLAmBsBD,EAA0BY,EAA4BC,EAAcZ,GAnB1F,8EAoBaA,IACDA,EAAaa,EAAYD,IAEvBE,EAAU,CAAEC,GAAIf,EAAWY,OAAMD,gBAvB/C,SAwBcV,KAAKe,SAASjB,EAAa,eAAgBe,GAxBzD,gCAyBeA,GAzBf,8IA4Bef,EAA0BC,EAAmBiB,GACpD,IAAMC,EAAOjB,KAAKE,KAAKH,EAAWmB,eAAcF,EAAW,UAC3D,OAAOhB,KAAKC,SAASH,EAAamB,KA9B1C,8EAiCyBnB,EAA0BC,GAjCnD,yFAkCckB,EAAOjB,KAAKE,KAAKH,EAAWmB,gBAlC1C,SAmC8BlB,KAAKG,QAAQL,EAAamB,GAnCxD,cAmCcE,EAnCd,gBAoC0Cb,QAAQC,IACtCY,EAAQX,KAAI,SAAAQ,GAAS,OAAI,EAAKI,WAAWtB,EAAaC,EAAWiB,OArC7E,cAoCcK,EApCd,yBAuCeA,GAvCf,mLA0CqBvB,EAA0BC,EAAmBiB,EAAmBF,GA1CrF,oFA2CcQ,EAAgBtB,KAAKE,KAAKH,EAAWmB,eAAcF,GACnDO,EAAoBC,YAAYV,EAAIQ,GA5ClD,SAgDqCtB,KAAKC,SAASH,EAAayB,EAAkB,SAhDlF,oBAgDcE,EAhDd,kBAiDYA,OAjDZ,EAiDYA,EAAMC,KAjDlB,oBAkDYD,EAAKC,IAAIC,KAAO,CACZC,eAAgB,EAChBC,MAAO,MAEPJ,EAAKC,IAAIC,KAAKC,eAAiB,GAtD/C,kCAuDsB5B,KAAKe,SAASjB,EAAayB,EAAkB,QAASE,GAvD5E,eA4DcK,EAAgBN,YAAYV,EAAId,KAAKE,KAAKH,EAAWgC,eA5DnE,UA6Dc/B,KAAKe,SAASjB,EAAagC,EAAc,QAASL,GA7DhE,yBA8DczB,KAAKgC,KAAKlC,EAAayB,EAAkB,QAASO,EAAc,SA9D9E,yBA+Dc9B,KAAKgC,KAAKlC,EAAayB,EAAkB,OAAQO,EAAc,QA/D7E,iCAiEeL,GAjEf,4LAoEyB3B,EAA0BC,EAAmBe,GApEtE,8EAqEcgB,EAAgBN,YAAYV,EAAId,KAAKE,KAAKH,EAAWgC,eArEnE,SAuEc/B,KAAKiC,OAAOnC,EAAagC,EAAc,QAvErD,uBAwEc9B,KAAKiC,OAAOnC,EAAagC,EAAc,SAxErD,uBAyEc9B,KAAKiC,OAAOnC,EAAagC,EAAc,SAzErD,gCA2Ee9B,KAAKkC,QAAQpC,EAAaC,IA3EzC,uIA8EUD,EAA0BC,EAAmBoC,EAAgBrB,GAC/D,IAAMsB,EAAoB,SAAXD,EACTnC,KAAKE,KAAKH,EAAWgC,cACrB/B,KAAKE,KAAKH,EAAWmB,eAAciB,GACzC,OAAOnC,KAAKqC,KAAKvC,EAAa0B,YAAYV,EAAIsB,EAAhBZ,CAAwB,UAlF9D,wEAqFmB1B,EAA0BC,EAAmBuC,GArFhE,kFAsFgBC,EAAwBD,EAAxBC,OAAWC,EAtF3B,YAsFwCF,EAtFxC,qBAuF2BtC,KAAKyC,YAAY3C,EAAaC,GAvFzD,cAuFc2C,EAvFd,QAwFaJ,EAAKxB,IAAM0B,EAxFxB,SAyFcxC,KAAKe,SACPjB,EACAE,KAAKE,KAAKH,EAAW4C,cAArB,aAFE,eAGGD,IA5FjB,uBA6Fc1C,KAAK4C,SACP9C,EACAE,KAAKE,KAAKH,EAAW4C,cAArB,UAAqCL,EAAKxB,GAA1C,QACAyB,GAhGZ,mLAmGmBzC,EAA0BC,EAAmBe,GAnGhE,+FAoG2Bd,KAAKyC,YAAY3C,EAAaC,GApGzD,UAoGc2C,EApGd,OAqGcF,EAAWE,EAAK5B,GAChB+B,EAAa7C,KAAKE,KAAKH,EAAW4C,cAArB,UAAqC7B,EAArC,SACf0B,EAvGZ,iCAwGiCxC,KAAK8C,KAAKhD,EAAa+C,GAxGxD,YAwGkBE,EAxGlB,gCA0GsBR,EAASQ,EAAOC,WA1GtC,iCA2G4BR,EA3G5B,CA2GsCD,YA3GtC,iCA8Ge,CACHzB,KACAH,KAAM,GACNsC,QAAS,GACTV,OAAQ,KAlHpB,uLAsHsBzC,EAA0BC,GAtHhD,4HAuHcmD,EAAWlD,KAAKE,KAAKH,EAAW4C,cAArB,aAvHzB,SAwH2B3C,KAAKC,SAASH,EAAaoD,GAxHtD,cAwHcR,EAxHd,yBAyHeA,GAAQ,IAzHvB,uIA4HY5C,EAA0BC,GAC9B,OAAOC,KAAKmD,gBAAgBrD,EAAaE,KAAKE,KAAKH,EAAWgC,iBA7HtE,6BAgIWjC,EAA0BC,EAAmBe,GAChD,OAAOd,KAAKoD,gBAAgBtD,EAAaE,KAAKE,KAAKH,EAAWgC,cAAajB,KAjInF,+BAoIahB,EAA0BC,EAAmBiB,GAClD,OAAOhB,KAAKmD,gBACRrD,EACAE,KAAKE,KAAKH,EAAWmB,eAAcF,MAvI/C,sCA2I4BlB,EAA0BqC,EAAgBrB,GAC9D,OAAOd,KAAKC,SAASH,EAAa0B,YAAYV,EAAIqB,EAAhBX,CAAwB,WA5IlE,+EA+IkC1B,EAA0BqC,GA/I5D,8FAgJ4BnC,KAAKG,QAAQL,EAAaqC,GAhJtD,cAgJckB,EAhJd,yBAiJe/C,QAAQC,IACX8C,EAAMC,QAAO,SAAAC,GAAI,MAAsB,UAAlBC,kBAAQD,IAA8B,WAATA,KAC7C/C,KAAI,SAAA+C,GAAI,OAAI,EAAKtD,SAASH,EAAaI,eAAKiC,EAAQoB,SAnJrE,yLAuJ2BzD,EAA0BC,EAAmBiB,EAAmByC,GAvJ3F,gFAwJcF,EAAOvD,KAAKE,KAAKH,EAAWmB,eAAcF,EAAW,UAxJnE,SAyJuChB,KAAKC,SAASH,EAAayD,GAzJlE,cAyJcG,EAzJd,QA0JgBD,OAASA,EA1JzB,SA2JczD,KAAKe,SAASjB,EAAayD,EAAMG,GA3J/C,gCA4JeA,GA5Jf,0LA+JwB5D,EAA0BC,EAAmBiB,EAAmBF,EAAY6C,EAAeF,GA/JnH,sGAgKctB,EAASnC,KAAKE,KAAKH,EAAWmB,eAAcF,GAC5C4C,EAAWpC,YAAYV,EAAIqB,GAjKzC,SAkKqCnC,KAAKC,SAASH,EAAa8D,EAAS,SAlKzE,UAkKcnC,EAlKd,OAmKuB,QAAXgC,EAnKZ,wBAoKkBI,EAAUrC,YAAYV,EAAId,KAAKE,KAAKH,EAAWgC,eApKjE,SAqKwC/B,KAAKC,SAASH,EAAa+D,EAAQ,SArK3E,cAuKmB,QAFDC,EArKlB,cAuKmB,IAAHA,OAAA,YAAAA,EAAKpC,WAAL,yBAAUC,YAAV,eAAgBE,SAAhB,OAAyBJ,QAAzB,IAAyBA,OAAzB,YAAyBA,EAAMC,WAA/B,uBAAyB,EAAWC,YAApC,aAAyB,EAAiBE,SAC1CiC,EAAIpC,IAAIC,KAAKE,MAAMkC,KAAnB,eAA6BtC,EAAKC,IAAIC,KAAKE,MAAM8B,GAAjD,CAAyDF,aACnD5B,EAAQiC,EAAIpC,IAAIC,KAAKE,MAAMrB,KAAI,SAAAwD,GAAI,OAAIA,EAAKC,SAC5CC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAOF,EAAEG,KAAOF,EAAEC,KAAOD,EAAEE,QAC5CC,EAAeC,+BAAqB3C,GAC1CiC,EAAIpC,IAAIC,KAAKE,MAAQ0C,EAAa/D,KAAI,SAAAyD,GAAI,MAAK,CAAEA,OAAMR,cA5KvE,UA+KkBzD,KAAKe,SAASjB,EAAa+D,EAAQ,QAASC,GA/K9D,eAiLQ,OAAIrC,QAAJ,IAAIA,OAAJ,YAAIA,EAAMC,WAAV,uBAAI,EAAWC,YAAf,aAAI,EAAiBE,SACjBJ,EAAKC,IAAIC,KAAKE,MAAM8B,GAAOF,OAASA,GAlLhD,UAoLczD,KAAKe,SAASjB,EAAa8D,EAAS,QAASnC,GApL3D,iCAqLeA,GArLf,gMAwLyB3B,EAA0BC,EAAmBiB,EAAmBF,EAAY2C,GAxLrG,sFAyLctB,EAASnC,KAAKE,KAAKH,EAAWmB,eAAcF,GAC5C4C,EAAWpC,YAAYV,EAAIqB,GA1LzC,SA2LqCnC,KAAKC,SAASH,EAAa8D,EAAS,SA3LzE,OA2Lca,EA3Ld,OA6LiBd,EAAQ,EA7LzB,YA6L4BA,EAAQc,EAAM/C,IAAKC,KAAME,MAAM6C,QA7L3D,iCA8L4B1E,KAAK2E,cAAc7E,EAAaC,EAAWiB,EAAWF,EAAI6C,EAAOF,GA9L7F,OA8LYmB,EA9LZ,eA6LmEjB,IA7LnE,gDAgMeiB,GAhMf,4LAmMuB9E,EAA0BC,EAAmBgE,GAnMpE,8EAoMcc,EAAcC,KAAKC,MAAMC,KAAKC,MAAQ,KAAMjC,WAClDhD,KAAKkF,MAAMpF,EAAaC,EAAW8E,EAAa,GAAId,GArM5D,kBAuMec,GAvMf,gH,OAAqCM,K,okBCRxBC,EAAcC,8CAAYD,aAAelF,eAAKL,EAAW,YACzDO,EAAiBiF,8CAAYjF,gBAAkB,eAC/Cc,EAAe,QACfa,EAAa,MACbY,EAAc,OACd2C,EAAc,GACdC,EAAU,IACVC,EAAiB,EACjBC,EAAa,2EACbC,EAAkBL,8CAAYK,gBAAkBC,SAASN,8CAAYK,gBAAiB,IAAM,EAE5FE,EAEb,WACI,IACIA,EADEC,EAAa3F,eAAKkF,EAAa,0BAErC,IACIQ,EAASE,OAAQD,GAErB,MAAOE,GACH,IACI,IAAMC,EAAU,IAAIC,IACpBL,EAAS,CACLM,OAAQ,CACJC,OAAQH,EAAQI,IAAI,YAIhC,MAAOL,GACHH,EAAS,IAGjB,OAAO,aACHM,OAAQ,IACLN,GAvBWS,I,+NCHTC,EAAb,YAEI,aAAe,IAAD,8BACV,+CAFIV,YACM,EAEV,EAAKA,OAASA,SAAOM,OAAOC,OAFlB,EAFlB,8GAOkBlF,GAPlB,yFAQ+BjB,KAAKuG,YAAYtF,GARhD,uBAQgBQ,EARhB,EAQgBA,KARhB,kBASeA,EAAKjB,KAAI,qBAAGG,SAT3B,2KAYeM,GAZf,iGAa+BjB,KAAKuG,YAAYC,kBAAQvF,IAbxD,mBAagBQ,EAbhB,EAagBA,KACFgF,EAAWC,mBAASzF,GACpB0F,EAAWlF,EAAKmF,MAAK,SAAC5C,GAAD,OAAeA,EAAKrD,OAAS8F,KAfhE,kEAmB4CzG,KAAK6G,KAAK,CAC1CC,IAAI,GAAD,OAAK9G,KAAK+G,QAAV,YAAqBJ,EAASK,OApB7C,wBAmBwBC,EAnBxB,EAmBgBxF,KAAQwF,QAnBxB,kBAsBeC,EAAOC,KAAKF,EAAS,WAtBpC,4KAyBehG,GAzBf,yFA0B4CjB,KAAKuG,YAAYtF,GA1B7D,uBA0BwBgG,EA1BxB,EA0BgBxF,KAAQwF,QA1BxB,kBA2BeC,EAAOC,KAAKF,EAAS,WA3BpC,+KA8BmBhG,GA9BnB,sFAgCmBmG,KAhCnB,SAgCqCpH,KAAK8C,KAAK7B,GAhC/C,0BAgCsD+B,WAhCtD,uBAgCwBqE,MAhCxB,+EAkCmBC,GAlCnB,sLAsCiB/D,GAtCjB,2FAuCwCvD,KAAKuG,YAAYhD,GAvCzD,uBAuCwByD,EAvCxB,EAuCgBvF,KAAQuF,IACVvF,EAAO2F,KAAKG,UAAU,CACxBC,QAAQ,GAAD,OA3CG,iBA2CH,cACPR,QA1CZ,SA4CchH,KAAK6G,KAAK,CACZY,OAAQ,SACRX,IAAI,GAAD,OAAK9G,KAAK0H,YAAV,YAAyBnE,GAC5B9B,SA/CZ,+KAmDmB8B,EAAc0D,GAnDjC,2FAoDwCjH,KAAKuG,YAAYhD,GApDzD,uBAoDwByD,EApDxB,EAoDgBvF,KAAQuF,IACVvF,EAAO2F,KAAKG,UAAU,CACxBC,QAAQ,GAAD,OAxDG,iBAwDH,cACPP,QAASC,EAAOC,KAAKF,GAASjE,SAAS,UACvCgE,QAxDZ,SA0DchH,KAAK6G,KAAK,CACZY,OAAQ,MACRX,IAAI,GAAD,OAAK9G,KAAK0H,YAAV,YAAyBnE,GAC5B9B,SA7DZ,iLAiEmB8B,EAAc0D,GAjEjC,0FAkEejH,KAAK4C,SAASW,EAAM6D,KAAKG,UAAUN,EAAS,KAAM,KAlEjE,6KAqEeU,EAAaC,GArE5B,uFAsE8B5H,KAAK8C,KAAK6E,GAtExC,QAsEcE,EAtEd,SAwEY7H,KAAK4C,SAASgF,EAAKC,EAAQ7E,YAxEvC,8KA4EgB8E,EAA2BC,EAAyBhE,GA5EpE,uEA6Ec,IAAIiE,MAAM,qBA7ExB,iIAgFmBpC,GACX,IAAK5F,KAAK4F,OACN,MAAM,IAAIoC,MAAMC,IAAIC,qBAExB,OAAOC,IAAM,eACNvC,EADK,CAERwC,QAAQ,eAAD,OAAOxC,QAAP,IAAOA,OAAP,EAAOA,EAAQwC,QAAf,CAAwB,cAAgB,SAAhB,OAA0BpI,KAAK4F,OAAOyC,cAtFjF,kCA0F0BpH,GAClB,OAAOjB,KAAK6G,KAAK,CACbC,IAAI,GAAD,OAAK9G,KAAK0H,YAAV,YAAyBzG,OA5FxC,kCAgGiC,IAAD,IACxB,MAAM,GAAN,OApGS,yBAoGT,4BAA4BjB,KAAK4F,cAAjC,aAA4B,EAAa0C,KAAzC,sBAAiDtI,KAAK4F,cAAtD,aAAiD,EAAa2C,KAA9D,eAjGR,8BAoG6B,IAAD,IACpB,MAAM,GAAN,OAxGS,yBAwGT,4BAA4BvI,KAAK4F,cAAjC,aAA4B,EAAa0C,KAAzC,sBAAiDtI,KAAK4F,cAAtD,aAAiD,EAAa2C,KAA9D,kBArGR,GAAmCC,O,yGCTbA,EAAtB,mC,sICCMC,EAAgB,IAAInC,IAEJoC,EAAtB,+IACwB3E,GADxB,6LAGyBjE,GACjB,GAAIA,IAAgB6I,IAAYC,OAC5B,OAAOH,EAEX,MAAM,IAAIT,MAAJ,+BAAkClI,EAAlC,UAPd,K,kCCAO,IAAeqF,EAAtB,6KACmBpF,GAAuC,IAAD,uBAAhBkB,EAAgB,iCAAhBA,EAAgB,kBACjD,OAAOf,OAAI,WAAJ,GAAKE,iBAAgBL,GAArB,OAAmCkB,MAFlD,8BAKsBnB,EAA0BmB,GAExC,OADejB,KAAK6I,WAAW/I,GACjBK,QAAQc,KAP9B,2BAUmBnB,EAA0BmB,GAErC,OADejB,KAAK6I,WAAW/I,GACjBgD,KAAK7B,KAZ3B,2BAemBnB,EAA0BmB,GAErC,OADejB,KAAK6I,WAAW/I,GACjBuC,KAAKpB,KAjB3B,+BAoBuBnB,EAA0BmB,GAEzC,OADejB,KAAK6I,WAAW/I,GACjBG,SAASgB,KAtB/B,+BAyBuBnB,EAA0ByD,EAAc0D,GAEvD,OADejH,KAAK6I,WAAW/I,GACjB8C,SAASW,EAAM0D,KA3BrC,+BA8BuBnH,EAA0ByD,EAAc0D,GAEvD,OADejH,KAAK6I,WAAW/I,GACjBiB,SAASwC,EAAM0D,KAhCrC,6BAmCqBnH,EAA0ByD,GAEvC,OADevD,KAAK6I,WAAW/I,GACjBmC,OAAOsB,KArC7B,2BAwCmBzD,EAA0B6H,EAAaC,GAElD,OADe5H,KAAK6I,WAAW/I,GACjBkC,KAAK2F,EAAKC,KA1ChC,4BA8CQ9H,EACAC,EACA8E,EACAkD,EACAhE,GAEA,IAAM+D,EAAc,CAAE/H,YAAW8E,eAEjC,OADe7E,KAAK6I,WAAW/I,GACjBoF,MAAM4C,EAAaC,EAAgBhE,OAtDzD,GAAkD2E,I,oGCLlD,SAASI,EAAoBC,GAC5B,IAAIhD,EAAI,IAAIiC,MAAM,uBAAyBe,EAAM,KAEjD,MADAhD,EAAEzD,KAAO,mBACHyD,EAEP+C,EAAoBE,KAAO,WAAa,MAAO,IAC/CF,EAAoBG,QAAUH,EAC9BI,EAAOC,QAAUL,EACjBA,EAAoBhI,GAAK,K,gCCRzB,8CAGaU,EAAc,SAACV,EAAYsI,GAAb,OAA8C,SAACC,GACtE,OAAOnJ,eAAKkJ,EAAD,UAAgBtI,EAAhB,YAAsBuI,O,gCCJ9B,IAAKpB,EAAZ,kC,SAAYA,K,+DAAAA,M,qXCML,SAASqB,EAA8BxJ,EAAgBC,GAC1D,MAAM,SAAN,OAAgBD,EAAhB,YAA+BC,GAE5B,SAASwJ,EAA8BzJ,EAAgBC,EAAmBe,GAC7E,MAAM,SAAN,OAAgBhB,EAAhB,YAA+BC,EAA/B,YAA4Ce,GAEzC,SAAS0I,EAAiC1J,EAAgBC,EAAmBiB,GAChF,MAAM,YAAN,OAAmBlB,EAAnB,YAAkCC,EAAlC,YAA+CiB,GAE5C,SAASyI,EAAiC3J,EAAgBC,GAC7D,MAAM,YAAN,OAAmBD,EAAnB,YAAkCC,G,UCAhC2J,EAAkB,I,OAAI/J,GAGrB,SAAegK,IAAtB,+B,4CAAO,sBAAAxF,EAAA,+EACIuF,EAAgBC,eADpB,4C,sBAYA,SAASC,EAAY9J,EAA0BY,EAA4BC,EAAcZ,GAC5F,OAAO2J,EAAgBE,YAAY9J,EAAaY,EAAcC,EAAMZ,GAOjE,SAAS8J,EAAY/J,EAA0BC,GAClD,OAAO2J,EAAgBI,eAAehK,EAAaC,GAGhD,SAASgK,EAASjK,EAA0BC,EAAmBiB,GAClE,OAAO0I,EAAgBK,SAASjK,EAAaC,EAAWiB,GAWrD,SAASgJ,EAAQlK,EAA0BC,EAAmBuC,GACjE,OAAOoH,EAAgBO,SAASnK,EAAaC,EAAWuC,GAWrD,SAAe4H,EAAtB,wC,4CAAO,WAA4BpK,EAA0BC,EAAmBoC,EAAgBrB,GAAzF,2BAAAqD,EAAA,4FAAqH,IAArH,SACiBuF,EAAgBS,MAAMrK,EAAaC,EAAWoC,EAAQrB,GADvE,UACGqJ,EADH,6BAGO,IAAInC,MAAM,sBAHjB,iEAO+BmC,EAAOnH,SAAS,YAP/C,4C,sBAUA,SAASoH,EAAUtK,EAA0BC,EAAmBe,GACnE,OAAO4I,EAAgBW,eAAevK,EAAaC,EAAWe,GAG3D,SAASgD,EAAIhE,EAA0BC,EAAmBiB,EAAmBF,GAChF,OAAO4I,EAAgBY,WAAWxK,EAAaC,EAAWiB,EAAWF,GAGlE,SAAe6D,GAAtB,6C,8CAAO,WAA6B7E,EAA0BC,EAAmBiB,EAAmBF,EAAY6C,EAAeF,GAAxH,SAAAU,EAAA,sEACGuF,EAAgB/E,cAAc7E,EAAaC,EAAWiB,EAAWF,EAAI6C,EAAOF,GAD/E,gCAEIsG,EAASjK,EAAaC,EAAWiB,IAFrC,4C,sBAKA,SAAeuJ,GAAtB,2C,8CAAO,WAA8BzK,EAA0BC,EAAmBiB,EAAmBF,EAAY2C,GAA1G,SAAAU,EAAA,sEACGuF,EAAgBa,eAAezK,EAAaC,EAAWiB,EAAWF,EAAI2C,GADzE,gCAEIsG,EAASjK,EAAaC,EAAWiB,IAFrC,4C,sBAKA,SAASwJ,GAAU1K,EAA0BC,EAAmBiB,EAAmByC,GACtF,OAAOiG,EAAgBe,iBAAiB3K,EAAaC,EAAWiB,EAAWyC,GAGxE,SAASiH,GAAa5K,EAA0BC,GAAqC,IAChFgE,EAAoB/D,KAApB+D,KACR,OAAO2F,EAAgBgB,aAAa5K,EAAaC,EAAWgE,GAGzD,SAAS4G,KAA4D,IAChE5G,EAAoB/D,KAApB+D,KACR,OAAO2F,EAAgBiB,cAAc5G,GCxGzC,ICQI6G,GCVAC,GACAC,GFCEC,GAAY,CACdC,WAAY,IACZC,WAAY,iBACZC,YAAa,GACbC,MAAO,OACPC,UAAW,WAGFC,GAAgC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzC,yBAAKC,MAAOR,IACNO,I,oBGAGE,GAAwB,CACjC,CAAE7K,KAAM,oBAAqB8K,MAAO,CAAEC,MAAO,IAAKC,OAAQ,MAC1D,CAAEhL,KAAM,qBAAsB8K,MAAO,CAAEC,MAAO,KAAMC,OAAQ,MAC5D,CAAEhL,KAAM,sBAAuB8K,MAAO,CAAEC,MAAO,KAAMC,OAAQ,OAC7D,CAAEhL,KAAM,qBAAsB8K,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,UAAU,EAAMC,UAAU,IAC1F,CAAElL,KAAM,qBAAsB8K,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,UAAU,EAAMC,UAAU,IAC1F,CAAElL,KAAM,kBAAmB8K,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAAMC,UAAU,EAAMC,UAAU,IACxF,CAAElL,KAAM,sBAAuB8K,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,UAAU,EAAMC,UAAU,KAGlFC,GAAiCN,GAAUhL,KACpD,gBAAGiL,EAAH,EAAGA,MAAUM,EAAb,+CAAkCA,EAAlC,CAA4CN,MAAOrE,KAAKG,UAAUkE,QAMzDO,GAAkB,SAACP,GAC5B,IAAMQ,EAAW7E,KAAKG,UAAUkE,GAC1B9H,EAAQmI,GAAaI,WAAU,SAAAC,GAAE,OAAIA,EAAGV,QAAUQ,KACxD,IAAe,IAAXtI,EACA,OAAOmI,GAAanI,GAAOhD,KAJuB,IAM9C+K,EAA4BD,EAA5BC,MAAOC,EAAqBF,EAArBE,OAAQC,EAAaH,EAAbG,SACvB,MAAM,GAAN,OAAUF,EAAV,YAAmBC,GAAnB,OAA6BC,GAAY,YC/BrCQ,GAAWC,KAAXD,OAEKE,GAAW,SAAC,GAAD,OAA8CC,EAA9C,EAAGA,mBACvB,WACA,CACIC,aAHgB,EAAsBA,cDmBHV,GAAa,GChBMnL,MAHQ4L,CAMlE,kBAAC,KAAD,KACKT,GAAatL,KACV,gBAAGiL,EAAH,EAAGA,MAAO9K,EAAV,EAAUA,KAAV,OAAqB,kBAACyL,GAAD,CAAQK,IAAKhB,EAAOA,MAAOA,GAAQ9K,SCM9D+L,GAAc,CAChBC,YAAa,GACbC,QAAS,gBAGPC,GAAmB,CACrBF,YAAa,IAGXG,GAAI,uCAAG,WACTC,EADS,sBAAA5I,EAAA,6DAEPxD,EAFO,EAEPA,KAAMoL,EAFC,EAEDA,SAAaiB,EAFZ,qDAKCpD,EAAY,OAAD,eAAqBoD,EAArB,CAA4BjB,SAAU3E,KAAKC,MAAM0E,KAAapL,OAAM2G,GALhF,OAMLyF,EAAQhJ,KPlCkB,KO4BrB,gDAQLkJ,IAAY,MAAU,CAClBzF,QAAS,wBACT0F,YAAa,KAAMlK,aAVlB,yDAAH,wDAeJmK,GAAe,SAACJ,EAAuBK,GAAxB,OAAgD,SAACC,GAClEA,EAAMC,iBACNF,GAAe,SAACG,EAAUC,GACjBD,GACDT,GAAKC,EAASS,QAkGXC,GADCC,IAAKC,OAAO,CAAEhN,KAAM,iBAApB+M,EA3FG,SAAC,GAAoF,IAAlFX,EAAiF,EAAjFA,QAAiF,IAAxEa,KAAQrB,EAAgE,EAAhEA,kBAAmBa,EAA6C,EAA7CA,eAAgBS,EAA6B,EAA7BA,cACtE,OACI,kBAAC,IAAD,CAAMC,SAAUX,GAAaJ,EAASK,IAClC,kBAAC,IAAKW,KAAN,KACKxB,EAAkB,OAAQ,CACvByB,MAAO,CAAC,CAAEC,UAAU,EAAMzG,QAAS,wCADtC+E,CAGG,kBAAC,IAAD,CAAO2B,YAAY,OAAOC,YAAY,mBAG9C,kBAAC,IAAKJ,KAAN,KACKxB,EAAkB,MAAO,CACtByB,MAAO,CAAC,CAAEC,UAAU,EAAMzG,QAAS,mCADtC+E,CAGG,kBAAC,IAAD,CACI4B,YAAY,sBACZD,YAAY,MACZE,WACI,kBAAC,GAAD,CACI7B,kBAAmBA,EACnBC,aAAcpF,KAAKG,UFhDKiE,GAAU,GAAGC,aEsDzD,kBAAC,IAAKsC,KAAN,KACI,kBAAC,IAAKA,KAAN,CAAWxC,MAAOmB,IACbH,EAAkB,SAAU,CACzBC,aAAc,aADjBD,CAGG,kBAAC,IAAM8B,MAAP,CAAaC,KAAK,QAAQ/C,MAAOsB,IAC7B,kBAAC,IAAM0B,OAAP,CAAc9C,MAAO,aAAa,kBAAC,IAAD,CAAM+C,KAAK,gBAA7C,eACA,kBAAC,IAAMD,OAAP,CAAc9C,MAAO,QAAQ,kBAAC,IAAD,CAAM+C,KAAK,iBAAxC,iBAIiB,cAA5BX,EAAc,WAA6B,kBAAC,IAAKE,KAAN,CAAWxC,MAAOmB,IAAlB,SACjCH,EAAkB,QAAlBA,CACH,kBAAC,IAAD,CAAakC,IAAK,EAAGH,KAAK,WAFU,OAIlC,kBAAC,IAAD,CAASrH,QAAS,6BACpB,kEADoB,8BAGpB,4BACI,uCACA,uCACA,uCACA,wCAPgB,oBAQE,gCARF,oBAQ2B,sCAR3B,QAQ8C,sCAR9C,IAQ6D,6BAAM,6BARnE,OAShB,gCATgB,uBASmByH,QAAQ,QAAQC,aAAc,CAAEjD,MAAO,MAC9E,kBAAC,IAAD,CAAM8C,KAAK,sBAGnB,kBAAC,GAAD,KACI,kBAAC,IAAWI,UAAZ,CAAsBC,SAAU,CAAEC,KAAM,EAAGC,YAAY,IACnD,yCADJ,2QAMA,kBAAC,IAAWH,UAAZ,CAAsBC,SAAU,CAAEC,KAAM,EAAGC,YAAY,IACnD,wCADJ,iRAQR,kBAAC,IAAKhB,KAAN,KACKxB,EAAkB,UAAW,CAC1ByC,cAAe,WADlBzC,CAGG,kBAAC,IAAD,6CAGR,kBAAC,IAAKwB,KAAN,KACI,kBAAC,IAAKA,KAAN,CAAWxC,MAAOmB,IACd,kBAAC,IAAD,CACI8B,KAAK,UACLS,KAAK,OACLC,SAAS,UAHb,gB,sCCnIdC,GAAO,SACTC,EACAC,EACAC,EACAC,GAJS,6BAKR,4BAAApL,EAAA,sEAEGmL,OAAShI,GACTiI,GAAW,GAHd,SAIwBH,IAJxB,OAISI,EAJT,OAKGH,EAAUG,GALb,gDAOGF,EAAS,EAAD,IAPX,QASDC,GAAW,GATV,0DAWQE,GAAW,SACpBL,GAGE,IAFFM,EAEC,uDAF4B,GAC7BlD,EACC,yCAC2BmD,IAAMC,SAAYpD,GAD7C,oBACMgD,EADN,KACcH,EADd,OAEyBM,IAAMC,WAF/B,oBAEMC,EAFN,KAEaP,EAFb,OAG6BK,IAAMC,UAAS,GAH5C,oBAGME,EAHN,KAGeP,EAHf,KAIK1I,EAAOsI,GAAQC,EAAIC,EAAWC,EAAUC,GAE9C,OADAI,IAAMI,WAAU,WAAQlJ,MAAW6I,GAC5B,CAAEI,UAASN,SAAQ3I,OAAMgJ,QAAOR,cCtB9BW,GAAc,SAAClQ,GAA8B,IAAD,EAEjD2P,IAAoB,kBRmBrB,SAAsB3P,GACzB,OAAO4J,EAAgBuG,aAAanQ,GQpBNmQ,CAAanQ,MAD3BO,EADqC,EAC7CmP,OAAkBK,EAD2B,EAC3BA,MAAOC,EADoB,EACpBA,QAQjC,OANID,GACA5C,IAAY,QAAY,CACpBzF,QAAQ,mDAAD,OAAqD1H,EAArD,KACPoN,YAAa2C,EAAM7M,aAGpB,CAAE3C,WAAUyP,UAASD,U,uCCP1B1C,GAAe,SAACC,GAAD,OAAyB,SAACC,GAC3CA,EAAMC,iBACNF,GAAe,SAACG,EAAUC,GACjBD,IAED2C,QAAQC,IAAI,mBAAoB3C,IAChB,IAAIvH,MACZmK,IAAI,SAAU5C,EAAQ,CAAEvM,KAAM,YAoDrCoP,GAAa3C,IAAKC,OAAO,CAAEhN,KAAM,eAApB+M,EA/CH,SAAC,GAAwE,IAAD,IAArEE,KAAQrB,EAA6D,EAA7DA,kBAAmBa,EAA0C,EAA1CA,eACjD,OACI,oCACI,kBAAC,IAAWkD,MAAZ,CAAkBC,MAAO,GAAzB,UACA,kBAAC,GAAD,KACI,kBAAC,IAAW3B,UAAZ,wBACoB,uBAAG4B,KAAK,mCAAmCpO,OAAO,SAASqO,IAAI,uBAA/D,cADpB,iGAE0D,uBAAGD,KAAK,6EAA6EpO,OAAO,SAASqO,IAAI,uBAAzG,0BAF1D,4KAMJ,kBAAC,IAAD,CAAM3C,SAAUX,GAAaC,IACzB,kBAAC,IAAKW,KAAN,KACKxB,EAAkB,OAAQ,CACvByB,MAAO,CAAC,CAAEC,UAAU,EAAMzG,QAAS,0CADtC+E,CAGG,kBAAC,IAAD,CAAO2B,YAAY,WAAWC,YAAY,sBAGlD,kBAAC,IAAKJ,KAAN,KACKxB,EAAkB,QAAS,CACxByB,MAAO,CAAC,CAAEC,UAAU,EAAMzG,QAAS,iDADtC+E,CAGG,kBAAC,IAAMmE,SAAP,CAAgBxC,YAAY,QAAQC,YAAY,6BAGxD,kBAAC,IAAKJ,KAAN,KACKxB,EAAkB,OAAQ,CACvByB,MAAO,CAAC,CAAEC,UAAU,EAAMzG,QAAS,oCADtC+E,CAGG,kBAAC,IAAD,CAAO2B,YAAY,aAAaC,YAAY,sBAGpD,kBAAC,IAAKJ,KAAN,KACI,kBAAC,IAAD,CACIS,KAAK,UACLS,KAAK,SACLC,SAAS,UAHb,YCtCPyB,GAAoB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAO9Q,EAAyB,EAAzBA,YAAyB,EAC3BkQ,GAAYlQ,GAAzCO,EADwD,EACxDA,SAAUyP,EAD8C,EAC9CA,QACZe,ECbc,SAAChB,GACrB,GAAIA,IAAU5H,KAAIC,sBAA4B,OAAL2H,QAAK,IAALA,OAAA,EAAAA,EAAOrI,WAAYS,KAAIC,oBAC5D,OAAOmI,GDWYS,CAFyC,EACrCjB,OAG3B,OADAK,QAAQC,IAAI,iBAAkBU,GAC1BA,EACO,kBAACA,EAAD,MAGP,oCACI,kBAAC,IAAWP,MAAZ,CAAkBC,MAAO,GAAIK,GAC5Bd,EAAU,kBAAC,KAAD,MAAW,kBAAC,KAAD,CAClBiB,WAAW,aACXC,UAAQ,EACRC,WAAY5Q,EACZ6Q,WAAY,gBAAGpQ,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAsBmG,EAA7B,EAAapG,aAAgBoG,IAA7B,OACR,kBAAC,KAAKiH,KAAN,CACIoD,QAAS,CACL,kBAAC,IAAD,CAAMC,GAAI3H,EAAgB3J,EAAagB,IAAvC,UAKJ,kBAAC,KAAKiN,KAAKsD,KAAX,CACIT,MAAO,kBAAC,IAAD,CAAMQ,GAAI3H,EAAgB3J,EAAagB,IACzCH,EADE,IACI,kBAAC,IAAD,CAAM6N,KAAM1O,KAEvBoN,YAAapG,UElC5BwK,GAAW,WACpB,OACI,oCACI,kBAAC,IAAWhB,MAAZ,CAAkBC,MAAO,GAAzB,YACCgB,OAAOvI,KAAKL,MAAanI,KAAI,SAACiM,GAAD,OAC1B,yBAAKA,IAAKA,GACN,kBAAC,GAAD,CACImE,MAAOnE,EACP3M,YAAa6I,KAAY8D,KAE7B,iCAGR,kBAAC,IAAD,CAAM2E,GblBsB,QamBxB,kBAAC,IAAD,CAAQnC,KAAK,OAAOX,KAAK,SAAzB,U,mDCtBHkD,GAAa,CACtBpG,UAAW,UAIFqG,GACF,IAKEC,GAAY,CACrBhG,MAAO+F,GAAiBE,GACxBC,aAAc,IAGLC,GAAe,CACxBC,WAAY,GACZC,cAAe,IAGNC,GAAiB,CAC1BC,OAAQ,GAERC,UAAU,G,qBCjBDC,GAAe,SAAC,GAAD,QAAG3K,eAAH,MAAa,uBAAb,EAAqC0F,EAArC,EAAqCA,YAArC,OACxB,kBAAC,KAAD,CACI1F,QAASA,EACT0F,YAAaA,EACbsB,KAAK,UACL4D,UAAQ,K,0CZPHC,GAAc,CACvB3G,MAAOgG,GAAUhG,MACjBiB,YAAaqF,GAAeC,QAInBK,GAAW,SACpBC,EACAC,EACAC,GAHoB,OAInB,SAAChH,GACE+G,IACK/G,EAAM/G,QAGPgO,aAAa9H,IACbA,GAAc+H,YAAW,WACrBC,GAAYL,EAAUM,GAAYL,EAAO/G,GAAQgH,KAClD,MALHG,GAAYL,EAAUC,EAAOC,MAUnCI,GAAc,SAChBL,EACA/G,GAUA,OARa,IAAIqH,KAAKN,EAAO,CACzBxJ,KAAM,CACF,MACA,iBACA,kBACA,cAGI+J,OAAOtH,IAMVuH,GAAW,SACpBT,EACAC,EACAS,GAHoB,OAInB,SAACR,GACED,IACAS,EAAWR,GACXG,GAAYL,EAAUC,EAAOC,MAI/BG,GAAc,SAChBL,EACAC,EACAC,GAEA,GAAID,EACA,GAAKC,EAAQ/N,OAEN,CACH,IAAMwO,EAAcT,EAAQnP,QAAO,SAAAA,GAAM,OAAKiO,OAAOvI,KAAKmK,IAAkBC,SAAS9P,MAASpD,KAAK,KAC/FgT,IACAV,EAAQK,GAAYL,EAAOU,IAE/BX,EAASC,EAAMlP,QAAO,SAAAmB,GAClB,IAAI4O,GAAM,EACV,GAAIZ,EAAQW,SAAS,aAAc,CAC/B,IAAMxR,EAAiBwE,KAAI3B,EAAM,2BACjC4O,EAAMA,GAAOzR,EAAiB,EAKlC,OAHI6Q,EAAQW,SAAS,SACjBC,EAAMA,KAAS5O,EAAK/C,MAAQ+C,EAAK/C,IAAIC,MAElC0R,WAfXd,EAASC,IAqBRW,GAAmB,CAC5B,YAAa,YACb,IAAO,OajFH/G,GAAWC,KAAXD,OAWKkH,GAAS,SAAC,GAAgD,IAA9ChI,EAA6C,EAA7CA,SAAUiI,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAyB,EACxC7D,IAAMC,WADkC,oBAC3D4C,EAD2D,KACpDD,EADoD,OAEpB5C,IAAMC,SAAmB,IAFL,oBAE3D6D,EAF2D,KAE1CC,EAF0C,OAGxB/D,IAAMC,WAHkB,oBAG3D+D,EAH2D,KAG5CC,EAH4C,KASlE,OALAjE,IAAMI,WAAU,WACZwC,EAASgB,GACTP,GAASY,EAAkBL,EAAUG,EAArCV,CAAyDS,KAC1D,CAACF,EAAUG,EAAoBD,IAG9B,oCACI,kBAAC,KAAD,CACII,KAAK,OACLC,SAAUd,GAASY,EAAkBpB,EAAOkB,GAC5CK,gBAAiB,CAAC,KAClBxI,MAAO8G,GACPlE,YAAY,SACZ6F,cAAc,EACd1B,SAAUA,GAASsB,EAAkBpB,EAAOiB,MAExCD,GAAejC,OAAOvI,KAAKwK,GAAahT,KAAI,SAAAiM,GAAG,OAAI,kBAAC,GAAD,CAAQA,IAAKA,GAAM+G,EAAY/G,QAEzFnB,EAASqI,K,8BCrCTM,GACT,SAACjT,GAAD,OAAuBkT,gBAAKvO,SAAS3E,EAAW,KAAKmT,Y,wCCMnDC,GAAc,CAChBC,WAAY,EACZ1H,YAAa,GAYX2H,GAAc,SAChB7Q,EADgB,OAEdzC,EAFc,EAEdA,UAAWF,EAFG,EAEHA,GAAI6C,EAFD,EAECA,MAAO5D,EAFR,EAEQA,UAAWwS,EAFnB,EAEmBA,SAAUzS,EAF7B,EAE6BA,YAF7B,6BAGf,4BAAAqE,EAAA,+EAEuBQ,GAAc7E,EAAaC,EAAWiB,EAAWF,EAAI6C,EAAOF,GAFnF,OAES+O,EAFT,OAGGD,EAASC,GACThL,KAAQ+M,QAAQ,2CAA4C,GAJ/D,gDAMGtH,IAAY,MAAU,CAClBzF,QAAS,wBACT0F,YAAa,KAAMlK,aAR1B,2DAaQwR,GAAmB,SAACC,GAC7B,OACI,oCACI,kBAAC,IAAD,CACIlJ,MAAO6I,GACPnF,KAAK,QACLX,KAAK,QACLoG,QAASJ,GAAY,QAASG,IAJlC,SAKA,kBAAC,IAAD,CACIlJ,MAAO6I,GACPnF,KAAK,UACLX,KAAK,QACLoG,QAASJ,GAAY,MAAOG,IAJhC,gBAKA,kBAAC,IAAD,CACIlJ,MAAO6I,GACPnF,KAAK,UACLX,KAAK,QACLE,KAAK,SACLkG,QAASJ,GAAY,SAAUG,IALnC,YC5CCE,GAAmB,SAAClR,GAC7B,MAAe,UAAXA,GAAiC,QAAXA,EACf,OACW,WAAXA,EACA,MAEJ,UAGLmR,GAAY,SAAC,EAEfC,EACAnJ,EACA2I,EACAS,EACAC,EACAtR,GACE,IAPAY,EAOD,EAPCA,KAAMC,EAOP,EAPOA,KAQF0Q,EAAM1Q,EAAOuQ,EAAQ,EACrBI,EAAO5Q,EAAOwQ,EAAQ,EAC5B,MAAQ,CACJnJ,OAJH,EAPawJ,KAWK7Q,GAAQwQ,EAAQ,EAC/BlJ,QALH,EAPmBwJ,KAYA7Q,GAAQuQ,EAAQ,EAGhCG,MACAC,KAAMA,EAAOZ,EACbe,OAAO,aAAD,OAAeT,GAAiBlR,IACtC4R,SAAU,WACVC,gBAAiBP,EAAI,eAAWD,EAAX,MAAqB,OAC1CS,mBAAmB,GAAD,SAAON,EAAO,GAAd,gBAAwBD,EAAM,GAA9B,MAClBQ,eAAgB9J,IAkBX+J,GAAW,SAAC,GAAoH,IAAlH3V,EAAiH,EAAjHA,YAAayS,EAAoG,EAApGA,SAAUxS,EAA0F,EAA1FA,UAAWoC,EAA+E,EAA/EA,OAAQrB,EAAuE,EAAvEA,GAAI6C,EAAmE,EAAnEA,MAAO+R,EAA4D,EAA5DA,cAAezR,EAA6C,EAA7CA,KAAMR,EAAuC,EAAvCA,OAAQiI,EAA+B,EAA/BA,MAAO2I,EAAwB,EAAxBA,WAAwB,EAC9GzE,qBAD8G,oBACjI+F,EADiI,KAC1HC,EAD0H,KAElIzG,EAAI,uCAAG,sBAAAhL,EAAA,kEACTyR,EADS,SACM1L,EAAapK,EAAaC,EAAW,OAAQe,EAAI4K,GADvD,6EAAH,qDAGVqE,qBAAU,WAAQZ,MAAW,IAL2G,MAM9GS,oBAAS,GANqG,oBAMjIiG,EANiI,KAM1HC,EAN0H,KAOlIjB,EAAQa,EAAgBhK,EAC9B,OACI,kBAAC,IAAD,CAASe,IAAG,UAAK3L,EAAL,YAAW6C,GAASsD,QAC5B,kBAAC,GAAD,CACInH,YAAaA,EACb6D,MAAOA,EACP3C,UAAWmB,EACXrB,GAAIA,EACJf,UAAWA,EACXwS,SAAUA,IAEf7D,QAAQ,SACP,yBACInD,MAAOqJ,GAAU3Q,EAAM4Q,EAAOnJ,EAAO2I,EAAYsB,EAAOE,EAAOpS,GAC/DsS,YAAa,kBAAMD,GAAS,IAC5BE,WAAY,kBAAMF,GAAS,QCvE9BG,GAAoB,SAAC,GAAD,IAAGpU,EAAH,EAAGA,MAAH,OAG7B,2BACI,oCADJ,OAES,CAAC,CAAC,QAAS,CAAC,QAAS,OAAQ,CAAC,WAAWrB,KAAI,kCAAEiD,EAAF,KAAayS,EAAb,kBAC9C,kBAAC,IAAMC,SAAP,CAAgB1J,IAAKhJ,GACjB,0BAAM8H,MAAO,CACT8I,WAAY,GACZlJ,MAAOwJ,GAAiBlR,KAF5B,UADJ,IAIgB,2BAbG,SAAC5B,EAAYuU,GAAb,OAC3BvU,EAAMyB,QAAO,gBAAGG,EAAH,EAAGA,OAAH,OAAqB2S,EAAUhD,SAAS3P,MAASiB,OAYlC2R,CAAuBxU,EAAD,CAAS4B,GAAT,oBAAoByS,MAJ9D,IAI2EzS,QCV1E6S,GAAgB,SAAC,GAAD,IAAG3U,EAAH,EAAGA,KAAH,OAGzB,oCACI,2BACI,kBAAC,IAAD,CAAM6M,KAAK,UAAU+H,MPcR,aOfjB,0BJPc,SAACC,GAA8B,IAAnBC,EAAkB,uDAAN,EAC1C,IAAKD,EACD,OAAOA,EAEX,IAAME,EAAOD,EAAY,EAAK3R,KAAKC,MAAMD,KAAKqL,IAAIqG,GAAK1R,KAAKqL,IAAI,KAChE,OAAOqG,EAAEG,QAAQD,GIIkBE,CAAOjV,EAAKC,iBAE1CD,EAAKE,OAASF,EAAKE,MAAM6C,OAAS,GAC/B,kBAAC,GAAD,CAAmB7C,MAAOF,EAAKE,UCT9BgV,GAAY,SAAC,GAAD,IAAGlV,EAAH,EAAGA,KAAH,OAEjBA,EAOI,kBAAC,GAAD,CAAeA,KAAMA,IALrB,6BACI,kBAAC,IAAD,CAAM6M,KAAK,UAAU+H,MRcZ,aQfb,uBAEmB,kBAAC,KAAD,CAAKpL,MAAM,SAAX,SCJzB2L,GAAU,IADAhR,EAAQ,KACR,CAAY,CACxBiR,GAAI,SAGFC,GAAa,CACfpF,aAAc,IAYLqF,GAAO,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWpQ,EAAsB,EAAtBA,IAAKpF,EAAiB,EAAjBA,IACnC,OACI,oCACKwV,GAAa,kBAAC,KAAD,CAAO1P,QACjB,yBAAK2P,wBAAyB,CAAEC,OAAQN,GAAQO,OAAOH,MACzD1I,KAAK,UAAUjD,MAAOyL,KACxB,2BAAG,kBAAC,IAAD,CAAMxI,KAAK,SAAd,IAAwB,uBAAGgC,KAAM1J,GAAMA,IACtCpF,EACK,kBAAC,GAAD,CAAWC,KAAMD,EAAIC,OACrB,2BAAG,kBAAC,IAAD,CAAM6M,KAAK,UAAU+H,MTTjB,aSSP,8BC5BZ7B,GAAU,SAAC,GAAD,IACV1T,EADU,EACVA,UAAWF,EADD,EACCA,GAAI2C,EADL,EACKA,OAAQ1D,EADb,EACaA,UAAWwS,EADxB,EACwBA,SAAUzS,EADlC,EACkCA,YADlC,6BAEX,4BAAAqE,EAAA,+EAEuBoG,GAAezK,EAAaC,EAAWiB,EAAUgC,WAAYlC,EAAI2C,GAFxF,OAES+O,EAFT,OAGGD,EAASC,GACThL,KAAQ+M,QAAR,+BAAwC9Q,EAAxC,MAAoD,GAJvD,gDAMGwJ,IAAY,MAAU,CAClBzF,QAAS,wBACT0F,YAAa,KAAMlK,aAR1B,2DAsBQsU,GAAkB,SAAC7C,GAAkB,IACtChR,EAAiBgR,EAAjBhR,OAAQ+K,EAASiG,EAATjG,KAChB,OACI,kBAAC,IAAD,CAAMA,KAAMA,EAAMoC,MAAK,2BAAsBnN,EAAtB,MAAkCiR,QAASA,GAAQD,MC3B5E8C,GAAQ,SAAC,GAAD,IAAGzX,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,UAAWiB,EAA3B,EAA2BA,UAAWF,EAAtC,EAAsCA,GAAtC,6BAAsD,4BAAAqD,EAAA,sEAEtDqT,EAAOhQ,KAAQsI,QAAQ,oBAAqB,GAFU,SAGtDhM,EAAIhE,EAAaC,EAAWiB,EAAUgC,WAAYlC,GAHI,OAI5D0W,IACAhQ,KAAQ+M,QAAQ,2CAA4C,GALA,gDAO5DtH,IAAY,MAAU,CAClBzF,QAAS,wBACT0F,YAAa,KAAMlK,aATqC,2DA4BrD,YAASyR,GACpB,OARmB,SAACA,GAAD,OACnB,kBAAC,IAAD,CACIjG,KAAK,UACLoC,MAAM,kCACN8D,QAAS6C,GAAM9C,KAIZgD,CAAehD,I,qBCjBbiD,GAAY,SAAC,GAQmB,IAPzC5X,EAOwC,EAPxCA,YACAC,EAMwC,EANxCA,UACAoC,EAKwC,EALxCA,OACArB,EAIwC,EAJxCA,GAIwC,IAHxC6W,aAGwC,MAHhC,aAGgC,MAFxCjM,aAEwC,MAFhC+F,GAEgC,EADxCnG,EACwC,EADxCA,SACwC,EACdsE,qBADc,oBACjC+F,EADiC,KAC1BC,EAD0B,KAElCzG,EAAI,uCAAG,sBAAAhL,EAAA,kEACTyR,EADS,SACM1L,EAAapK,EAAaC,EAAWoC,EAAQrB,EAAI4K,GADvD,kCAETiM,IAFS,2CAAH,qDAKV,OADA5H,qBAAU,WAAQZ,MAAW,IACtBwG,EACH,yBAAKpK,MAAOiG,IACPlG,EACD,yBAAKC,MAAO,CAAEG,SAASkM,IAAI,GAAGjQ,IAAKgO,KAC7B,MCvBLkC,GAAoB,SAAC,GAAD,IAC7B/X,EAD6B,EAC7BA,YACAC,EAF6B,EAE7BA,UACAoC,EAH6B,EAG7BA,OACArB,EAJ6B,EAI7BA,GACAe,EAL6B,EAK7BA,MAL6B,IAM7B6T,qBAN6B,MAMb,EANa,MAO7BhK,aAP6B,MAOrB+F,GAPqB,EAQ7Bc,EAR6B,EAQ7BA,SACA8B,EAT6B,EAS7BA,WACGI,EAV0B,wHAY7B,kBAAC,GAAD,eAAW3U,YAAaA,EAAaC,UAAWA,EAAWoC,OAAQA,EAAQrB,GAAIA,EAAI4K,MAAOA,GAAW+I,GAChG5S,GAASA,EAAMrB,KAAI,WAAoCmD,GAApC,IAAGM,EAAH,EAAGA,KAAMR,EAAT,EAASA,OAAT,OAChB,kBAAC,GAAD,CACI3D,YAAaA,EACbC,UAAWA,EACXoC,OAAQA,EACRrB,GAAIA,EACJ4K,MAAOA,EACP/H,MAAOA,EACP+R,cAAeA,EACfrB,WAAYA,EACZ5Q,OAAQA,EACRQ,KAAMA,EACNwI,IAAG,eAAU3L,EAAV,YAAgB6C,GACnB4O,SAAUA,SClCpBmC,GAAU,SAACoD,GAAD,OAA+D,WAC3EA,GAAW,KAGTC,GAAW,SAACD,GAAD,OAA+D,WAC5EA,GAAW,KAiBFE,GAAwB,SAAC,GAAqF,IAAnFlY,EAAkF,EAAlFA,YAAayS,EAAqE,EAArEA,SAAUxS,EAA2D,EAA3DA,UAAWiB,EAAgD,EAAhDA,UAAWF,EAAqC,EAArCA,GAAIY,EAAiC,EAAjCA,IAAKoF,EAA4B,EAA5BA,IAAKoQ,EAAuB,EAAvBA,UAAuB,EACxFvH,IAAMC,UAAkB,GADgE,oBAC/GqI,EAD+G,KACtGH,EADsG,KAEtH,OACI,oCACI,kBAAC,KAAD,CACIlH,MAAM,GACNqH,QAASA,EACTF,SAAUA,GAASD,GACnBI,OAAQ,KACRxM,MAAOhK,EAAIgK,MAAQ,IAEnB,yBAAKH,MAAO,CAAE8J,SAAU,aACpB,kBAAC,GAAD,CACIvV,YAAaA,EACbyS,SAAUA,EACVxS,UAAWA,EACXoC,OAAQnB,EACRF,GAAIA,EACJe,MAAOH,EAAIC,MAAQD,EAAIC,KAAKE,MAC5B6T,cAAehU,EAAIgK,MACnBA,MAAOhK,EAAIgK,MACX2I,WAAY,IAEhB,kBAAC,GAAD,CAAMvN,IAAKA,EAAKoQ,UAAWA,EAAWxV,IAAKA,MAGnD,kBAAC,IAAD,CAAM8M,KAAK,aAAaoC,MAAM,aAAa8D,QAASA,GAAQoD,OClC3DK,GAAe,SAAC,GAAD,IAAGrY,EAAH,EAAGA,YAAayS,EAAhB,EAAgBA,SAAUxS,EAA1B,EAA0BA,UAAWiB,EAArC,EAAqCA,UAAWF,EAAhD,EAAgDA,GAAIY,EAApD,EAAoDA,IAAKoF,EAAzD,EAAyDA,IAAKoQ,EAA9D,EAA8DA,UAA9D,MACrB,CAACxV,GAAO,kBAAC,GAAD,CAAuB5B,YAAaA,EAAayS,SAAUA,EAAUxS,UAAWA,EAAW2B,IAAKA,EAAKZ,GAAIA,EAAIE,UAAWA,EAAW8F,IAAKA,EAAKoQ,UAAWA,KAD3I,QAExB,kBAAC,GAAD,CAAiBpX,YAAaA,EAAa0O,KAAK,QAAQ+D,SAAUA,EAAUxS,UAAWA,EAAYiB,UAAWA,EAAWF,GAAIA,EAAI2C,OAAQ,UACzI,kBAAC,GAAD,CAAiB3D,YAAaA,EAAa0O,KAAK,UAAU+D,SAAUA,EAAUxS,UAAWA,EAAWiB,UAAWA,EAAWF,GAAIA,EAAI2C,OAAQ,WAC1I,kBAAC,GAAD,CAAgB3D,YAAaA,EAAaC,UAAWA,EAAWiB,UAAWA,EAAWF,GAAIA,OzBvBjFsX,GAAa,SAACC,GAAD,OAAYxN,GAAUwN,GAEnCC,GAAe,WACpBzN,IAASA,GAAQ0N,SACrB7F,aAAa5H,IACbA,GAAQ6H,YAAW,WACX9H,IAASA,GAAQ0N,WACtB,M0BoBMC,GAAQ,SAAC,GAA8D,IAA5DzY,EAA2D,EAA3DA,UAAWiB,EAAgD,EAAhDA,UAAWyX,EAAqC,EAArCA,WAAY3Y,EAAyB,EAAzBA,YAAyB,EACzB2P,IAClD,kBAAM1F,EAASjK,EAAaC,EAAWiB,KACvC,CAACyX,IAFWjG,EAD+D,EACvEhD,OAAeK,EADwD,EACxDA,MAAkB0C,EADsC,EACjDlD,UAI9B,OAAIQ,EACO,kBAAC,GAAD,CAAc3C,YAAa2C,EAAM7M,aAIxC,kBAAC,GAAD,CAAQuQ,SAAUf,EAAOgB,YAAaL,KACjC,SAACQ,GAAD,OAAmBA,EAChB,kBAAC,KAAD,CACIpI,MAAOsG,GACP6G,QAAS1G,GACT2G,IAAK,SAACC,GAAaR,GAAWQ,GAAKA,EAAE/N,WAGjC8I,EAAcnT,KAAI,gBAAGM,EAAH,EAAGA,GAAIgG,EAAP,EAAOA,IAAKpF,EAAZ,EAAYA,IAAYwV,EAAxB,EAAiBrH,MAAjB,OACd,kBAAC,KAAD,CACIpD,IAAK3L,EACLyK,MAAOmG,GACPmH,MAAOnX,GAAO,kBAAC,GAAD,CACV5B,YAAaA,EACbC,UAAWA,EACXoC,OAAQnB,EACRF,GAAIA,EACJe,MAAOH,EAAIC,MAAQD,EAAIC,KAAKE,MAC5B6T,cAAehU,EAAIgK,MACnBiM,MAAOW,GACP/F,SAAUA,EACV8B,WhBpDP,KgBsDGlD,QAASgH,GAAa,CAAErY,cAAayS,WAAUxS,YAAWe,KAAIE,YAAWU,MAAKoF,MAAKoQ,eAEnF,kBAAC,GAAD,CAAMpQ,IAAKA,EAAKoQ,UAAWA,EAAWxV,IAAKA,SAK3D,kBAAC,KAAD,U,mDC9DVoS,GAAW,SACbhU,EACAC,EACAiB,EACA8X,GAJa,8CAKZ,WAAOrN,GAAP,iBAAAtH,EAAA,sEAESV,EAASgI,EAAQ,OAAS,SAFnC,SAGyBjB,GAAU1K,EAAaC,EAAWiB,EAAWyC,GAHtE,OAGSC,EAHT,OAIGoV,EAAWpV,GACX8D,KAAQ+M,QAAR,yBAAkC9Q,EAAlC,MAA8C,GALjD,gDAOGwJ,IAAY,MAAU,CAClBzF,QAAS,wBACT0F,YAAa,KAAMlK,aAT1B,yDALY,uDA0BJ+V,GAAe,SAAC,GAAsE,IAApEjZ,EAAmE,EAAnEA,YAAakB,EAAsD,EAAtDA,UAAWyC,EAA2C,EAA3CA,OAAQ1D,EAAmC,EAAnCA,UAAW+Y,EAAwB,EAAxBA,WACtE,OAAO,kBAAC,KAAD,CACHE,gBAAgB,OAChBC,kBAAkB,SAClBC,QAAoB,SAAXzV,EACTqQ,SAAUA,GAAShU,EAAaC,EAAWiB,EAAW8X,MCjCjDK,GAAa,SAACrZ,EAA0BC,GAAuB,IAAD,EAEnE0P,IAAkB,kB/BenB,SAAqB3P,EAA0BC,GAClD,OAAO2J,EAAgBjJ,YAAYX,EAAaC,G+BhBpBU,CAAYX,EAAaC,MADrCc,EADuD,EAC/D2O,OAA4B4J,EADmC,EAC9C/J,UAAuBQ,EADuB,EACvBA,MAQhD,OANIA,GACA5C,IAAY,QAAY,CACpBzF,QAAS,8CACT0F,YAAa2C,EAAM7M,aAGpB,CAAEnC,UAASuY,eCJTC,GAAc,SAAC,GAGd,IAFVtZ,EAES,EAFTA,UACAD,EACS,EADTA,YAEQe,EAAYsY,GAAWrZ,EAAaC,GAApCc,QACR,OAAQA,EACJ,2BACI,uCADJ,IACoB,kBAAC,IAAD,CAAMuQ,GAAI3H,EAAgB3J,EAAae,EAAQC,KAC1DD,EAAQF,OAHH,MCFd2P,GAAUgJ,IAAVhJ,MAEFiJ,GAAe,CACjBpO,MAAO,WAGLqO,GAAa,CACfrO,MAAO,OACPsO,SAAU,IAWDC,GAAc,SAAC,GAiBd,IAAD,IAhBThW,QACI1C,EAeK,EAfLA,UACA8F,EAcK,EAdLA,IACA6S,EAaK,EAbLA,cACAC,EAYK,EAZLA,WACAnW,EAWK,EAXLA,OACAoW,EAUK,EAVLA,UACAC,EASK,EATLA,QACAC,EAQK,EARLA,QACAtB,EAOK,EAPLA,WACAuB,EAMK,EANLA,MACAjO,EAKK,EALLA,SAEJhM,EAGS,EAHTA,UACAD,EAES,EAFTA,YACAgZ,EACS,EADTA,WAEMmB,EAAQJ,EAAYC,EACpBI,EAAUpV,KAAKC,MAAM8U,EAAYI,EAAQ,KACzCE,EAASnO,GAAgBD,GAC/B,OACI,oCACI,kBAACuE,GAAD,CAAOC,MAAO,GAAI0D,GAAkBjT,KAClC2Y,EAAgB,GAAKC,EAAa,IAC7B,2BAAG,kBAAC,GAAD,CAAc9Z,YAAaA,EAAagZ,WAAYA,EAAY/Y,UAAWA,EAAW0D,OAAQA,EAAQzC,UAAWA,KAC3H,kBAAC,GAAD,CAAajB,UAAWA,EAAWD,YAAaA,IAChD,2BAAG,mCAAH,IAAgBgH,GAChB,2BAAG,sCAAH,IAAmBqT,GACnB,2BACI,2CADJ,IACyBN,OACVvS,IAAV0S,GAAuBA,EAAQ,GAC5B,0BAAMzO,MAAOiO,IAAb,uBAA8CQ,EAA9C,MAGR,2BAAG,wCAAH,IAAqBI,oBAAS3B,EAAasB,GAASM,OAAO,8BAC1DP,EAAU,GAAK,oCACZ,kBAAC,KAAD,CAAUI,QAASA,IACnB,2BAAG,wCAAH,IAAqBJ,IAExBF,EAAa,GACV,uBAAGrO,MAAOgO,IACN,kBAAC,IAAD,CAAM/K,KAAK,uBADf,IACwCoL,EADxC,sBC7DHU,GAAiB,SAAC,GAEiE,IAAD,IAD3FC,MAASC,OAAUxZ,EACwE,EADxEA,UAAWjB,EAC6D,EAD7DA,UAAWD,EACkD,EADlDA,YACkD,EACjC2P,IACtD,kBlCkBD,SAAoB3P,EAA0BC,EAAmBiB,GACpE,OAAO0I,EAAgBtI,WAAWtB,EAAaC,EAAWiB,GkCnBhDI,CAAWtB,EAAaC,EAAWiB,MAD7B0C,EAD2E,EACnF8L,OAAiBK,EADkE,EAClEA,MAAkBiJ,EADgD,EAC3DzJ,UAOhC,GAJAM,IAAMI,WAAU,WACZ,IAAMjP,EAAK2Z,oBAAS3B,GACpB,OAAO,kBAAM4B,sBAAW5Z,MACzB,CAAC4C,EAASoV,IACTjJ,EACA,OAAO,kBAAC,GAAD,CAAc3C,YAAa2C,EAAM7M,aAE5C,IAAMyV,EAAU,OAAG/U,QAAH,IAAGA,OAAH,EAAGA,EAAS+U,WAC5B,OAAO/U,EACH,oCACI,kBAAC,GAAD,CACIA,QAASA,EACT3D,UAAWA,EACXD,YAAaA,EACbgZ,WAAYA,IAEhB,kBAAC,GAAD,CAAOhZ,YAAaA,EAAakB,UAAWA,EAAWyX,WAAYA,EAAa1Y,UAAWA,KAE/F,kBAAC,KAAD,O,qBCnBF4a,GAAe,SACjB7a,EACAC,EACAe,EACA8Z,GAJiB,6BAKhB,8BAAAzW,EAAA,6DACKqT,EAAOhQ,KAAQsI,QAAQ,uBAAwB,GADpD,SAEkB1F,EAAUtK,EAAaC,EAAWe,GAFpD,OAEK+Z,EAFL,OAGDD,EAAQC,GACRrD,IAJC,4CAqBQsD,GAAU,SAAC,GAAD,IAAGhb,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,UAAWe,EAA3B,EAA2BA,GAAIgG,EAA/B,EAA+BA,IAAKiF,EAApC,EAAoCA,SAAU4L,EAA9C,EAA8CA,MAAOjW,EAArD,EAAqDA,IAAKkZ,EAA1D,EAA0DA,QAA1D,OACnB,kBAAC,KAAD,CACIrP,MAAOmG,GACPmH,MAAOnX,GAAO,kBAAC,GAAD,CAAWS,OAAO,OAAOrB,GAAIA,EAAI6W,MAAOA,EAAO5X,UAAWA,IACxEoR,QAAS,CACL,kBAAC,KAAD,CACIP,MAAM,gCACNmK,UAAWJ,GAAa7a,EAAaC,EAAWe,EAAI8Z,GACpDI,OAAO,MACPC,WAAW,MAEX,kBAAC,IAAD,CAAMzM,KAAK,SAASoC,MAAK,gBAE5B,kBAAC,IAAD,CAAMQ,GAAI,CACP8J,SAAU3R,EAAazJ,EAAaC,EAAWe,GAC/Cqa,MAAO,CAAElY,QAAS6D,KAElB,kBAAC,IAAD,CAAM0H,KAAK,OAAOoC,MAAK,kCAI/B,2BAAG,kBAAC,IAAD,CAAMpC,KAAK,SAAd,IAAwB,uBAAGgC,KAAM1J,GAAMA,KACrCpF,GAAO,2BAAG,kBAAC,IAAD,CAAM8M,KAAK,UAAU+H,MtBvChB,asBuCR,4BACRxK,GAAY,2BAAG,kBAAC,IAAD,CAAMyC,KAAK,UAAU+H,MtBxCpB,asBwCJ,IAA8CvK,GAAgBD,MC/C3EuE,GAAUgJ,IAAVhJ,MAEK8K,GAAO,SAAC,GAEwD,IAAD,IADxEb,MAASC,OAAUza,EACqD,EADrDA,UAAWD,EAC0C,EAD1CA,YAC0C,EAC1B2P,IAC1C,kBpCqBD,SAAiB3P,EAA0BC,GAC9C,OAAO2J,EAAgBxH,QAAQpC,EAAaC,GoCtBlCmC,CAAQpC,EAAaC,MADvByP,EADgE,EAChEA,OAAQK,EADwD,EACxDA,MAAkB+K,EADsC,EACjDvL,UAGvB,OAAIQ,EACO,kBAAC,GAAD,CAAc3C,YAAa2C,EAAM7M,aAIxC,oCACI,kBAAC,GAAD,CAAOuN,MAAO,GAAd,QACA,kBAAC,GAAD,CAAaxQ,UAAWA,EAAWD,YAAaA,IAChD,kBAAC,GAAD,CAAQyT,SAAU/D,IACb,SAACqL,GAAD,OAAUA,EACP,kBAAC,KAAD,CACItP,MAAOsG,GACP6G,QAAS1G,GACT2G,IAAK,SAACC,GAAaR,GAAWQ,GAAKA,EAAE/N,WAEpCgQ,EAAKra,KAAI,gBAAGM,EAAH,EAAGA,GAAIgG,EAAP,EAAOA,IAAKpF,EAAZ,EAAYA,IAAKqK,EAAjB,EAAiBA,SAAjB,OACN,kBAAC,GAAD,CACIhM,UAAWA,EACXe,GAAIA,EACJ2L,IAAK3L,EACLgG,IAAKA,EACL8T,QAASA,EACTlZ,IAAKA,EACLqK,SAAUA,EACV4L,MAAOW,GACPxY,YAAaA,QAIzB,kBAAC,KAAD,W,qBCpDZ8O,I,cAAoB0K,IAApB1K,WAAWyM,GAAS/B,IAAT+B,KAENC,GAAW,SAAC,GAAD,QAAEC,YAAF,gBACpB,kBAAC,GAAD,KACI,kBAAC3M,GAAD,6LAGkC2M,GAAQ,2GAClB,kBAACF,GAAD,CAAM/Y,MAAI,GAAV,QADkB,4BAGzCiZ,GAAQ,kBAAC3M,GAAD,KACL,kBAACyM,GAAD,CAAM/Y,MAAI,GAAV,oDCdCkZ,GAAiB,CAC1BpG,OAAQ,iBACRxD,aAAc,GACdjF,YAAa,GACb8O,MAAO,QAQEC,IALc,eACpBhK,GADoB,CAEvB+J,MAAO,SAGmB,CAC1B7J,aAAc,KAGLwC,GAAc,CACvBzH,YAAa,IAGJgP,GAAa,CACtBC,SAAU,IACVC,OAAQ,oB,yCCNJjN,GAAc0K,IAAd1K,UAOFkN,GAAS,WACXtU,KAAQuU,KAAK,qBAAsB,IAGjCjP,GAAI,uCAAG,WACThN,EACAC,EACAe,EACAyB,EACAyZ,GALS,eAAA7X,EAAA,sEAQCqT,EAAOhQ,KAAQsI,QAAQ,uBAAwB,GARhD,SASC9F,EAAQlK,EAAaC,EAAd,aACTe,KACAyB,UACGyZ,IAZF,OAcLxE,IACAhQ,KAAQ+M,QAAQ,cAAe,GAf1B,gDAiBLtH,IAAY,MAAU,CAClBzF,QAAS,wBACT0F,YAAa,KAAMlK,aAnBlB,yDAAH,8DAwBJmK,GAAe,SACjBrN,EACAC,EACAe,EACAyB,EACA6K,GALiB,OAMhB,SAACC,GACFA,EAAMC,iBACNF,GAAe,SAACG,EAAUyO,GACjBzO,GACDT,GAAKhN,EAAaC,EAAWe,EAAIyB,EAAQyZ,QA4DxCC,GAAWvO,IAAKC,OAAc,CAAEhN,KAAM,QAA3B+M,EA9CE,SAAC,GAQb,IClFc1D,ED2ExBlK,EAOS,EAPTA,YACAC,EAMS,EANTA,UACAmc,EAKS,EALTA,UACApb,EAIS,EAJTA,GACAwB,EAGS,EAHTA,KAGS,IAFTsL,KAAQrB,EAEC,EAFDA,kBAAmBa,EAElB,EAFkBA,eACf+N,EACH,EADTgB,SAAYhB,MAEZ,OACI,kBAAC,IAAD,CAAMrN,SAAUX,GAAarN,EAAaC,EAAWe,EAAIwB,EAAKC,OAAQ6K,IAClE,kBAAC,IAAKW,KAAN,CAAWxC,MAAOoQ,IACbpP,EAAkB,OAAQ,CACvBC,aAAclK,EAAK3B,MAAQ,IAD9B4L,CAGG,kBAAC,IAAD,CAAO2B,YAAY,WAG3B,kBAAC,IAAKH,KAAN,CAAWxC,MAAOoQ,IACbpP,EAAkB,UAAW,CAC1ByB,MAAO,CAAC,CAAEC,UAAU,EAAMzG,QAAS,4BACnCgF,aAAclK,EAAKW,SAAYkY,GAASA,EAAMlY,SAAY,IAF7DsJ,CAIG,kBAAC,IAAD,CAAO2B,YAAY,cAG3B,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACqB,uBAAGsC,KAAK,0CAA0CpO,OAAO,SAASqO,IAAI,uBAAtE,aADrB,mHAMJ,yBAAKlF,MAAOmQ,IACR,kBAAC,IAAD,CAAQzM,KAAK,OAAOC,SAAS,SAAS3D,MAAO6I,IAA7C,QACA,kBAAC,IAAD,CAAQnF,KAAK,cAAcyF,QAASoH,GAAQvQ,MAAO6I,IAAnD,WACA,kBAAC,KAAD,CAAUgI,SC9GEpS,ED8GmBkS,EC7G3C,kBAAC,KAAD,KACI,kBAAC,KAAKnO,KAAN,CACItB,IAAI,IACJiI,QAAS,WACL1K,EAAQ,2QAHhB,2BAgBA,kBAAC,KAAK+D,KAAN,CACItB,IAAI,IACJiI,QAAS,WACL1K,EAAQ,0WAHhB,aAmBA,kBAAC,KAAK+D,KAAN,CACItB,IAAI,IACJiI,QAAS,WACL1K,EAAQ,0UAHhB,8BD0EY,kBAAC,IAAD,CAAQuB,MAAO6I,IAAf,gBACiB,kBAAC,IAAD,CAAM5F,KAAK,gBE/FxC8B,GAAUgJ,IAAVhJ,MAEF4L,GAAY,SACd5Z,EACA0H,GAFc,OAGb,SAACzH,GACFyH,EAAQ,eACD1H,EADA,CAEHC,cAMK8Z,GAAO,SAAC,GAA4E,IAAD,IAAzE9B,MAASC,OAAU1Z,EAAsD,EAAtDA,GAAIf,EAAkD,EAAlDA,UAAWD,EAAuC,EAAvCA,YAAiBqc,EAAsB,EAAtBA,SAAsB,EACxC1M,IAAmB,kBzCwBpE,SAAiB3P,EAA0BC,EAAmBe,GACjE,OAAO4I,EAAgB4S,SAASxc,EAAaC,EAAWe,GyCzBqByb,CAAQzc,EAAaC,EAAWe,MAArG+O,EADoF,EACpFA,MAAevN,EADqE,EAC7EkN,OAAyBxF,EADoD,EAC/DqF,UAC7B,OAAIQ,EACO,kBAAC,GAAD,CAAc3C,YAAa2C,EAAM7M,aAMxC,oCACI,kBAAC,GAAD,CAAOuN,MAAO,GAAd,iBAEIjO,EACI,kBAAC,IAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAavC,UAAWA,EAAWD,YAAaA,IAChD,kBAACmc,GAAD,CACIlc,UAAWA,EACXe,GAAIA,EACJwB,KAAMA,EACN4Z,UAAWA,GAAU5Z,EAAM0H,GAC3BmS,SAAUA,EACVrc,YAAaA,IAEjB,kBAAC,KAAD,CACI+T,KAAK,aACL0C,MAAM,WACNzC,SAAUoI,GAAU5Z,EAAM0H,GAC1ByP,SAAU,GACVhO,MAAOnJ,EAAKC,OAAOmC,OACbpC,EAAKC,OADJ,+DAGPgJ,MAAOiQ,MAIf,kBAAC,KAAD,QC/DZlL,GAAUgJ,IAAVhJ,MAEFnB,GAAI,uCAAG,WACTqN,GADS,SAAArY,EAAA,kEAGTqY,EAHS,SAGS7S,IAHT,6EAAH,sDAMG8S,GAAW,WAAO,IAAD,EACM9M,IAAMC,WADZ,oBACnB8M,EADmB,KACTF,EADS,KAK1B,OAFA7M,IAAMI,WAAU,WAAQZ,GAAKqN,KAAiB,IAG1C,oCACI,kBAAC,GAAD,CAAOjM,MAAO,GAAd,YACCmM,EACG,oCACI,2BAAG,mCAAH,IAAgBA,EAAS9c,MAE7B,kBAAC,KAAD,MACJ,2BACI,kBAAC,IAAD,CACIqP,KAAK,cACLX,KAAK,QACLoG,QAAS/J,IAHb,qBCdR2F,GAAgBgJ,IAAhBhJ,MAAO+K,GAAS/B,IAAT+B,KAMFsB,GAAQ,SAAC,GAAuC,IAArC5c,EAAoC,EAApCA,UAAWD,EAAyB,EAAzBA,YAAyB,EAC9B2P,IAAuB,kB3CyC9C,SAAkB3P,EAA0BC,GAC/C,OAAO2J,EAAgBjH,YAAY3C,EAAaC,G2C1CO6c,CAAS9c,EAAaC,MAArE8P,EADgD,EAChDA,MAAOL,EADyC,EACzCA,OACf,OAAIK,EACO,kBAAC,GAAD,CAAc3C,YAAa2C,EAAM7M,aAGxC,oCACI,kBAAC,GAAD,CAAOuN,MAAO,GAAd,SACA,kBAAC,GAAD,CAAUgL,MAAM,IAEZ/L,EACM,kBAAC,KAAD,CACEwB,UAAQ,EACRC,WAAYM,OAAO/D,OAAOgC,GAC1B0B,WAAY,gBAAGpQ,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAMsC,EAAb,EAAaA,QAAb,OACR,kBAAC,KAAK8K,KAAN,CACIoD,QAAS,CACL,kBAAC,IAAD,CAAMC,GAAI7H,EAAazJ,EAAaC,EAAWe,IAA/C,UAKJ,kBAAC,KAAKiN,KAAKsD,KAAX,CACIT,MACI,kBAAC,IAAD,CAAMQ,GAAI7H,EAAazJ,EAAaC,EAAWe,IAC1CH,EADL,IACW,kBAAC,GAAD,CAAM2B,MAAI,GAAEW,UAOzC,kBAAC,KAAD,MAEV,6BACA,kBAAC,IAAD,CAAMmO,GAAI7H,EAAazJ,EAAaC,EAAW+E,KAAKC,MAAMC,KAAKC,MAAQ,KAAMjC,aACzE,kBAAC,IAAD,CAAQiM,KAAK,OAAOX,KAAK,SAAzB,eCrCVuO,GAAU,SACZ9P,EACAhN,EACAD,GAHY,6BAIX,4BAAAqE,EAAA,+EAE2BuG,GAAa5K,EAAaC,GAFrD,OAESiB,EAFT,OAGG+L,EAAQhJ,KAAKyF,EAAgB1J,EAAaC,EAAWiB,IAHxD,gDAKGiM,IAAY,MAAU,CAClBzF,QAAS,wBACT0F,YAAa,KAAMlK,aAP1B,0DAYC8Z,GAAkB,SACpBhd,EADoB,EAGpBsZ,GAHoB,IAElBzY,EAFkB,EAElBA,KAAMG,EAFY,EAEZA,GAAIJ,EAFQ,EAERA,aAFQ,8CAInB,+BAAAyD,EAAA,6DAAmB+U,EAAnB,EAAS9W,OAAU8W,QAAnB,SACqBtP,EAAY9J,EAAD,eAAmBY,EAAnB,CAAiCqc,QAAS7D,IAAWvY,EAAMG,GAD3F,OACKD,EADL,OAEDuY,EAAWvY,GAFV,2CAJmB,wDASlBmc,GAAuB,SAACrD,EAAuBC,EAAoBnW,EAAgBqW,GACrF,OAAIA,EAAU,EACH,UAENH,GAAgC,IAAfC,EAGP,SAAXnW,EACO,eAEJ,qBALI,SAQFwZ,GAAU,SAAC,GAGqD,IAAD,IAFxE1C,MAASC,OAAUza,EAEqD,EAFrDA,UAAWD,EAE0C,EAF1CA,YAC9BiN,EACwE,EADxEA,QACwE,EACxCoM,GAAWrZ,EAAaC,GAAhDc,EADgE,EAChEA,QAASuY,EADuD,EACvDA,WADuD,ECvDjD,SAACtZ,EAA0BC,GAAuB,IAAD,EACH0P,GAAQ,sBAAY,4BAAAtL,EAAA,sEAClE0F,EAAY/J,EAAaC,GADyC,cAC/E2C,EAD+E,yBAE9EA,EAAKwB,MAAK,kBAAcC,EAAd,EAAGnD,UAAkCoD,EAArC,EAA0BpD,UAA1B,OAAkD2E,SAASvB,EAAG,IAAMuB,SAASxB,EAAG,QAFZ,4CAAzE9C,EADwD,EAChEmO,OAA6B0N,EADmC,EAC9C7N,UAAwBQ,EADsB,EACtBA,MAAOC,EADe,EACfA,QAUzD,OANID,GACA5C,IAAY,QAAY,CACpBzF,QAAS,4DACT0F,YAAa2C,EAAM7M,aAGpB,CAAC3B,WAAU6b,cAAapN,WD8CDqN,CAAYrd,EAAaC,GAA/CsB,EAFgE,EAEhEA,SAAUyO,EAFsD,EAEtDA,QAClB,OACI,oCACI,kBAAC,IAAWQ,MAAZ,CAAkBC,MAAO,GAAzB,WACE1P,EAAqB,oCACnB,2BAAG,oCAAH,IAAiBA,EAAQF,MACzB,2BAAG,kCAAH,IAAeZ,GACf,2BAAG,mCAAH,IAAgBc,EAAQH,aAAaoG,KACrC,2BAAG,sCAAH,IAAmBkF,GAAgBnL,EAAQH,aAAaqL,WACxD,2BAAG,sCACkC,SAAhClL,EAAQH,aAAa+G,OAChB,wCAAG,kBAAC,IAAD,CAAM+G,KAAK,iBAAd,cACA,wCAAG,kBAAC,IAAD,CAAMA,KAAK,gBAAd,gBACK3N,EAAQH,aAAasZ,OACpB,0BAAMzO,MAAO,CAAEJ,MAAO,OAAQsO,SAAU,KAAxC,YAAwD5Y,EAAQH,aAAasZ,MAA7E,OAIhB,2BACI,kBAAC,IAAD,CACId,QAASrY,EAAQH,aAAaqc,QAC9BjJ,SAAUgJ,GAAgBhd,EAAae,EAASuY,IAFpD,uCAOJ,2BACI,kBAAC,IAAD,CACInK,KAAK,cACLX,KAAK,QACLoG,QAASmI,GAAQ9P,EAAShN,EAAWD,IAHzC,OADJ,QAQI,kBAAC,IAAD,CAAMsR,GAAI9H,EAAaxJ,EAAaC,IAChC,kBAAC,IAAD,CACIkP,KAAK,UACLX,KAAK,SAFT,UAQR,kBAAC,KAAD,CACIyC,WAAW,aACXC,UAAQ,EACRlB,QAASA,EACTmB,WAAY5P,EACZ6P,WAAY,gBAAGlQ,EAAH,EAAGA,UAAW2Y,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,WAAYnW,EAAzC,EAAyCA,OAAQqW,EAAjD,EAAiDA,QAAjD,OACR,kBAAC,KAAK/L,KAAN,CACIoD,QAAS,CACL,kBAAC,IAAD,CAAMC,GAAI5H,EAAgB1J,EAAaC,EAAWiB,IAAlD,UAKJ,kBAAC,KAAK+M,KAAKsD,KAAX,CACIT,MACI,kBAAC,IAAD,CAAMQ,GAAI5H,EAAgB1J,EAAaC,EAAWiB,IAC7CiT,GAAkBjT,IAE3BkM,YAAa,oCACT,kBAAC,IAAD,CAAMsB,KAAMwO,GAAqBrD,EAAeC,EAAYnW,EAAQqW,KACpE,wCAAcH,EAAd,aAAuCC,EAAvC,gBAAgEE,WA3D5E,kBAAC,KAAD,MAkEZ,6BACA,kBAAC,GAAD,CAAO/Z,UAAWA,EAAWD,YAAaA,ME/HzCsd,GAAoB,SAAC,GAE2C,IAAD,IADxE7C,MAASC,OAAUza,EACqD,EADrDA,UAAWD,EAC0C,EAD1CA,YAEtBe,EAAYsY,GAAWrZ,EAAaC,GAApCc,QACR,OACI,oCACI,kBAAC,IAAWkN,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,G/CXD,K+CWL,aACjB,kBAAC,IAAWrD,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GAAI3H,EAAgB3J,EAAaC,IAAvC,OAAoDc,QAApD,IAAoDA,OAApD,EAAoDA,EAASF,SCN7E0c,GAA2B,SAAC,GAEuD,IAAD,IAD3F9C,MAASC,OAAUza,EACwE,EADxEA,UAAWiB,EAC6D,EAD7DA,UAAWlB,EACkD,EADlDA,YAEjCe,EAAYsY,GAAWrZ,EAAaC,GAApCc,QACR,OACI,oCACI,kBAAC,IAAWkN,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GhDZD,KgDYL,aACjB,kBAAC,IAAWrD,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GAAI3H,EAAgB3J,EAAaC,IAAvC,OAAoDc,QAApD,IAAoDA,OAApD,EAAoDA,EAASF,OAC9E,kBAAC,IAAWoN,KAAZ,KACI,kBAAC,IAAD,CAAMqD,GAAI5H,EAAgB1J,EAAaC,EAAWiB,IAAlD,YACciT,GAAkBjT,OCXnCsc,GAAiB,SAAC,GAE8C,IAAD,IADxE/C,MAASC,OAAUza,EACqD,EADrDA,UAAWD,EAC0C,EAD1CA,YAEtBe,EAAYsY,GAAWrZ,EAAaC,GAApCc,QACR,OACI,oCACI,kBAAC,IAAWkN,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GjDXD,KiDWL,aACjB,kBAAC,IAAWrD,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GAAI3H,EAAgB3J,EAAaC,IAAvC,OAAoDc,QAApD,IAAoDA,OAApD,EAAoDA,EAASF,OAC9E,kBAAC,IAAWoN,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GAAI9H,EAAaxJ,EAAaC,IAApC,WCRhBwd,GAAiB,SAAC,GAE0D,IAAD,IADpFhD,MAASC,OAAUza,EACiE,EADjEA,UAAWe,EACsD,EADtDA,GAAIhB,EACkD,EADlDA,YAE1Be,EAAYsY,GAAWrZ,EAAaC,GAApCc,QACR,OACI,oCACI,kBAAC,IAAWkN,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GlDXD,KkDWL,aACjB,kBAAC,IAAWrD,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GAAI3H,EAAgB3J,EAAaC,IAAvC,OAAoDc,QAApD,IAAoDA,OAApD,EAAoDA,EAASF,OAC9E,kBAAC,IAAWoN,KAAZ,KAAiB,kBAAC,IAAD,CAAMqD,GAAI7H,EAAazJ,EAAaC,EAAWe,IAA/C,WCWrB0c,GAAoBC,IAApBD,QAASE,GAAWD,IAAXC,OACTpN,GAAUgJ,IAAVhJ,MAEFqN,GAAc,CAChBC,UAAW,SAETC,GAAa,CACf1S,MAAO,OACP2S,UAAW,GACXnR,YAAa,GACb8O,MAAO,QAELsC,GAAe,CACjBC,WAAY,OACZC,QAAS,GACTpC,OAAQ,GACR+B,UAAW,KAkDAM,GA/CH,kBACR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ3S,MAAOoS,IACX,kBAACD,GAAD,KACI,kBAAC,IAAD,CAAMtM,GnD/CY,KmDgDd,kBAAC,GAAD,CAAOb,MAAO,EAAGhF,MAAOsS,IAAxB,iBAIJ,kBAAC,KAAD,CACItH,MAAM,OACN1C,KAAK,aACLtI,MAAO,CAAEP,WAAY,SAErB,kBAAC,KAAK+C,KAAN,CAAWtB,IAAI,YACX,kBAAC,IAAD,CAAM+B,KAAK,WACX,0BAAM2P,UAAU,YAAhB,YACA,kBAAC,IAAD,CAAM/M,GnD5DI,OmD8Dd,kBAAC,KAAKrD,KAAN,CAAWtB,IAAI,WAAWlB,MAAO,CAAEkQ,MAAO,UACtC,kBAAC,IAAD,CAAMrK,GnD7DQ,amD8DV,kBAAC,IAAD,CAAM5C,KAAK,gBAK3B,kBAAC,IAAD,CAAYjD,MAAO,CAAEsQ,OAAQ,kBACzB,kBAAC,IAAD,CAAO5a,KAAMwI,EAAgB,eAAgB,cAAe2U,OAAK,EAACC,UAAWjB,KAC7E,kBAAC,IAAD,CAAOnc,KAAMuI,EAAgB,eAAgB,aAAc,cAAe4U,OAAK,EAACC,UAAWhB,KAC3F,kBAAC,IAAD,CAAOpc,KAAMqI,EAAa,eAAgB,cAAe8U,OAAK,EAACC,UAAWf,KAC1E,kBAAC,IAAD,CAAOrc,KAAMsI,EAAa,eAAgB,aAAc,OAAQ6U,OAAK,EAACC,UAAWd,MAErF,kBAACC,GAAD,CAASjS,MAAOwS,IACZ,kBAAC,IAAD,CAAO9c,KnD5EW,ImD4EWmd,OAAK,EAACC,UAAW/M,KAC9C,kBAAC,IAAD,CAAOrQ,KnD5EiB,OmD4EWmd,OAAK,EAACC,UAAWC,KACpD,kBAAC,IAAD,CAAOrd,KnD5Ee,YmD4EWmd,OAAK,EAACC,UAAW5B,KAClD,kBAAC,IAAD,CAAOxb,KnD5EiB,emD4EWmd,OAAK,EAACC,UAAWhO,KAEpD,kBAAC,IAAD,CAAOpP,KAAMqI,EAAa,eAAgB,cAAe8U,OAAK,EAACC,UAAWjD,KAC1E,kBAAC,IAAD,CAAOna,KAAMsI,EAAa,eAAgB,aAAc,OAAQ6U,OAAK,EAACC,UAAWhC,KACjF,kBAAC,IAAD,CAAOpb,KAAMuI,EAAgB,eAAgB,aAAc,cAAe6U,UAAW/D,KACrF,kBAAC,IAAD,CAAOrZ,KAAMwI,EAAgB,eAAgB,cAAe2U,OAAK,EAACC,UAAWpB,SC1EzEsB,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASlE,MACvB,2DCXNmE,IAASC,OAAQ,kBAAC,IAAD,KAAoB,kBAAC,GAAD,OAA+BC,SAASC,eAAe,SDkItF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCEtIZ,IAAKxW,EALZ,kC,SAKYA,K,iBAAAA,M","file":"static/js/main.ad8beede.chunk.js","sourcesContent":["import { join, extname } from 'path';\nimport * as md5 from 'md5';\nimport { groupOverlappingZone } from 'pixdiff-zone';\n\nimport { CRAWL_FOLDER, PIN_FOLDER, CODE_FOLDER, PROJECT_FOLDER } from './config';\nimport { getFilePath } from './utils';\n\nimport { Crawler, CrawlerInput, PageData, Project, Code, CodeInfoList } from '../typing';\nimport { CrawlerProviderBase } from './CrawlerProviderBase';\nimport { StorageType } from '../storage.typing';\n\nexport class CrawlerProvider extends CrawlerProviderBase {\n    getSettings() {\n        return {\n            dir: __dirname,\n        };\n    }\n\n    loadProject(storageType: StorageType, projectId: string): Promise<Project> {\n        return this.readJSON(storageType, this.join(projectId, `project.json`));\n    }\n\n    async loadProjects(storageType: StorageType): Promise<Project[]> {\n        // we should use accumulator\n        const projects = await this.readdir(storageType, PROJECT_FOLDER);\n        return Promise.all(\n            projects.map(projectId => this.loadProject(storageType, projectId)),\n        );\n    }\n\n    async saveProject(storageType: StorageType, crawlerInput: CrawlerInput, name: string, projectId?: string): Promise<Project> {\n        if (!projectId) {\n            projectId = (md5 as any)(name) as string;\n        }\n        const project = { id: projectId, name, crawlerInput };\n        await this.saveJSON(storageType, 'project.json', project);\n        return project;\n    }\n\n    getCrawler(storageType: StorageType, projectId: string, timestamp: string): Promise<Crawler> {\n        const path = this.join(projectId, CRAWL_FOLDER, timestamp, '_.json');\n        return this.readJSON(storageType, path);\n    }\n\n    async getAllCrawlers(storageType: StorageType, projectId: string): Promise<Crawler[]> {\n        const path = this.join(projectId, CRAWL_FOLDER);\n        const folders = await this.readdir(storageType, path);\n        const crawlers: Crawler[] = await Promise.all(\n            folders.map(timestamp => this.getCrawler(storageType, projectId, timestamp)),\n        );\n        return crawlers;\n    }\n\n    async copyToPins(storageType: StorageType, projectId: string, timestamp: string, id: string): Promise<PageData> {\n        const crawlerFolder = this.join(projectId, CRAWL_FOLDER, timestamp);\n        const crawlerFolderPath = getFilePath(id, crawlerFolder);\n\n        // set diff to 0\n        // instead to load this file again, we could get the data from the frontend?\n        const data: PageData = await this.readJSON(storageType, crawlerFolderPath('json'));\n        if (data?.png) {\n            data.png.diff = {\n                pixelDiffRatio: 0,\n                zones: [],\n            };\n            if (data.png.diff.pixelDiffRatio > 0) {\n                await this.saveJSON(storageType, crawlerFolderPath('json'), data);\n            }\n        }\n\n        // copy files\n        const pinFolderPath = getFilePath(id, this.join(projectId, PIN_FOLDER));\n        await this.saveJSON(storageType, pinFolderPath('json'), data);\n        await this.copy(storageType, crawlerFolderPath('html'), pinFolderPath('html'));\n        await this.copy(storageType, crawlerFolderPath('png'), pinFolderPath('png'));\n\n        return data;\n    }\n\n    async removeFromPins(storageType: StorageType, projectId: string, id: string): Promise<PageData[]> {\n        const pinFolderPath = getFilePath(id, this.join(projectId, PIN_FOLDER));\n\n        await this.remove(storageType, pinFolderPath('png'));\n        await this.remove(storageType, pinFolderPath('html'));\n        await this.remove(storageType, pinFolderPath('json'));\n\n        return this.getPins(storageType, projectId);\n    }\n\n    image(storageType: StorageType, projectId: string, folder: string, id: string) {\n        const target = folder === 'base'\n            ? this.join(projectId, PIN_FOLDER)\n            : this.join(projectId, CRAWL_FOLDER, folder);\n        return this.blob(storageType, getFilePath(id, target)('png'));\n    }\n\n    async saveCode(storageType: StorageType, projectId: string, code: Code): Promise<void> {\n        const { source, ...codeInfo } = code;\n        const list = await this.getCodeList(storageType, projectId);\n        list[code.id] = codeInfo;\n        await this.saveJSON(\n            storageType,\n            this.join(projectId, CODE_FOLDER, `list.json`),\n            { ...list }); // for some reason it need a copy\n        await this.saveFile(\n            storageType,\n            this.join(projectId, CODE_FOLDER, `${code.id}.js`),\n            source);\n    }\n\n    async loadCode(storageType: StorageType, projectId: string, id: string): Promise<Code> {\n        const list = await this.getCodeList(storageType, projectId);\n        const codeInfo = list[id];\n        const sourcePath = this.join(projectId, CODE_FOLDER, `${id}.js`);\n        if (codeInfo) {\n            const buffer = await this.read(storageType, sourcePath);\n            if (buffer) {\n                const source = buffer.toString();\n                return { ...codeInfo, source };\n            }\n        }\n        return {\n            id,\n            name: '',\n            pattern: '',\n            source: '',\n        };\n    }\n\n    async getCodeList(storageType: StorageType, projectId: string, forceLocal = false): Promise<CodeInfoList> {\n        const listPath = this.join(projectId, CODE_FOLDER, `list.json`);\n        const list = await this.readJSON(storageType, listPath);\n        return list || {};\n    }\n\n    getPins(storageType: StorageType, projectId: string): Promise<PageData[]> {\n        return this.getPinsInFolder(storageType, this.join(projectId, PIN_FOLDER));\n    }\n\n    getPin(storageType: StorageType, projectId: string, id: string): Promise<PageData> {\n        return this.getPageInFolder(storageType, this.join(projectId, PIN_FOLDER), id);\n    }\n\n    getPages(storageType: StorageType, projectId: string, timestamp: string): Promise<PageData[]> {\n        return this.getPinsInFolder(\n            storageType,\n            this.join(projectId, CRAWL_FOLDER, timestamp),\n        );\n    }\n\n    private getPageInFolder(storageType: StorageType, folder: string, id: string): Promise<PageData> {\n        return this.readJSON(storageType, getFilePath(id, folder)('json'));\n    }\n\n    private async getPinsInFolder(storageType: StorageType, folder: string): Promise<PageData[]> {\n        const files = await this.readdir(storageType, folder);\n        return Promise.all(\n            files.filter(file => extname(file) === '.json' && file !== '_.json')\n                .map(file => this.readJSON(storageType, join(folder, file))),\n        );\n    }\n\n    async setCrawlerStatus(storageType: StorageType, projectId: string, timestamp: string, status: string): Promise<Crawler> {\n        const file = this.join(projectId, CRAWL_FOLDER, timestamp, '_.json');\n        const crawler: Crawler = await this.readJSON(storageType, file);\n        crawler.status = status;\n        await this.saveJSON(storageType, file, crawler);\n        return crawler;\n    }\n\n    async setZoneStatus(storageType: StorageType, projectId: string, timestamp: string, id: string, index: number, status: string): Promise<PageData> {\n        const folder = this.join(projectId, CRAWL_FOLDER, timestamp);\n        const filePath = getFilePath(id, folder);\n        const data: PageData = await this.readJSON(storageType, filePath('json'));\n        if (status === 'pin') {\n            const pinPath = getFilePath(id, this.join(projectId, PIN_FOLDER));\n            const pin: PageData = await this.readJSON(storageType, pinPath('json'));\n\n            if (pin?.png?.diff?.zones && data?.png?.diff?.zones) {\n                pin.png.diff.zones.push({ ...data.png.diff.zones[index], status });\n                const zones = pin.png.diff.zones.map(item => item.zone);\n                zones.sort((a, b) => a.xMin * a.yMin - b.xMin * b.yMin);\n                const groupedZones = groupOverlappingZone(zones);\n                pin.png.diff.zones = groupedZones.map(zone => ({ zone, status }));\n            }\n\n            await this.saveJSON(storageType, pinPath('json'), pin);\n        }\n        if (data?.png?.diff?.zones) {\n            data.png.diff.zones[index].status = status;\n        }\n        await this.saveJSON(storageType, filePath('json'), data);\n        return data;\n    }\n\n    async setZonesStatus(storageType: StorageType, projectId: string, timestamp: string, id: string, status: string): Promise<PageData> {\n        const folder = this.join(projectId, CRAWL_FOLDER, timestamp);\n        const filePath = getFilePath(id, folder);\n        const page: PageData = await this.readJSON(storageType, filePath('json'));\n        let newPage: PageData;\n        for (let index = 0; index < page!.png!.diff!.zones.length; index++) {\n            newPage = await this.setZoneStatus(storageType, projectId, timestamp, id, index, status);\n        }\n        return newPage!;\n    }\n\n    async startCrawler(storageType: StorageType, projectId: string, push?: (payload: any) => void): Promise<string> {\n        const pagesFolder = Math.floor(Date.now() / 1000).toString();\n        this.crawl(storageType, projectId, pagesFolder, 30, push);\n\n        return pagesFolder;\n    }\n}\n","import { join } from 'path';\nimport Cookies from 'universal-cookie';\n\nexport const ROOT_FOLDER = process.env.ROOT_FOLDER || join(__dirname, '../../..');\nexport const PROJECT_FOLDER = process.env.PROJECT_FOLDER || 'test-crawler';\nexport const CRAWL_FOLDER = 'crawl';\nexport const PIN_FOLDER = 'pin';\nexport const CODE_FOLDER = 'code';\nexport const MAX_HISTORY = 10;\nexport const TIMEOUT = 10000; // 10 sec\nexport const CONSUMER_COUNT = 5;\nexport const USER_AGENT = 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)';\nexport const CONSUME_TIMEOUT = process.env.CONSUME_TIMEOUT ? parseInt(process.env.CONSUME_TIMEOUT, 10) : 0;\n\nexport const config = getConfig();\n\nfunction getConfig(): Config {\n    const configFile = join(ROOT_FOLDER, 'test-crawler.config.js');\n    let config: any;\n    try {\n        config = require(configFile);\n    }\n    catch (e) {\n        try {\n            const cookies = new Cookies();\n            config = {\n                remote: {\n                    github: cookies.get('github'),\n                }\n            };\n        }\n        catch (e) {\n            config = {};\n        }\n    }\n    return {\n        remote: {},\n        ...config,\n    }\n}\n\nexport interface Config {\n    remote: {\n        github?: GitHubConfig,\n    }\n}\n\nexport interface GitHubConfig {\n    user: string;\n    token: string;\n    repo: string; // for the moment only single repo suported but we might want to make it on any repo\n}\n","import { Storage } from './Storage';\n\nimport { basename, dirname } from 'path';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { CrawlTarget } from '../../typing';\nimport { config, GitHubConfig } from '../config';\nimport { ERR } from '../../error';\n\nconst BASE_URL = 'https://api.github.com';\nconst COMMIT_PREFIX = '[test-crawler]';\n\nexport class GitHubStorage extends Storage {\n    private config: GitHubConfig | undefined;\n    constructor() {\n        super();\n        this.config = config.remote.github;\n    }\n\n    async readdir(path: string) {\n        const { data } = await this.getContents(path);\n        return data.map(({ name }: any) => name) as string[]; // type is also available so we could filter for type === 'file'\n    }\n\n    async blob(path: string) {\n        const { data } = await this.getContents(dirname(path));\n        const filename = basename(path);\n        const filedata = data.find((item: any) => item.name === filename);\n        if (!filedata) {\n            return;\n        }\n        const { data: { content } } = await this.call({\n            url: `${this.blobUrl}/${filedata.sha}`,\n        });\n        return Buffer.from(content, 'base64');\n    }\n\n    async read(path: string) {\n        const { data: { content } } = await this.getContents(path);\n        return Buffer.from(content, 'base64');\n    }\n\n    async readJSON(path: string) {\n        try {\n            return JSON.parse((await this.read(path)).toString());\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async remove(file: string) {\n        const { data: { sha } } = await this.getContents(file);\n        const data = JSON.stringify({\n            message: `${COMMIT_PREFIX} save json`,\n            sha,\n        });\n        await this.call({\n            method: 'DELETE',\n            url: `${this.contentsUrl}/${file}`,\n            data,\n        });\n    }\n\n    async saveFile(file: string, content: string) {\n        const { data: { sha } } = await this.getContents(file);\n        const data = JSON.stringify({\n            message: `${COMMIT_PREFIX} save json`,\n            content: Buffer.from(content).toString('base64'),\n            sha,\n        });\n        await this.call({\n            method: 'PUT',\n            url: `${this.contentsUrl}/${file}`,\n            data,\n        });\n    }\n\n    async saveJSON(file: string, content: any) {\n        return this.saveFile(file, JSON.stringify(content, null, 4))\n    }\n\n    async copy(src: string, dst: string) {\n        const srcData = await this.read(src);\n        if (srcData) {\n            this.saveFile(dst, srcData.toString());\n        }\n    }\n\n    async crawl(crawlTarget?: CrawlTarget, consumeTimeout?: number, push?: (payload: any) => void) {\n        throw new Error('To be implemented');\n    }\n\n    protected call(config: AxiosRequestConfig) {\n        if (!this.config) {\n            throw new Error(ERR.missingGitHubConfig);\n        }\n        return axios({\n            ...config,\n            headers: { ...config?.headers, 'Authorization': `token ${this.config.token}` },\n        });\n    }\n\n    protected getContents(path: string) {\n        return this.call({\n            url: `${this.contentsUrl}/${path}`,\n        });\n    }\n\n    protected get contentsUrl() {\n        return `${BASE_URL}/repos/${this.config?.user}/${this.config?.repo}/contents`;\n    }\n\n    protected get blobUrl() {\n        return `${BASE_URL}/repos/${this.config?.user}/${this.config?.repo}/git/blobs`;\n    }\n\n    // protected get repoUrl() {\n    //     return `${BASE_URL}/repos/${this.config.user}/${this.config.repo}/${PROJECT_FOLDER}`;\n    // }\n}\n","import { CrawlTarget } from '../../typing';\n\nexport abstract class Storage {\n    abstract blob(path: string): Promise<Buffer | undefined>;\n    abstract read(path: string): Promise<Buffer>;\n    abstract readJSON(path: string): Promise<any>;\n    abstract readdir(path: string): Promise<string[]>;\n    abstract saveJSON(file: string, data: any): Promise<void>;\n    abstract saveFile(file: string, data: string): Promise<void>;\n    abstract copy(src: string, dst: string): Promise<void>;\n    abstract remove(file: string): Promise<void>;\n    abstract crawl(crawlTarget?: CrawlTarget, consumeTimeout?: number, push?: (payload: any) => void): Promise<void>;\n}\n","import { GitHubStorage } from './storage/GitHubStorage';\nimport { StorageType } from '../storage.typing';\n\nconst gitHubStorage = new GitHubStorage();\n\nexport abstract class CrawlerProviderStorage {\n    async startCrawlers(push?: (payload: any) => void) {}\n\n    protected getStorage(storageType: StorageType) {\n        if (storageType === StorageType.GitHub) {\n            return gitHubStorage;\n        }\n        throw new Error(`Unknown storage type ${storageType}.`)\n    }\n}\n","import { PROJECT_FOLDER } from './config';\nimport { join } from 'path';\nimport { CrawlerProviderStorage } from './CrawlerProviderStorage';\nimport { StorageType } from '../storage.typing';\n\nexport abstract class CrawlerProviderBase extends CrawlerProviderStorage {\n    protected join(projectId: string, ...path: string[]) {\n        return join(PROJECT_FOLDER, projectId, ...path);\n    }\n\n    protected readdir(storageType: StorageType, path: string) {\n        const remote = this.getStorage(storageType);\n        return remote.readdir(path);\n    }\n\n    protected read(storageType: StorageType, path: string) {\n        const remote = this.getStorage(storageType);\n        return remote.read(path);\n    }\n\n    protected blob(storageType: StorageType, path: string) {\n        const remote = this.getStorage(storageType);\n        return remote.blob(path);\n    }\n\n    protected readJSON(storageType: StorageType, path: string) {\n        const remote = this.getStorage(storageType);\n        return remote.readJSON(path);\n    }\n\n    protected saveFile(storageType: StorageType, file: string, content: string) {\n        const remote = this.getStorage(storageType);\n        return remote.saveFile(file, content);\n    }\n\n    protected saveJSON(storageType: StorageType, file: string, content: any) {\n        const remote = this.getStorage(storageType);\n        return remote.saveJSON(file, content);\n    }\n\n    protected remove(storageType: StorageType, file: string) {\n        const remote = this.getStorage(storageType);\n        return remote.remove(file);\n    }\n\n    protected copy(storageType: StorageType, src: string, dst: string) {\n        const remote = this.getStorage(storageType);\n        return remote.copy(src, dst);\n    }\n\n    protected crawl(\n        storageType: StorageType,\n        projectId: string,\n        pagesFolder: string,\n        consumeTimeout?: number,\n        push?: (payload: any) => void,\n    ) {\n        const crawlTarget = { projectId, pagesFolder };\n        const remote = this.getStorage(storageType);\n        return remote.crawl(crawlTarget, consumeTimeout, push);\n    }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 312;","import { join } from 'path';\n\nexport type FilePath = (extension: string) => string;\nexport const getFilePath = (id: string, distFolder: string): FilePath => (extension: string) => {\n    return join(distFolder, `${id}.${extension}`);\n};","export enum ERR {\n    missingGitHubConfig = 'cannot use GitHub if no config provided',\n}\n","import { StorageType } from './server/storage.typing';\n\nexport const getHomeRoute = () => '/';\nexport const getNewProjectRoute = () => '/new';\nexport const getSettingsRoute = () => '/settings';\nexport const getAuthGitHubRoute = () => '/auth/github';\nexport function getPinsRoute<T = StorageType>(storageType: T, projectId: string) {\n    return `/pins/${storageType}/${projectId}`;\n}\nexport function getCodeRoute<T = StorageType>(storageType: T, projectId: string, id: string) {\n    return `/code/${storageType}/${projectId}/${id}`;\n}\nexport function getResultsRoute<T = StorageType>(storageType: T, projectId: string, timestamp: string) {\n    return `/results/${storageType}/${projectId}/${timestamp}`;\n}\nexport function getProjectRoute<T = StorageType>(storageType: T, projectId: string) {\n    return `/project/${storageType}/${projectId}`;;\n}\n","import { WsContext } from 'isomor-server';\n\nimport {\n    CrawlerProvider,\n} from './lib';\n\nimport {\n    Crawler,\n    CrawlerInput,\n    PageData,\n    Project,\n    Code,\n    CodeInfoList,\n} from './typing';\nimport { StorageType } from './storage.typing';\n\nconst crawlerProvider = new CrawlerProvider();\n\n// Force getSettings to be a async since crawlerProvider.getSettings is sync\nexport async function getSettings() {\n    return crawlerProvider.getSettings();\n}\n\nexport function loadProject(storageType: StorageType, projectId: string): Promise<Project> {\n    return crawlerProvider.loadProject(storageType, projectId);\n}\n\nexport function loadProjects(storageType: StorageType): Promise<Project[]> {\n    return crawlerProvider.loadProjects(storageType);\n}\n\nexport function saveProject(storageType: StorageType, crawlerInput: CrawlerInput, name: string, projectId?: string): Promise<Project> {\n    return crawlerProvider.saveProject(storageType, crawlerInput, name, projectId);\n}\n\nexport function getCrawler(storageType: StorageType, projectId: string, timestamp: string): Promise<Crawler> {\n    return crawlerProvider.getCrawler(storageType, projectId, timestamp);\n}\n\nexport function getCrawlers(storageType: StorageType, projectId: string): Promise<Crawler[]> {\n    return crawlerProvider.getAllCrawlers(storageType, projectId);\n}\n\nexport function getPages(storageType: StorageType, projectId: string, timestamp: string): Promise<PageData[]> {\n    return crawlerProvider.getPages(storageType, projectId, timestamp);\n}\n\nexport function getPins(storageType: StorageType, projectId: string): Promise<PageData[]> {\n    return crawlerProvider.getPins(storageType, projectId);\n}\n\nexport function getPin(storageType: StorageType, projectId: string, id: string): Promise<PageData> {\n    return crawlerProvider.getPin(storageType, projectId, id);\n}\n\nexport function setCode(storageType: StorageType, projectId: string, code: Code): Promise<void> {\n    return crawlerProvider.saveCode(storageType, projectId, code);\n}\n\nexport function getCode(storageType: StorageType, projectId: string, id: string): Promise<Code> {\n    return crawlerProvider.loadCode(storageType, projectId, id);\n}\n\nexport function getCodes(storageType: StorageType, projectId: string): Promise<CodeInfoList> {\n    return crawlerProvider.getCodeList(storageType, projectId);\n}\n\nexport async function getThumbnail(storageType: StorageType, projectId: string, folder: string, id: string, width: number = 300): Promise<string> {\n    const image = await crawlerProvider.image(storageType, projectId, folder, id);\n    if (!image) {\n        throw new Error('Cannot load image.');\n    }\n    // const sharpImg = width ? sharp(image).resize(width) : sharp(image);\n    // return `data:image/png;base64, ${(await image.toBuffer()).toString('base64')}`;\n    return `data:image/png;base64, ${(image).toString('base64')}`;\n}\n\nexport function removePin(storageType: StorageType, projectId: string, id: string): Promise<PageData[]> {\n    return crawlerProvider.removeFromPins(storageType, projectId, id);\n}\n\nexport function pin(storageType: StorageType, projectId: string, timestamp: string, id: string): Promise<PageData> {\n    return crawlerProvider.copyToPins(storageType, projectId, timestamp, id);\n}\n\nexport async function setZoneStatus(storageType: StorageType, projectId: string, timestamp: string, id: string, index: number, status: string): Promise<PageData[]> {\n    await crawlerProvider.setZoneStatus(storageType, projectId, timestamp, id, index, status);\n    return getPages(storageType, projectId, timestamp);\n}\n\nexport async function setZonesStatus(storageType: StorageType, projectId: string, timestamp: string, id: string, status: string): Promise<PageData[]> {\n    await crawlerProvider.setZonesStatus(storageType, projectId, timestamp, id, status);\n    return getPages(storageType, projectId, timestamp);\n}\n\nexport function setStatus(storageType: StorageType, projectId: string, timestamp: string, status: string): Promise<Crawler> {\n    return crawlerProvider.setCrawlerStatus(storageType, projectId, timestamp, status);\n}\n\nexport function startCrawler(storageType: StorageType, projectId: string): Promise<string> {\n    const { push }: WsContext = this;\n    return crawlerProvider.startCrawler(storageType, projectId, push);\n}\n\nexport function startCrawlers(/*storageType: StorageType*/): Promise<void> {\n    const { push }: WsContext = this;\n    return crawlerProvider.startCrawlers(push);\n}\n","import React from 'react';\n\nconst infoStyle = {\n    lineHeight: 1.2,\n    borderLeft: '8px solid #EEE',\n    paddingLeft: 15,\n    color: '#666',\n    textAlign: 'justify' as 'justify',\n}\n\nexport const Info: React.FunctionComponent = ({ children }) => (\n    <div style={infoStyle}>\n        { children }\n    </div>\n);\n","import { PageData } from '../server/typing';\nimport Fuse from 'fuse.js';\nimport get from 'lodash/get';\nimport { cardStyle, masonryOptions } from '../pages/pageStyle';\n\nexport const searchStyle = {\n    width: cardStyle.width,\n    marginRight: masonryOptions.gutter,\n}\n\nlet timerSearch: NodeJS.Timer;\nexport const onSearch = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    filters: string[],\n) => (value: string) => {\n    if (pages) {\n        if (!value.length) {\n            filterPages(setPages, pages, filters);\n        } else {\n            clearTimeout(timerSearch);\n            timerSearch = setTimeout(() => {\n                filterPages(setPages, searchPages(pages, value), filters);\n            }, 500);\n        }\n    }\n};\n\nconst searchPages = (\n    pages: PageData[],\n    value: string,\n) => {\n    const fuse = new Fuse(pages, {\n        keys: [\n            'url',\n            'viewport.width',\n            'viewport.height',\n            'keywords',\n        ],\n    });\n    return fuse.search(value);\n}\n\n// instead to have 2 fields, we could use one combine with to instance of fuse.js\n// 1 with partial match and 1 with full word match for filters\n// for the input field see \"Search and Select Users\" from select component\nexport const onFilter = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    setFilters: React.Dispatch<React.SetStateAction<any>>,\n) => (filters: string[]) => {\n    if (pages) {\n        setFilters(filters);\n        filterPages(setPages, pages, filters);\n    }\n};\n\nconst filterPages = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    filters: string[]\n) => {\n    if (pages) {\n        if (!filters.length) {\n            setPages(pages);\n        } else {\n            const searchValue = filters.filter(filter => !Object.keys(availableFilters).includes(filter)).join(' ');\n            if (searchValue) {\n                pages = searchPages(pages, searchValue);\n            }\n            setPages(pages.filter(page => {\n                let res = true\n                if (filters.includes('with-diff')) {\n                    const pixelDiffRatio = get(page, 'png.diff.pixelDiffRatio');\n                    res = res && pixelDiffRatio > 0;\n                }\n                if (filters.includes('new')) {\n                    res = res && !!page.png && !page.png.diff\n                }\n                return res;\n            }));\n        }\n    }\n}\n\nexport const availableFilters = {\n    'with-diff': 'with diff',\n    'new': 'new',\n}\n","let masonry: any;\nlet timer: NodeJS.Timer;\n\nexport const setMasonry = (m: any) => masonry = m;\n\nexport const onMasonryImg = () => {\n    if (masonry) masonry.layout();\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n        if (masonry) masonry.layout();\n    }, 500);\n}\n","import { Viewport as ViewportObject } from './server/typing';\n\nexport interface ViewportString {\n    name: string;\n    value: string;\n}\n\nexport interface Viewport {\n    name: string;\n    value: ViewportObject;\n}\n\nexport const viewports: Viewport[] = [\n    { name: 'Desktop - 800x600', value: { width: 800, height: 600 } },\n    { name: 'Desktop - 1024x768', value: { width: 1024, height: 768 } },\n    { name: 'Desktop - 1920x1080', value: { width: 1920, height: 1080 } },\n    { name: 'iPhone 5 - 320x568', value: { width: 320, height: 568, isMobile: true, hasTouch: true } },\n    { name: 'iPhone 6 - 375x667', value: { width: 375, height: 667, isMobile: true, hasTouch: true } },\n    { name: 'Ipad - 768x1024', value: { width: 768, height: 1024, isMobile: true, hasTouch: true } },\n    { name: 'Galaxy S5 - 360x640', value: { width: 360, height: 640, isMobile: true, hasTouch: true } },\n];\n\nexport const viewportsStr: ViewportString[] = viewports.map(\n    ({ value, ...viewport }) => ({ ...viewport, value: JSON.stringify(value) })\n);\n\nexport const getDefaultViewportStr = () => viewportsStr[0];\nexport const getDefaultViewport = (): ViewportObject => viewports[0].value;\n\nexport const getViewportName = (value: ViewportObject) => {\n    const valueStr = JSON.stringify(value);\n    const index = viewportsStr.findIndex(vp => vp.value === valueStr);\n    if (index !== -1) {\n        return viewportsStr[index].name;\n    }\n    const { width, height, isMobile } = value;\n    return `${width}x${height}${ isMobile && ' mobile'}`;\n};\n","import React from 'react';\n\nimport Select from 'antd/lib/select';\nimport { viewportsStr, getDefaultViewportStr } from '../../viewport';\n\nconst { Option } = Select;\n\nexport const Viewport = ({ getFieldDecorator, initialValue }: any) => getFieldDecorator(\n    'viewport',\n    {\n        initialValue: initialValue || getDefaultViewportStr().name,\n    }\n)(\n    <Select>\n        {viewportsStr.map(\n            ({ value, name }) => <Option key={value} value={value}>{name}</Option>\n        )}\n    </Select>\n);\n","import React from 'react';\nimport Input from 'antd/lib/input';\nimport InputNumber from 'antd/lib/input-number';\nimport Checkbox from 'antd/lib/checkbox';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport Icon from 'antd/lib/icon';\nimport Popover from 'antd/lib/popover';\nimport Radio from 'antd/lib/radio';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport Button from 'antd/lib/button';\nimport { RouteComponentProps } from 'react-router';\nimport { CrawlerInput } from '../../server/typing';\n\nimport { getHomeRoute } from '../../routes';\nimport { saveProject } from '../../server/service';\nimport { Info } from '../../common/Info';\nimport { Viewport } from './Viewport';\nimport { getDefaultViewport } from '../../viewport';\nimport { History } from 'history';\n\nconst inlineStyle = {\n    marginRight: 10,\n    display: 'inline-block',\n}\n\nconst radioGroupdStyle = {\n    marginRight: 30,\n}\n\nconst save = async (\n    history: History<any>,\n    { name, viewport, ...input }: (CrawlerInput & { name: string, viewport: string }),\n) => {\n    try {\n        await saveProject('ToDo' as any, { ...input, viewport: JSON.parse(viewport) }, name, undefined);\n        history.push(getHomeRoute());\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst handleSubmit = (history: History<any>, validateFields: any) => (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    validateFields((err: any, values: any) => {\n        if (!err) {\n            save(history, values);\n        }\n    });\n}\n\ntype Props = FormComponentProps & RouteComponentProps;\nconst NewProject = ({ history, form: { getFieldDecorator, validateFields, getFieldValue } }: Props) => {\n    return (\n        <Form onSubmit={handleSubmit(history, validateFields)}>\n            <Form.Item>\n                {getFieldDecorator('name', {\n                    rules: [{ required: true, message: 'Please give a name to the project.' }],\n                })(\n                    <Input addonBefore=\"Name\" placeholder=\"Project name\" />\n                )}\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator('url', {\n                    rules: [{ required: true, message: 'Please input an URL to crawl.' }],\n                })(\n                    <Input\n                        placeholder=\"https://domain.com/\"\n                        addonBefore=\"URL\"\n                        addonAfter={\n                            <Viewport\n                                getFieldDecorator={getFieldDecorator}\n                                initialValue={JSON.stringify(getDefaultViewport())}\n                            />\n                        }\n                    />\n                )}\n            </Form.Item>\n            <Form.Item>\n                <Form.Item style={inlineStyle}>\n                    {getFieldDecorator('method', {\n                        initialValue: 'spiderbot',\n                    })(\n                        <Radio.Group size=\"small\" style={radioGroupdStyle}>\n                            <Radio.Button value={'spiderbot'}><Icon type=\"radar-chart\" /> Spider bot</Radio.Button>\n                            <Radio.Button value={'urls'}><Icon type=\"ordered-list\" /> URLs list</Radio.Button>\n                        </Radio.Group>\n                    )}\n                </Form.Item>\n                {getFieldValue('method') === 'spiderbot' && <Form.Item style={inlineStyle}>\n                    Limit {getFieldDecorator('limit')(\n                        <InputNumber min={0} size=\"small\" />\n                    )}\n                    &nbsp;<Popover content={<div>\n                        <b>Limit the number of sibling pages. </b>\n                        For example, with the urls:\n                        <ul>\n                            <li>/item/1</li>\n                            <li>/item/2</li>\n                            <li>/item/3</li>\n                            <li>/item/4</li>\n                        </ul> using the limit <b>2</b> will only crawl <b>/item/1</b> and <b>/item/2</b>.<br /><br />\n                        Use <b>0</b> to skip the limit.</div>} trigger=\"click\" overlayStyle={{ width: 200 }}>\n                        <Icon type=\"question-circle\" />\n                    </Popover>\n                </Form.Item>}\n                <Info>\n                    <Typography.Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>Spider bot</b> crawling method will get all the links inside the page of the given URL\n                        and crawl the children. It will then continue do the same with the children till no new\n                        link is found. Be careful if you have big website, this is most likely not the right\n                        solution for you.\n                    </Typography.Paragraph>\n                    <Typography.Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>URLs list</b> crawling method will crawl a specific sets of URLs. In the URL input field\n                        you must provide an endpoint containing a list of URLs (a simple text format, with one URL\n                        per line). The crawler will crawl each of those URL only and will not try to find links in\n                        the page.\n                    </Typography.Paragraph>\n                </Info>\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator('autopin', {\n                    valuePropName: 'checked',\n                })(\n                    <Checkbox>Automatically pin new page founds.</Checkbox>\n                )}\n            </Form.Item>\n            <Form.Item>\n                <Form.Item style={inlineStyle}>\n                    <Button\n                        type=\"primary\"\n                        icon=\"plus\"\n                        htmlType=\"submit\"\n                    >\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form.Item>\n        </Form>\n    );\n}\n\nconst NewForm = Form.create({ name: 'start_crawler' })(NewProject);\nexport default NewForm;\n","import React from 'react';\n\nconst load = <T>(\n    fn: () => Promise<any>,\n    setResult: React.Dispatch<React.SetStateAction<T>>,\n    setError: React.Dispatch<React.SetStateAction<any | undefined>>,\n    setLoading: React.Dispatch<React.SetStateAction<boolean>>,\n) => async () => {\n    try {\n        setError(undefined);\n        setLoading(true);\n        const result = await fn();\n        setResult(result);\n    } catch (error) {\n        setError(error);\n    }\n    setLoading(false);\n}\nexport const useAsync = <T>(\n    fn: () => Promise<any>,\n    deps: React.DependencyList = [],\n    initialValue?: any,\n) => {\n    const [result, setResult] = React.useState<T>(initialValue);\n    const [error, setError] = React.useState();\n    const [loading, setLoading] = React.useState(false);\n    const call = load<T>(fn, setResult, setError, setLoading);\n    React.useEffect(() => { call(); }, deps);\n    return { loading, result, call, error, setResult }\n}","import notification from 'antd/lib/notification';\nimport { Project } from '../server/typing';\nimport { loadProjects } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\nexport const useProjects = (storageType: StorageType) => {\n    const { result: projects, error, loading } =\n        useAsync<Project[]>(() => loadProjects(storageType));\n    if (error) {\n        notification['warning']({\n            message: `Something went wrong while loading project from ${storageType}.`,\n            description: error.toString(),\n        });\n    }\n    return { projects, loading, error };\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport { Info } from '../common/Info';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Button from 'antd/lib/button';\nimport Cookies from 'universal-cookie';\n\nconst handleSubmit = (validateFields: any) => (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    validateFields((err: any, values: any) => {\n        if (!err) {\n            // save\n            console.log('should save form', values);\n            const cookies = new Cookies();\n            cookies.set('github', values, { path: '/' });\n        }\n    });\n}\n\nconst GitHubAuthForm = ({ form: { getFieldDecorator, validateFields }}: FormComponentProps) => {\n    return (\n        <>\n            <Typography.Title level={4}>GitHub</Typography.Title>\n            <Info>\n                <Typography.Paragraph>\n                    In order to use <a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub API</a>, you need to provide some information.\n                    To be able to push data to your repository, we need a <a href=\"https://developer.github.com/v3/auth/#via-oauth-and-personal-access-tokens\" target=\"_blank\" rel=\"noopener noreferrer\">personal access tokens</a>.\n                    Note, the personal access tokens is a sensible information. Use this app, only on a trustable device (soon APP authentication will be available to improve security).\n                </Typography.Paragraph>\n            </Info>\n            <Form onSubmit={handleSubmit(validateFields)}>\n                <Form.Item>\n                    {getFieldDecorator('user', {\n                        rules: [{ required: true, message: 'Please provide your GitHub username.' }],\n                    })(\n                        <Input addonBefore=\"Username\" placeholder=\"Github username\" />\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('token', {\n                        rules: [{ required: true, message: 'Please provide your personal access tokens.' }],\n                    })(\n                        <Input.Password addonBefore=\"Token\" placeholder=\"Personal access tokens\" />\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('repo', {\n                        rules: [{ required: true, message: 'Please provide the repository.' }],\n                    })(\n                        <Input addonBefore=\"Repository\" placeholder=\"Repository name\" />\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Button\n                        type=\"primary\"\n                        icon=\"github\"\n                        htmlType=\"submit\"\n                    >\n                        OK\n                    </Button>\n            </Form.Item>\n            </Form>\n        </>\n    );\n}\n\nexport const GitHubAuth = Form.create({ name: 'github_auth' })(GitHubAuthForm);\n","import React from 'react';\nimport List from 'antd/lib/list';\nimport Icon from 'antd/lib/icon';\nimport { Link } from 'react-router-dom';\nimport Typography from 'antd/lib/typography';\nimport { StorageType } from '../server/storage.typing';\nimport { getProjectRoute } from '../routes';\nimport { useProjects } from './useProjects';\nimport Spin from 'antd/lib/spin';\nimport { useError } from '../hook/useError';\n\ninterface Props {\n    title: string;\n    storageType: StorageType;\n}\n\nexport const ProjectsPerRemote = ({ title, storageType }: Props) => {\n    const { projects, loading, error } = useProjects(storageType);\n    const ErrorComponent = useError(error);\n    console.log('ErrorComponent', ErrorComponent);\n    if (ErrorComponent) {\n        return <ErrorComponent />;\n    }\n    return (\n        <>\n            <Typography.Title level={4}>{title}</Typography.Title>\n            {loading ? <Spin /> : <List\n                itemLayout=\"horizontal\"\n                bordered\n                dataSource={projects}\n                renderItem={({ id, name, crawlerInput: { url } }) => (\n                    <List.Item\n                        actions={[\n                            <Link to={getProjectRoute(storageType, id)}>\n                                Open\n                                    </Link>,\n                        ]}\n                    >\n                        <List.Item.Meta\n                            title={<Link to={getProjectRoute(storageType, id)}>\n                                {name} <Icon type={storageType} />\n                            </Link>}\n                            description={url}\n                        />\n                    </List.Item>\n                )}\n            />}\n        </>\n    );\n}\n","import { useHistory } from 'react-router-dom';\nimport { ERR } from '../server/error';\nimport { getAuthGitHubRoute } from '../routes';\nimport { GitHubAuth } from '../auth/GitHubAuth';\n\nexport const useError = (error: any) => {\n    if (error === ERR.missingGitHubConfig || error?.message === ERR.missingGitHubConfig) {\n        return GitHubAuth;\n    }\n}\n\n// not used yet\nexport const useErrorRedirect = (error: any) => {\n    const history = useHistory();\n    if (error === ERR.missingGitHubConfig || error?.message === ERR.missingGitHubConfig) {\n        history.push(getAuthGitHubRoute());\n    }\n}\n","import React from 'react';\nimport Button from 'antd/lib/button';\nimport { Link } from 'react-router-dom';\nimport Typography from 'antd/lib/typography';\nimport { StorageType } from '../server/storage.typing';\nimport { getNewProjectRoute } from '../routes';\nimport { ProjectsPerRemote } from './ProjectsPerRemote';\n\nexport const Projects = () => {\n    return (\n        <>\n            <Typography.Title level={3}>Projects</Typography.Title>\n            {Object.keys(StorageType).map((key) => (\n                <div key={key}>\n                    <ProjectsPerRemote\n                        title={key}\n                        storageType={StorageType[key as keyof typeof StorageType]}\n                    />\n                    <br />\n                </div>\n            ))}\n            <Link to={getNewProjectRoute()}>\n                <Button icon=\"plus\" size=\"small\">New</Button>\n            </Link>\n        </>\n    );\n}\n","export const coverStyle = {\n    textAlign: 'center',\n    // borderBottom: '1px solid #888',\n}\n\nexport const imgStyle = {\n    width: 300,\n}\n\nexport const cardImgMargin = 10;\n\nexport const cardStyle = {\n    width: imgStyle.width + cardImgMargin*2,\n    marginBottom: 10,\n};\n\nexport const masonryStyle = {\n    paddingTop: 10,\n    paddingBottom: 10,\n}\n\nexport const masonryOptions = {\n    gutter: 10,\n    // percentPosition: true,\n    fitWidth: true,\n}\n\nexport const iconTheme = 'outlined'; // 'twoTone'\n","import React from 'react';\nimport Alert from 'antd/lib/alert';\n\ninterface Props {\n    message?: string;\n    description: string;\n}\nexport const ErrorHandler = ({ message = 'Something went wrong', description }: Props) => (\n    <Alert\n        message={message}\n        description={description}\n        type=\"warning\"\n        showIcon\n    />\n);","import React from 'react';\nimport { PageData } from '../server/typing';\n\nimport { onSearch, searchStyle, onFilter } from './search';\nimport Select from 'antd/lib/select';\n\nconst { Option } = Select;\n\nexport interface Filters {\n    [key: string]: string;\n}\n\ninterface Props {\n    withFilters?: Filters;\n    response: PageData[],\n    children: (pages: PageData[] | undefined) => React.ReactNode,\n}\nexport const Search = ({ children, response, withFilters }: Props) => {\n    const [pages, setPages] = React.useState<PageData[]>();\n    const [selectedFilters, setSelectedFilters] = React.useState<string[]>([]);\n    const [pagesFiltered, setPagesFiltered] = React.useState<PageData[]>();\n    React.useEffect(() => {\n        setPages(response);\n        onFilter(setPagesFiltered, response, setSelectedFilters)(selectedFilters);\n    }, [response, setSelectedFilters, selectedFilters]);\n\n    return (\n        <>\n            <Select\n                mode=\"tags\"\n                onChange={onFilter(setPagesFiltered, pages, setSelectedFilters)}\n                tokenSeparators={[',']}\n                style={searchStyle}\n                placeholder=\"Search\"\n                filterOption={false}\n                onSearch={onSearch(setPagesFiltered, pages, selectedFilters)}\n            >\n                { !!withFilters && Object.keys(withFilters).map(key => <Option key={key}>{withFilters[key]}</Option>) }\n            </Select>\n            {children(pagesFiltered)}\n        </>\n    );\n}\n","import { unix } from 'moment';\n\nexport const timestampToString =\n    (timestamp: string) => unix(parseInt(timestamp, 10)).calendar()\n\nexport const sigDig = (n: number, precision = 1) => {\n    if (!n) {\n        return n;\n    }\n    const fix = (precision - 1) - Math.floor(Math.log(n) / Math.log(10));\n    return n.toFixed(fix);\n}","import React from 'react';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport Button from 'antd/lib/button';\n\nimport { setZoneStatus } from '../server/service';\nimport { PageData } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nconst buttonStyle = {\n    marginLeft: 5,\n    marginRight: 5,\n}\n\ninterface Props {\n    index: number;\n    timestamp: string;\n    id: string;\n    projectId: string;\n    storageType: StorageType;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nconst onSetStatus = (\n    status: string,\n    { timestamp, id, index, projectId, setPages, storageType }: Props,\n) => async () => {\n    try {\n        const pages = await setZoneStatus(storageType, projectId, timestamp, id, index, status);\n        setPages(pages);\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nexport const DiffImageButtons = (props: Props) => {\n    return (\n        <>\n            <Button\n                style={buttonStyle}\n                icon=\"check\"\n                size=\"small\"\n                onClick={onSetStatus('valid', props)}>Valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"pushpin\"\n                size=\"small\"\n                onClick={onSetStatus('pin', props)}>Always valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"warning\"\n                size=\"small\"\n                type=\"danger\"\n                onClick={onSetStatus('report', props)}>Report</Button>\n        </>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport Popover from 'antd/lib/popover';\n\nimport { DiffImageButtons } from './DiffImageButtons';\nimport { getThumbnail } from '../server/service';\nimport { Zone, PageData } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nexport const getColorByStatus = (status: string) => {\n    if (status === 'valid' || status === 'pin') {\n        return '#0F0'; //'green';\n    } else if (status === 'report') {\n        return 'red';\n    }\n    return 'yellow';\n}\n\nconst zoneStyle = (\n    { xMin, yMin, xMax, yMax }: any,\n    ratio: number,\n    width: number,\n    marginLeft: number,\n    img: string | undefined,\n    over: boolean,\n    status: string,\n) => {\n    const top = yMin / ratio - 1;\n    const left = xMin / ratio - 1;\n    return ({\n        width: (xMax - xMin) / ratio + 2,\n        height: (yMax - yMin) / ratio + 2,\n        // width: 200,\n        // height: 100,\n        top,\n        left: left + marginLeft,\n        border: `1px solid ${getColorByStatus(status)}`,\n        position: 'absolute',\n        backgroundImage: over ? `url(\"${img}\")` : 'none',\n        backgroundPosition: `${-(left + 1)}px ${-(top + 1)}px`,\n        backgroundSize: width,\n    });\n}\n\ninterface Props {\n    storageType: StorageType;\n    folder: string;\n    id: string;\n    zone: Zone;\n    originalWidth: number;\n    index: number;\n    status: string;\n    width: number;\n    marginLeft: number;\n    projectId: string;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n};\n\nexport const DiffZone = ({ storageType, setPages, projectId, folder, id, index, originalWidth, zone, status, width, marginLeft }: Props) => {\n    const [thumb, setThumb] = useState<string>();\n    const load = async () => {\n        setThumb(await getThumbnail(storageType, projectId, 'base', id, width));\n    }\n    useEffect(() => { load(); }, []);\n    const [hover, setHover] = useState(false);\n    const ratio = originalWidth / width;\n    return (\n        <Popover key={`${id}-${index}`} content={(\n            <DiffImageButtons\n                storageType={storageType}\n                index={index}\n                timestamp={folder}\n                id={id}\n                projectId={projectId}\n                setPages={setPages}\n            />\n        )} trigger=\"click\">\n            <div\n                style={zoneStyle(zone, ratio, width, marginLeft, thumb, hover, status) as any}\n                onMouseOver={() => setHover(true)}\n                onMouseOut={() => setHover(false)}\n            />\n        </Popover>\n    );\n}\n","import React from 'react';\nimport { PngDiffDataZone } from '../server/typing';\n\nimport { getColorByStatus } from '../diff/DiffZone';\n\nconst getCountZonesPerStatus = (zones: any, perStatus: string[]) =>\n    zones.filter(({ status }: any) => perStatus.includes(status)).length\n\nexport const PageImageDiffZone = ({ zones }: {\n    zones: PngDiffDataZone[]\n}) => (\n    <p>\n        <b>Zone:</b>&nbsp;\n            {[['diff'], ['valid', 'pin'], ['report']].map(([status, ...more]) => (\n            <React.Fragment key={status}>\n                <span style={{\n                    marginLeft: 10,\n                    color: getColorByStatus(status)\n                }}>■</span> <b>{getCountZonesPerStatus(zones, [status, ...more])}</b> {status}\n            </React.Fragment>\n        ))}\n    </p>\n);","import React from 'react';\nimport Icon from 'antd/lib/icon';\n\nimport { iconTheme } from './pageStyle';\nimport { PngDiffData } from '../server/typing';\nimport { sigDig } from '../utils';\nimport { PageImageDiffZone } from './PageImageDiffZone';\n\nexport const PageImageDiff = ({ diff }: {\n    diff: PngDiffData;\n}) => (\n    <>\n        <p>\n            <Icon type=\"picture\" theme={iconTheme} />&nbsp;\n                    Pixel diff ratio: {sigDig(diff.pixelDiffRatio)}\n        </p>\n        {diff.zones && diff.zones.length > 0 &&\n            <PageImageDiffZone zones={diff.zones} />\n        }\n    </>\n);","import React from 'react';\nimport Tag from 'antd/lib/tag';\nimport Icon from 'antd/lib/icon';\n\nimport { iconTheme } from './pageStyle';\nimport { PngDiffData } from '../server/typing';\nimport { PageImageDiff } from './PageImageDiff';\n\nexport const PageImage = ({ diff }: {\n    diff?: PngDiffData;\n}) => (!diff)\n        ? (\n            <div>\n                <Icon type=\"picture\" theme={iconTheme} />&nbsp;\n                New screenshot <Tag color=\"green\">New</Tag>\n            </div>\n        ) : (\n            <PageImageDiff diff={diff} />\n        );","import React from 'react';\nimport Alert from 'antd/lib/alert';\nimport Icon from 'antd/lib/icon';\nimport { PngDiffData } from '../server/typing';\n// import * as Convert from 'ansi-to-html';\n\nimport { iconTheme } from './pageStyle';\nimport { PageImage } from './PageImage';\n\nconst Convert = require('ansi-to-html');\nconst convert = new Convert({\n    fg: '#333',\n});\n\nconst alertStyle = {\n    marginBottom: 10,\n}\n\ninterface Props {\n    pageError: any;\n    url: string;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n}\n\nexport const Page = ({ pageError, url, png }: Props) => {\n    return (\n        <>\n            {pageError && <Alert message={\n                <div dangerouslySetInnerHTML={{ __html: convert.toHtml(pageError) }} />\n            } type=\"warning\" style={alertStyle} />}\n            <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n            {png\n                ? <PageImage diff={png.diff} />\n                : <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { setZonesStatus } from '../server/service';\nimport { PageData } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nconst onClick = (\n    { timestamp, id, status, projectId, setPages, storageType }: Props,\n) => async () => {\n    try {\n        const pages = await setZonesStatus(storageType, projectId, timestamp.toString(), id, status);\n        setPages(pages);\n        message.success(`All zone are set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    storageType: StorageType;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    status: string;\n    type: string;\n}\nexport const PagesActionZone = (props: Props) => {\n    const { status, type } = props;\n    return (\n        <Icon type={type} title={`Set all zone to \"${status}\".`} onClick={onClick(props)} />\n    );\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { pin } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\n\nconst onPin = ({ storageType, projectId, timestamp, id }: Props) => async () => {\n    try {\n        const hide = message.loading('Pin in progress..', 0);\n        await pin(storageType, projectId, timestamp.toString(), id);\n        hide();\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    timestamp: string,\n    id: string,\n    projectId: string,\n    storageType: StorageType,\n}\n\nconst PagesActionPin = (props: Props) =>\n    <Icon\n        type=\"pushpin\"\n        title=\"pin as reference for comparison\"\n        onClick={onPin(props)}\n    />;\n\nexport default function(props: Props) {\n    return PagesActionPin(props);\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n    coverStyle,\n    imgStyle,\n} from '../pages/pageStyle';\n\nimport { getThumbnail } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\nexport interface Props {\n    storageType: StorageType;\n    projectId: string;\n    folder: string;\n    id: string;\n    width?: number;\n    onImg?: () => void;\n    marginLeft: number;\n};\n\nexport const DiffImage = ({\n    storageType,\n    projectId,\n    folder,\n    id,\n    onImg = () => { },\n    width = imgStyle.width,\n    children\n}: Props & React.PropsWithChildren<any>) => {\n    const [thumb, setThumb] = useState<string>();\n    const load = async () => {\n        setThumb(await getThumbnail(storageType, projectId, folder, id, width));\n        onImg();\n    }\n    useEffect(() => { load(); }, []);\n    return thumb ? (\n        <div style={coverStyle as any}>\n            {children}\n            <img style={{ width }} alt=\"\" src={thumb} />\n        </div>) : null;\n}\n","import React from 'react';\n\nimport {\n    imgStyle,\n} from '../pages/pageStyle';\n\nimport { DiffZone } from './DiffZone';\nimport { PngDiffDataZone, PageData } from '../server/typing';\nimport { Props as DiffImageProps, DiffImage } from './DiffImage';\n\ninterface Props {\n    zones?: PngDiffDataZone[];\n    originalWidth?: number;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n};\n\nexport const DiffImageWithZone = ({\n    storageType,\n    projectId,\n    folder,\n    id,\n    zones,\n    originalWidth = 0,\n    width = imgStyle.width,\n    setPages,\n    marginLeft,\n    ...props\n}: Props & DiffImageProps) =>\n    <DiffImage storageType={storageType} projectId={projectId} folder={folder} id={id} width={width} {...props}>\n        {zones && zones.map(({ zone, status }: PngDiffDataZone, index: number) =>\n            <DiffZone\n                storageType={storageType}\n                projectId={projectId}\n                folder={folder}\n                id={id}\n                width={width}\n                index={index}\n                originalWidth={originalWidth}\n                marginLeft={marginLeft}\n                status={status}\n                zone={zone}\n                key={`zone-${id}-${index}`}\n                setPages={setPages}\n            />)}\n    </DiffImage>","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport Modal from 'antd/lib/modal';\nimport { PngDiffData, PageData } from '../server/typing';\nimport { Page } from './Page';\nimport { DiffImageWithZone } from '../diff/DiffImageWithZone';\nimport { StorageType } from '../server/storage.typing';\n\nconst onClick = (setVisible: React.Dispatch<React.SetStateAction<boolean>>) => () => {\n    setVisible(true);\n}\n\nconst onCancel = (setVisible: React.Dispatch<React.SetStateAction<boolean>>) => () => {\n    setVisible(false);\n}\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    url: string;\n    pageError: any;\n    png: {\n        width: number;\n        diff?: PngDiffData;\n    };\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nexport const PagesActionFullscreen = ({ storageType, setPages, projectId, timestamp, id, png, url, pageError }: Props) => {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    return (\n        <>\n            <Modal\n                title=\"\"\n                visible={visible}\n                onCancel={onCancel(setVisible)}\n                footer={null}\n                width={png.width + 40}\n            >\n                <div style={{ position: \"relative\" }}>\n                    <DiffImageWithZone\n                        storageType={storageType}\n                        setPages={setPages}\n                        projectId={projectId}\n                        folder={timestamp}\n                        id={id}\n                        zones={png.diff && png.diff.zones}\n                        originalWidth={png.width}\n                        width={png.width}\n                        marginLeft={0}\n                    />\n                    <Page url={url} pageError={pageError} png={png} />\n                </div>\n            </Modal>\n            <Icon type=\"fullscreen\" title=\"fullscreen\" onClick={onClick(setVisible)} />\n        </>\n    );\n}\n","import React from 'react';\nimport { PngDiffData, PageData } from '../server/typing';\n\nimport { PagesActionZone } from './PagesActionZone';\nimport PagesActionPin from './PagesActionPin';\nimport { PagesActionFullscreen } from './PagesActionFullscreen';\nimport { StorageType } from '../server/storage.typing';\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    url: string;\n    pageError: any;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nexport const PagesActions = ({ storageType, setPages, projectId, timestamp, id, png, url, pageError }: Props) => [\n    ...[png && <PagesActionFullscreen storageType={storageType} setPages={setPages} projectId={projectId} png={png} id={id} timestamp={timestamp} url={url} pageError={pageError} />],\n    <PagesActionZone storageType={storageType} type=\"check\" setPages={setPages} projectId={projectId}  timestamp={timestamp} id={id} status={'valid'} />,\n    <PagesActionZone storageType={storageType} type=\"warning\" setPages={setPages} projectId={projectId} timestamp={timestamp} id={id} status={'report'} />,\n    <PagesActionPin storageType={storageType} projectId={projectId} timestamp={timestamp} id={id} />,\n    // <Icon type=\"ellipsis\" title=\"more\" />,\n];\n","import React from 'react';\nimport Card from 'antd/lib/card';\nimport Spin from 'antd/lib/spin';\nimport Masonry from 'react-masonry-component';\n\nimport {\n    masonryStyle,\n    masonryOptions,\n    cardStyle,\n    cardImgMargin,\n} from './pageStyle';\nimport { PageData } from '../server/typing';\nimport { getPages } from '../server/service';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { Search } from '../search/Search';\nimport { Page } from './Page';\nimport { PagesActions } from './PagesActions';\nimport { availableFilters } from '../search/search';\nimport { setMasonry, onMasonryImg } from '../common/refreshMasonry';\nimport { DiffImageWithZone } from '../diff/DiffImageWithZone';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    lastUpdate: number;\n}\n\nexport const Pages = ({ projectId, timestamp, lastUpdate, storageType }: Props) => {\n    const { result: pages, error, setResult: setPages } = useAsync<PageData[]>(\n        () => getPages(storageType, projectId, timestamp),\n        [lastUpdate],\n    );\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n\n    return (\n        <Search response={pages} withFilters={availableFilters}>\n            {(pagesFiltered) => pagesFiltered ? (\n                <Masonry\n                    style={masonryStyle}\n                    options={masonryOptions}\n                    ref={(c: any) => { setMasonry(c && c.masonry); }}\n                >\n                    {\n                        pagesFiltered.map(({ id, url, png, error: pageError }: PageData) => (\n                            <Card\n                                key={id}\n                                style={cardStyle}\n                                cover={png && <DiffImageWithZone\n                                    storageType={storageType}\n                                    projectId={projectId}\n                                    folder={timestamp}\n                                    id={id}\n                                    zones={png.diff && png.diff.zones}\n                                    originalWidth={png.width}\n                                    onImg={onMasonryImg}\n                                    setPages={setPages}\n                                    marginLeft={cardImgMargin}\n                                />}\n                                actions={PagesActions({ storageType, setPages, projectId, id, timestamp, png, url, pageError })}\n                            >\n                                <Page url={url} pageError={pageError} png={png} />\n                            </Card>\n                        ))\n                    }\n                </Masonry >\n            ) : <Spin />\n            }\n        </Search>);\n}\n","import React from 'react';\nimport Switch from 'antd/lib/switch';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { setStatus } from '../server/service';\nimport { Crawler } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nconst onChange = (\n    storageType: StorageType,\n    projectId: string,\n    timestamp: string,\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>,\n) => async (value: boolean) => {\n    try {\n        const status = value ? 'done' : 'review';\n        const crawler = await setStatus(storageType, projectId, timestamp, status);\n        setCrawler(crawler);\n        message.success(`Status set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    status: string;\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>;\n}\nexport const SwitchStatus = ({ storageType, timestamp, status, projectId, setCrawler }: Props) => {\n    return <Switch\n        checkedChildren=\"done\"\n        unCheckedChildren=\"review\"\n        checked={status === 'done'}\n        onChange={onChange(storageType, projectId, timestamp, setCrawler)}\n    />;\n}","import notification from 'antd/lib/notification';\nimport { Project } from '../server/typing';\nimport { loadProject } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\nexport const useProject = (storageType: StorageType, projectId: string) => {\n    const { result: project, setResult: setProject, error } =\n        useAsync<Project>(() => loadProject(storageType, projectId));\n    if (error) {\n        notification['warning']({\n            message: 'Something went wrong while loading project.',\n            description: error.toString(),\n        });\n    }\n    return { project, setProject };\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { getProjectRoute } from '../routes';\nimport { useProject } from './useProject';\nimport { StorageType } from '../server/storage.typing';\n\ninterface Props {\n    projectId: string;\n    storageType: StorageType;\n}\n\nexport const ProjectName = ({\n    projectId,\n    storageType,\n}: Props) => {\n    const { project } = useProject(storageType, projectId);\n    return !project ? null : (\n        <p>\n            <b>Project:</b> <Link to={getProjectRoute(storageType, project.id)}>\n                {project.name}\n            </Link>\n        </p>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport Progress from 'antd/lib/progress';\nimport Icon from 'antd/lib/icon';\nimport { Crawler } from '../server/typing';\nimport { duration } from 'moment';\nimport 'moment-duration-format';\n\nimport { timestampToString } from '../utils';\nimport { SwitchStatus } from './SwitchStatus';\nimport { getViewportName } from '../viewport';\nimport { ProjectName } from '../projects/ProjectName';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Title } = Typography;\n\nconst warningStyle = {\n    color: '#faad29',\n};\n\nconst limitStyle = {\n    color: '#999',\n    fontSize: 11,\n};\n\ninterface Props {\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>;\n    crawler: Crawler;\n    projectId: string;\n    storageType: StorageType;\n}\n\n// need to flatten props and use react memo\nexport const CrawlerInfo = ({\n    crawler: {\n        timestamp,\n        url,\n        diffZoneCount,\n        errorCount,\n        status,\n        urlsCount,\n        inQueue,\n        startAt,\n        lastUpdate,\n        limit,\n        viewport,\n    },\n    projectId,\n    storageType,\n    setCrawler,\n}: Props) => {\n    const total = urlsCount + inQueue;\n    const percent = Math.floor(urlsCount / total * 100);\n    const screen = getViewportName(viewport);\n    return (\n        <>\n            <Title level={3}>{timestampToString(timestamp)}</Title>\n            {(diffZoneCount > 0 || errorCount > 0)\n                && <p><SwitchStatus storageType={storageType} setCrawler={setCrawler} projectId={projectId} status={status} timestamp={timestamp} /></p>}\n            <ProjectName projectId={projectId} storageType={storageType} />\n            <p><b>URL:</b> {url}</p>\n            <p><b>Screen:</b> {screen}</p>\n            <p>\n                <b>URL crawled:</b> {urlsCount}\n                {limit !== undefined && limit > 0 &&\n                    <span style={limitStyle}> (with limit set to {limit})</span>\n                }\n            </p>\n            <p><b>Duration:</b> {duration(lastUpdate - startAt).format('h [hrs], m [min], s [sec]')}</p>\n            {inQueue > 0 && <>\n                <Progress percent={percent} />\n                <p><b>In queue:</b> {inQueue}</p>\n            </>}\n            {errorCount > 0 &&\n                <p style={warningStyle}>\n                    <Icon type=\"exclamation-circle\" /> {errorCount} error(s) founds\n                </p>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { subscrib, unsubscrib } from 'isomor';\n\nimport { Pages } from '../pages/Pages';\nimport { CrawlerInfo } from './CrawlerInfo';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { useAsync } from '../hook/useAsync';\nimport { Crawler } from '../server/typing';\nimport { getCrawler } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\nexport const CrawlerResults = ({\n    match: { params: { timestamp, projectId, storageType } },\n}: RouteComponentProps<{ timestamp: string, projectId: string, storageType: StorageType }>) => {\n    const { result: crawler, error, setResult: setCrawler } = useAsync<Crawler>(\n        () => getCrawler(storageType, projectId, timestamp)\n    );\n    React.useEffect(() => {\n        const id = subscrib(setCrawler);\n        return () => unsubscrib(id);\n    }, [crawler, setCrawler]);\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    const lastUpdate = crawler?.lastUpdate;\n    return crawler ? (\n        <>\n            <CrawlerInfo\n                crawler={crawler}\n                projectId={projectId}\n                storageType={storageType}\n                setCrawler={setCrawler}\n            />\n            <Pages storageType={storageType} timestamp={timestamp} lastUpdate={lastUpdate!} projectId={projectId} />\n        </>\n    ) : <Spin />;\n}\n","import React from 'react';\nimport Card from 'antd/lib/card';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport Popconfirm from 'antd/lib/popconfirm';\n\nimport {\n    cardStyle,\n    iconTheme,\n} from '../pages/pageStyle';\nimport { DiffImage } from '../diff/DiffImage';\nimport { PngDiffData, Viewport, PageData } from '../server/typing';\nimport { Link } from 'react-router-dom';\nimport { getCodeRoute } from '../routes';\nimport { getViewportName } from '../viewport';\nimport { removePin } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\nconst handleDelete = (\n    storageType: StorageType,\n    projectId: string,\n    id: string,\n    setPins: React.Dispatch<React.SetStateAction<PageData[]>>,\n) => async () => {\n    const hide = message.loading('Delete in progress..', 0);\n    const pins = await removePin(storageType, projectId, id);\n    setPins(pins);\n    hide();\n}\n\ninterface Props {\n    projectId: string;\n    storageType: StorageType,\n    id: string;\n    url: string;\n    setPins: React.Dispatch<React.SetStateAction<PageData[]>>;\n    viewport?: Viewport,\n    onImg: () => void;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n}\n\nexport const PinPage = ({ storageType, projectId, id, url, viewport, onImg, png, setPins }: Props) => (\n    <Card\n        style={cardStyle}\n        cover={png && <DiffImage folder='base' id={id} onImg={onImg} projectId={projectId} />}\n        actions={[\n            <Popconfirm\n                title=\"Are you sure delete this pin?\"\n                onConfirm={handleDelete(storageType, projectId, id, setPins)}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"delete\" title={`Delete pin`} />\n            </Popconfirm>,\n            (<Link to={{\n                pathname: getCodeRoute(storageType, projectId, id),\n                state: { pattern: url }\n            }}>\n                <Icon type=\"code\" title={`Insert code while crawling`} />\n            </Link>),\n        ]}\n    >\n        <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n        {!png && <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>}\n        {viewport && <p><Icon type=\"picture\" theme={iconTheme} /> {getViewportName(viewport)}</p>}\n    </Card>\n);\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Masonry from 'react-masonry-component';\n\nimport {\n    masonryStyle,\n    masonryOptions,\n} from '../pages/pageStyle';\nimport { PageData } from '../server/typing';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { PinPage } from './PinPage';\nimport { Search } from '../search/Search';\nimport { setMasonry, onMasonryImg } from '../common/refreshMasonry';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { ProjectName } from '../projects/ProjectName';\nimport { useAsync } from '../hook/useAsync';\nimport { getPins } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Title } = Typography;\n\nexport const Pins = ({\n    match: { params: { projectId, storageType } },\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    const { result, error, setResult: setPins } = useAsync<PageData[]>(\n        () => getPins(storageType, projectId)\n    );\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n\n    return (\n        <>\n            <Title level={3}>Pins</Title>\n            <ProjectName projectId={projectId} storageType={storageType} />\n            <Search response={result}>\n                {(pins) => pins ? (\n                    <Masonry\n                        style={masonryStyle}\n                        options={masonryOptions}\n                        ref={(c: any) => { setMasonry(c && c.masonry); }}\n                    >\n                        {pins.map(({ id, url, png, viewport }: PageData) => (\n                            <PinPage\n                                projectId={projectId}\n                                id={id}\n                                key={id}\n                                url={url}\n                                setPins={setPins}\n                                png={png}\n                                viewport={viewport}\n                                onImg={onMasonryImg}\n                                storageType={storageType}\n                            />\n                        ))}\n                    </Masonry>\n                ) : <Spin />\n                }\n            </Search>\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\n\nimport { Info } from '../common/Info';\n\nconst { Paragraph, Text } = Typography;\n\nexport const CodeInfo = ({full = true}) => (\n    <Info>\n        <Paragraph>\n            Inject some code in the crawler while parsing the page. This code will\n            be executed just after the page finish loaded, before to make the screenshot and\n            before extracting the links. {full && <>You need to export a function that will take as\n            first parameter the <Text code>page</Text> coming from Puppeteer.</>}\n        </Paragraph>\n        {full && <Paragraph>\n            <Text code>module.exports = async (page) => ...some code</Text>\n        </Paragraph>}\n    </Info>\n);\n","import { cardStyle } from \"../pages/pageStyle\";\n\nexport const aceEditorStyle = {\n    border: '1px solid #EEE',\n    marginBottom: 15,\n    marginRight: 15,\n    float: 'left' as 'left',\n}\n\nexport const cardRightStyle = {\n    ...cardStyle,\n    float: 'left' as 'left',\n}\n\nexport const buttonBarStyle = {\n    marginBottom: 15,\n}\n\nexport const buttonStyle = {\n    marginRight: 10,\n}\n\nexport const inputStyle = {\n    maxWidth: 500,\n    margin: '0px 0px 10px 0px',\n}\n","import React from 'react';\nimport Input from 'antd/lib/input';\nimport notification from 'antd/lib/notification';\nimport Icon from 'antd/lib/icon';\nimport Button from 'antd/lib/button';\nimport message from 'antd/lib/message';\nimport Dropdown from 'antd/lib/dropdown';\nimport Typography from 'antd/lib/typography';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport { Code } from '../server/typing';\n\nimport { setCode } from '../server/service';\nimport { codeSnippet } from './CodeSnippet';\nimport { buttonBarStyle, buttonStyle, inputStyle } from './codeStyle';\nimport { Info } from '../common/Info';\nimport { Location } from 'history';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Paragraph } = Typography;\n\ninterface FormInput extends HTMLFormElement {\n    name: string,\n    pattern: string,\n}\n\nconst onPlay = () => {\n    message.warn('To be implemented.', 2);\n}\n\nconst save = async (\n    storageType: StorageType,\n    projectId: string,\n    id: string,\n    source: string,\n    info: FormInput,\n) => {\n    try {\n        const hide = message.loading('Saving in progress..', 0);\n        await setCode(storageType, projectId, {\n            id,\n            source,\n            ...info,\n        });\n        hide();\n        message.success('Code saved.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst handleSubmit = (\n    storageType: StorageType,\n    projectId: string,\n    id: string,\n    source: string,\n    validateFields: any,\n) => (event: React.FormEvent<FormInput>) => {\n    event.preventDefault();\n    validateFields((err: any, info: FormInput) => {\n        if (!err) {\n            save(storageType, projectId, id, source, info);\n        }\n    });\n}\n\ntype Props = FormComponentProps & {\n    storageType: StorageType;\n    projectId: string;\n    id: string;\n    code: Code;\n    location: Location<{ pattern: string }>;\n    setSource: (source: string) => void;\n};\n\nconst CodeFormComponent = ({\n    storageType,\n    projectId,\n    setSource,\n    id,\n    code,\n    form: { getFieldDecorator, validateFields },\n    location: { state },\n}: Props) => {\n    return (\n        <Form onSubmit={handleSubmit(storageType, projectId, id, code.source, validateFields)}>\n            <Form.Item style={inputStyle}>\n                {getFieldDecorator('name', {\n                    initialValue: code.name || '',\n                })(\n                    <Input addonBefore=\"Name\" />\n                )}\n            </Form.Item>\n            <Form.Item style={inputStyle}>\n                {getFieldDecorator('pattern', {\n                    rules: [{ required: true, message: 'Please input a pattern!' }],\n                    initialValue: code.pattern || (state && state.pattern) || '',\n                })(\n                    <Input addonBefore=\"Pattern\" />\n                )}\n            </Form.Item>\n            <Info>\n                <Paragraph>\n                    Pattern is using <a href=\"https://www.npmjs.com/package/minimatch\" target=\"_blank\" rel=\"noopener noreferrer\">minimatch</a> to\n                    match the urls to inject the code.\n                    It works by converting glob expressions into JavaScript RegExp objects.\n                </Paragraph>\n            </Info>\n            <div style={buttonBarStyle}>\n                <Button icon=\"save\" htmlType=\"submit\" style={buttonStyle}>Save</Button>\n                <Button icon=\"caret-right\" onClick={onPlay} style={buttonStyle}>Preview</Button>\n                <Dropdown overlay={codeSnippet(setSource)}>\n                    <Button style={buttonStyle}>\n                        Code snippet <Icon type=\"down\" />\n                    </Button>\n                </Dropdown>\n            </div>\n        </Form>\n    );\n}\n\nexport const CodeForm = Form.create<Props>({ name: 'code' })(CodeFormComponent);\n","import React from 'react';\nimport Menu from 'antd/lib/menu';\n\nexport const codeSnippet = (setCode: (source: string) => void) => (\n    <Menu>\n        <Menu.Item\n            key=\"1\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    await page.evaluate(() => {\n        const div = document.createElement(\"div\");\n        div.innerHTML = \"Test-crawler is awesome!\";\n        document.body.insertBefore(div, document.body.firstChild);\n    });\n}`\n                );\n            }}\n        >\n            Test-crawler is awesome\n        </Menu.Item>\n        <Menu.Item\n            key=\"2\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    return await page.evaluate(() => {\n        Array.from(document.body.getElementsByTagName(\"a\"))\n             .filter(a => !a.href)\n             .forEach(a => a.click());\n        return Array.from(document.links).map(\n            link => link.href.replace('/?', '/iframe.html?')\n        );\n    });\n}`\n                );\n            }}\n        >\n            Storybook\n        </Menu.Item>\n        <Menu.Item\n            key=\"3\"\n            onClick={() => {\n                setCode(\n`// expect library from jest is installed by default\n// but you can use any assertion tool of your choice\n// just install it and use it here :D\nconst expect = require('expect');\n\nmodule.exports = async function run(page) {\n  await expect(page.title()).resolves.toMatch('React App');\n  expect('a').toBe('b'); // fail\n}`\n                );\n            }}\n        >\n            Expect assetion example\n        </Menu.Item>\n    </Menu>\n);","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Form from 'antd/lib/form';\nimport AceEditor from 'react-ace';\nimport { RouteComponentProps } from 'react-router';\nimport { Code as CodeType } from '../server/typing';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\n\nimport { getCode } from '../server/service';\nimport { CodeInfo } from './CodeInfo';\nimport { aceEditorStyle } from './codeStyle';\nimport { CodeForm } from './CodeFrom';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { ProjectName } from '../projects/ProjectName';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Title } = Typography;\n\nconst setSource = (\n    code: CodeType,\n    setCode: React.Dispatch<React.SetStateAction<CodeType>>,\n) => (source: string) => {\n    setCode({\n        ...code,\n        source,\n    })\n}\n\ntype Props = RouteComponentProps<{ id: string, projectId: string, storageType: StorageType }>;\n\nexport const Code = ({ match: { params: { id, projectId, storageType } }, location }: Props) => {\n    const { error, result: code, setResult: setCode } = useAsync<CodeType>(() => getCode(storageType, projectId, id));\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    // instead to getPin, there should be a special endpoint retriving a\n    // list of pages matching the pattern\n    // (when it is coming from pin, pattern should be already be filled out)\n    return (\n        <>\n            <Title level={3}>Add some code</Title>\n            {\n                code ? (\n                    <Form>\n                        <CodeInfo />\n                        <ProjectName projectId={projectId} storageType={storageType} />\n                        <CodeForm\n                            projectId={projectId}\n                            id={id}\n                            code={code}\n                            setSource={setSource(code, setCode)}\n                            location={location}\n                            storageType={storageType}\n                        />\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow\"\n                            onChange={setSource(code, setCode)}\n                            fontSize={14}\n                            value={code.source.length\n                                ? code.source\n                                : `module.exports = async function run(page) {\\n// your code\\n}`}\n                            style={aceEditorStyle}\n                        />\n                        {/* {pin && <CodeCard id={pin.id} png={pin.png} url={pin.url} projectId={projectId} />} */}\n                    </Form>\n                ) : <Spin />\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport Spin from 'antd/lib/spin';\n\nimport { getSettings, startCrawlers } from './server/service';\nimport Button from 'antd/lib/button';\n\nconst { Title } = Typography;\n\nconst load = async (\n    setSettings: React.Dispatch<any>,\n) => {\n    setSettings(await getSettings());\n}\n\nexport const Settings = () => {\n    const [settings, setSettings] = React.useState();\n\n    React.useEffect(() => { load(setSettings); }, []);\n\n    return (\n        <>\n            <Title level={3}>Settings</Title>\n            {settings ? (\n                <>\n                    <p><b>Dir:</b> {settings.dir}</p>\n                </>\n            ) : <Spin />}\n            <p>\n                <Button\n                    icon=\"caret-right\"\n                    size=\"small\"\n                    onClick={startCrawlers}\n                >\n                    Start crawlers\n                </Button>\n            </p>\n        </>\n    );\n}\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport List from 'antd/lib/list';\nimport Button from 'antd/lib/button';\nimport Typography from 'antd/lib/typography';\nimport { CodeInfoList } from '../server/typing';\n\nimport { getCodes } from '../server/service';\nimport { CodeInfo } from './CodeInfo';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { Link } from 'react-router-dom';\nimport { getCodeRoute } from '../routes';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Title, Text } = Typography;\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n}\nexport const Codes = ({ projectId, storageType }: Props) => {\n    const { error, result } = useAsync<CodeInfoList>(() => getCodes(storageType, projectId));\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    return (\n        <>\n            <Title level={3}>Codes</Title>\n            <CodeInfo full={false} />\n            {\n                result\n                    ? <List\n                        bordered\n                        dataSource={Object.values(result)}\n                        renderItem={({ id, name, pattern }) => (\n                            <List.Item\n                                actions={[\n                                    <Link to={getCodeRoute(storageType, projectId, id)}>\n                                        Edit\n                                    </Link>,\n                                ]}\n                            >\n                                <List.Item.Meta\n                                    title={\n                                        <Link to={getCodeRoute(storageType, projectId, id)}>\n                                            {name} <Text code>{pattern}</Text>\n                                        </Link>\n                                    }\n                                />\n                            </List.Item>\n                        )}\n                    />\n                    : <Spin />\n            }\n            <br />\n            <Link to={getCodeRoute(storageType, projectId, Math.floor(Date.now() / 1000).toString())}>\n                <Button icon=\"plus\" size=\"small\">New code</Button>\n            </Link>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport { Project as ProjectType } from '../server/typing';\nimport { saveProject, startCrawler } from '../server/service';\nimport Spin from 'antd/lib/spin';\nimport { getViewportName } from '../viewport';\nimport Icon from 'antd/lib/icon';\nimport Checkbox, { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { History } from 'history';\nimport { getResultsRoute, getPinsRoute } from '../routes';\nimport Button from 'antd/lib/button';\nimport { useProject } from './useProject';\nimport { useCrawlers } from './useCrawlers';\nimport List from 'antd/lib/list';\nimport { timestampToString } from '../utils';\nimport { Codes } from '../code/Codes';\nimport { StorageType } from '../server/storage.typing';\n\nconst onStart = (\n    history: History<any>,\n    projectId: string,\n    storageType: StorageType,\n) => async () => {\n    try {\n        const timestamp = await startCrawler(storageType, projectId);\n        history.push(getResultsRoute(storageType, projectId, timestamp));\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst onAutoPinChange = (\n    storageType: StorageType,\n    { name, id, crawlerInput }: ProjectType,\n    setProject: React.Dispatch<React.SetStateAction<ProjectType>>,\n) => async ({ target: { checked } }: CheckboxChangeEvent) => {\n    const project = await saveProject(storageType, { ...crawlerInput, autopin: checked }, name, id);\n    setProject(project);\n}\n\nconst getCrawlerStatusIcon = (diffZoneCount: number, errorCount: number, status: string, inQueue: number) => {\n    if (inQueue > 0) {\n        return 'loading';\n    }\n    if (!diffZoneCount && errorCount === 0) {\n        return 'check';\n    }\n    if (status === 'done') {\n        return 'issues-close';\n    }\n    return 'exclamation-circle';\n}\n\nexport const Project = ({\n    match: { params: { projectId, storageType } },\n    history,\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    const { project, setProject } = useProject(storageType, projectId);\n    const { crawlers, loading } = useCrawlers(storageType, projectId);\n    return (\n        <>\n            <Typography.Title level={3}>Project</Typography.Title>\n            {!project ? <Spin /> : <>\n                <p><b>Name:</b> {project.name}</p>\n                <p><b>ID:</b> {projectId}</p>\n                <p><b>URL:</b> {project.crawlerInput.url}</p>\n                <p><b>Screen:</b> {getViewportName(project.crawlerInput.viewport)}</p>\n                <p><b>Method:</b>\n                    {project.crawlerInput.method === 'urls'\n                        ? <> <Icon type=\"ordered-list\" /> URLs list</>\n                        : <> <Icon type=\"radar-chart\" /> Spider bot\n                            {!!project.crawlerInput.limit &&\n                                <span style={{ color: '#999', fontSize: 12 }}> (Limit: {project.crawlerInput.limit})</span>}\n                        </>\n                    }\n                </p>\n                <p>\n                    <Checkbox\n                        checked={project.crawlerInput.autopin}\n                        onChange={onAutoPinChange(storageType, project, setProject)}\n                    >\n                        Automatically pin new page founds.\n                    </Checkbox>\n                </p>\n                <p>\n                    <Button\n                        icon=\"caret-right\"\n                        size=\"small\"\n                        onClick={onStart(history, projectId, storageType)}\n                    >\n                        Run\n                    </Button> &nbsp;\n                    <Link to={getPinsRoute(storageType, projectId)}>\n                        <Button\n                            icon=\"pushpin\"\n                            size=\"small\"\n                        >\n                            Pins\n                        </Button>\n                    </Link>\n                </p>\n                <List\n                    itemLayout=\"horizontal\"\n                    bordered\n                    loading={loading}\n                    dataSource={crawlers}\n                    renderItem={({ timestamp, diffZoneCount, errorCount, status, inQueue }) => (\n                        <List.Item\n                            actions={[\n                                <Link to={getResultsRoute(storageType, projectId, timestamp)}>\n                                    Open\n                                </Link>,\n                            ]}\n                        >\n                            <List.Item.Meta\n                                title={\n                                    <Link to={getResultsRoute(storageType, projectId, timestamp)}>\n                                        {timestampToString(timestamp)}\n                                    </Link>}\n                                description={<>\n                                    <Icon type={getCrawlerStatusIcon(diffZoneCount, errorCount, status, inQueue)} />\n                                    <span> Diff: {diffZoneCount} - Error: {errorCount} - In queue: {inQueue}</span>\n                                </>}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </>}\n            <br />\n            <Codes projectId={projectId} storageType={storageType} />\n        </>\n    );\n}\n","import notification from 'antd/lib/notification';\nimport { getCrawlers } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\nimport { Crawler } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nexport const useCrawlers = (storageType: StorageType, projectId: string) => {\n    const { result: crawlers, setResult: setCrawlers, error, loading } = useAsync<Crawler[]>(async () => {\n        const list = await getCrawlers(storageType, projectId);\n        return list.sort(({ timestamp: a }: any, { timestamp: b }: any) => parseInt(b, 10) - parseInt(a, 10));\n    });\n    if (error) {\n        notification['warning']({\n            message: 'Something went wrong while loading crawlers from project.',\n            description: error.toString(),\n        });\n    }\n    return {crawlers, setCrawlers, loading };\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport { useProject } from './useProject';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute } from '../routes';\nimport { StorageType } from '../server/storage.typing';\n\nexport const ProjectBreadcrumb = ({\n    match: { params: { projectId, storageType } },\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getResultsRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\nimport { timestampToString } from '../utils';\nimport { StorageType } from '../server/storage.typing';\n\nexport const CrawlerResultsBreadcrumb = ({\n    match: { params: { projectId, timestamp, storageType } },\n}: RouteComponentProps<{ projectId: string, timestamp: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item>\n                <Link to={getResultsRoute(storageType, projectId, timestamp)}>\n                    Results: {timestampToString(timestamp)}\n                </Link>\n            </Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getPinsRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\nimport { StorageType } from '../server/storage.typing';\n\nexport const PinsBreadcrumb = ({\n    match: { params: { projectId, storageType } },\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getPinsRoute(storageType, projectId)}>Pins</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getCodeRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\nimport { StorageType } from '../server/storage.typing';\n\nexport const CodeBreadcrumb = ({\n    match: { params: { projectId, id, storageType } },\n}: RouteComponentProps<{ projectId: string, id: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getCodeRoute(storageType, projectId, id)}>Code</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport Layout from 'antd/lib/layout';\nimport Typography from 'antd/lib/typography';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport './App.css';\nimport NewProject from './projects/new/NewProject';\nimport { Projects } from './projects/Projects';\nimport { CrawlerResults } from './crawler/CrawlerResults';\nimport {\n    getHomeRoute, getResultsRoute, getPinsRoute, getProjectRoute,\n    getCodeRoute, getSettingsRoute, getNewProjectRoute, getAuthGitHubRoute\n} from './routes';\nimport { Pins } from './pin/Pins';\nimport { Code } from './code/Code';\nimport { Settings } from './Settings';\nimport { Project } from './projects/Project';\nimport Menu from 'antd/lib/menu';\nimport Icon from 'antd/lib/icon';\nimport { ProjectBreadcrumb } from './projects/ProjectBreadcrumb';\nimport { CrawlerResultsBreadcrumb } from './crawler/CrawlerResultsBreadcrumb';\nimport { PinsBreadcrumb } from './pin/PinsBreadcrumb';\nimport { CodeBreadcrumb } from './code/CodeBreadcrumb';\nimport { GitHubAuth } from './auth/GitHubAuth';\n\nconst { Content, Header } = Layout;\nconst { Title } = Typography;\n\nconst layoutStyle = {\n    minHeight: '100vh',\n};\nconst titleStyle = {\n    color: '#fff',\n    marginTop: 15,\n    marginRight: 15,\n    float: 'left' as any,\n}\nconst contentStyle = {\n    background: '#fff',\n    padding: 24,\n    margin: 10,\n    minHeight: 280,\n};\n\nconst App = () => (\n    <Router>\n        <Layout style={layoutStyle}>\n            <Header>\n                <Link to={getHomeRoute()}>\n                    <Title level={3} style={titleStyle}>\n                        Test-crawler\n                    </Title>\n                </Link>\n                <Menu\n                    theme=\"dark\"\n                    mode=\"horizontal\"\n                    style={{ lineHeight: '64px' }}\n                >\n                    <Menu.Item key=\"projects\">\n                        <Icon type=\"folder\" />\n                        <span className=\"nav-text\">Projects</span>\n                        <Link to={getHomeRoute()} />\n                    </Menu.Item>\n                    <Menu.Item key=\"settings\" style={{ float: 'right' }} >\n                        <Link to={getSettingsRoute()}>\n                            <Icon type=\"setting\" />\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </Header>\n            <Breadcrumb style={{ margin: '10px 0 0 10px' }}>\n                <Route path={getProjectRoute(':storageType', ':projectId')} exact component={ProjectBreadcrumb} />\n                <Route path={getResultsRoute(':storageType', ':projectId', ':timestamp')} exact component={CrawlerResultsBreadcrumb} />\n                <Route path={getPinsRoute(':storageType', ':projectId')} exact component={PinsBreadcrumb} />\n                <Route path={getCodeRoute(':storageType', ':projectId', ':id')} exact component={CodeBreadcrumb} />\n            </Breadcrumb>\n            <Content style={contentStyle}>\n                <Route path={getHomeRoute()} exact component={Projects} />\n                <Route path={getNewProjectRoute()} exact component={NewProject} />\n                <Route path={getSettingsRoute()} exact component={Settings} />\n                <Route path={getAuthGitHubRoute()} exact component={GitHubAuth} />\n\n                <Route path={getPinsRoute(':storageType', ':projectId')} exact component={Pins} />\n                <Route path={getCodeRoute(':storageType', ':projectId', ':id')} exact component={Code} />\n                <Route path={getResultsRoute(':storageType', ':projectId', ':timestamp')} component={CrawlerResults} />\n                <Route path={getProjectRoute(':storageType', ':projectId')} exact component={Project} />\n            </Content>\n        </Layout>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AsyncCacheProvider } from 'react-async-cache';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((<AsyncCacheProvider><App /></AsyncCacheProvider>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Separate types for storage in order to build static storage page\n * e.g. for GitHub pages\n */\n\nexport enum StorageType {\n    GitHub = 'github',\n}\n"],"sourceRoot":""}
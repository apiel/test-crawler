{"version":3,"sources":["server/lib/CrawlerProviderStorageBase.ts","server/lib/CrawlerProviderStorage.ts","server/error.ts","server/service.ts","server/typing.ts","server/lib/CrawlerProvider.ts","server/lib/index.ts","server/lib/config.ts","server/lib/storage/GitHubStorage.ts","server/lib/storage/Storage.ts","server/lib sync","logo.svg","routes.tsx","common/Info.tsx","viewport.ts","hook/useAsync.ts","projects/ProjectRepos.tsx","doc/useDoc.tsx","server/storage.typing.ts","projects/new/NewProject.tsx","search/search.ts","common/refreshMasonry.ts","auth/GitHubSave.tsx","auth/GitHubAuth.tsx","projects/ProjectsInfo.tsx","projects/ProjectsPerRemote.tsx","projects/useProjects.tsx","hook/useError.tsx","projects/Projects.tsx","pages/pageStyle.tsx","common/ErrorHandler.tsx","search/Search.tsx","utils/index.ts","diff/DiffImageButtons.tsx","diff/DiffZone.tsx","pages/PageImageDiffZone.tsx","pages/PageImageDiff.tsx","pages/PageImage.tsx","pages/Page.tsx","pages/PagesActionZone.tsx","pages/PagesActionPin.tsx","diff/DiffImage.tsx","diff/DiffImageWithZone.tsx","pages/PagesActionFullscreen.tsx","pages/PagesActions.tsx","pages/Pages.tsx","crawler/SwitchStatus.tsx","projects/useProject.tsx","projects/ProjectName.tsx","crawler/CrawlerInfo.tsx","crawler/CrawlerResults.tsx","pin/PinPage.tsx","pin/Pins.tsx","code/CodeInfo.tsx","code/codeStyle.ts","code/CodeFrom.tsx","code/CodeSnippet.tsx","code/Code.tsx","Settings.tsx","code/ForEachPage.tsx","code/BeforeAfter.tsx","code/Codes.tsx","projects/ProjectJobs.tsx","projects/Project.tsx","projects/useCrawlers.tsx","projects/ProjectBreadcrumb.tsx","crawler/CrawlerResultsBreadcrumb.tsx","pin/PinsBreadcrumb.tsx","code/CodeBreadcrumb.tsx","doc/DocSider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CrawlerProviderStorageBase","gitHubStorage","GitHubStorage","getCookie","key","ctx","Cookies","get","CrawlerProviderStorage","storageType","storage","ERR","getSettings","a","dir","__dirname","getInfo","CrawlerProvider","this","info","getJobs","projectId","jobs","getRepo","repo","loadRepos","repos","loadProject","loadProjects","saveProject","crawlerInput","name","getCrawler","timestamp","getCrawlers","getAllCrawlers","getPages","getPins","saveBeforeAfterCode","type","code","getBeforeAfterCode","setCode","saveCode","getCode","id","loadCode","getCodes","getCodeList","getThumbnail","crawlerProvider","image","Error","toString","removePin","removeFromPins","pin","copyToPins","setZoneStatus","index","status","setZonesStatus","setStatus","setCrawlerStatus","getBrowsers","browsers","startCrawler","browser","startCrawlers","undefined","ZoneStatus","Browser","BeforeAfterType","readJSON","join","readdir","PROJECT_FOLDER","projects","Promise","all","map","md5","project","saveJSON","path","CRAWL_FOLDER","folders","crawlers","jsonFile","data","png","diff","pixelDiffRatio","zones","PIN_FOLDER","remove","blob","SNAPSHOT_FOLDER","Object","values","includes","file","length","saveFile","read","buf","source","codeInfo","list","CODE_FOLDER","sourcePath","buffer","pattern","listPath","getPinsInFolder","getPageInFolder","folder","files","filter","extname","crawler","fileJson","zonePin","pinJsonFile","push","item","zone","sort","b","xMin","yMin","groupedZones","groupOverlappingZone","forEach","Math","floor","Date","now","crawlTarget","crawl","redirect","ROOT_FOLDER","process","QUEUE_FOLDER","MAX_HISTORY","TIMEOUT","CONSUMER_COUNT","USER_AGENT","CONSUME_TIMEOUT","parseInt","config","configFile","require","e","remote","getConfig","BASE_URL","CI_Workflow","github","getContents","response","dirname","content","Buffer","from","filename","basename","filedata","find","call","url","blobUrl","sha","baseRepo","latestCommitSha","base_tree","commit","tree","method","encoding","newBlobSha","mode","newTreeSha","message","parents","shaCommit","console","log","JSON","parse","stringify","contentsUrl","getSha","src","dst","srcData","saveBlob","consumeTimeout","os","IeSelenium","ciDispatchUrl","event_type","client_payload","redirectUrl","user","rate","limit","remaining","runsUrl","workflow_runs","getInProgressJobs","inProgress","queued","getQueuedJobs","runs","html_url","created_at","updated_at","startAt","round","getTime","lastUpdate","progressIds","job","steps","step","started_at","stepsCount","stepsDone","currentStep","token","missingGitHubConfig","axios","headers","defaultRepo","Storage","webpackEmptyContext","req","keys","resolve","module","exports","_extends","assign","target","i","arguments","prototype","hasOwnProperty","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","x","y","width","height","cx","cy","r","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","getNewProjectRoute","getPinsRoute","getCodeRoute","getResultsRoute","getProjectRoute","infoStyle","lineHeight","borderLeft","paddingLeft","color","textAlign","Info","children","style","viewports","value","isMobile","hasTouch","viewportsStr","viewport","getViewportName","valueStr","findIndex","vp","load","fn","setResult","setError","setLoading","result","useAsync","deps","initialValue","React","useState","error","loading","useEffect","ProjectRepos","defaultValue","showSearch","onChange","set","placeholder","Option","DocContext","createContext","open","toggle","setOpen","setContent","StorageType","useDoc","useContext","useThisDoc","save","history","input","notification","description","handleSubmit","validateFields","event","preventDefault","err","NewForm","Form","create","match","params","form","getFieldDecorator","getFieldValue","Doc","onSubmit","Item","rules","required","addonBefore","label","className","ChromePuppeteer","Group","size","Button","min","trigger","overlayStyle","Paragraph","ellipsis","rows","expandable","href","rel","valuePropName","icon","htmlType","Title","level","timerSearch","masonry","timer","handleCancel","setToken","handleNever","handleSave","pass","AES","encrypt","GitHubSave","setPass","visible","onCancel","footer","onClick","Password","maxAge","window","location","reload","handleBlur","setShowSave","cookies","handleUnlock","prompt","bytes","decrypt","encUtf8","GitHubAuth","showSave","saveTokenAvailable","Text","onBlur","addonAfter","ProjectsInfo","ProjectsPerRemote","useProjects","ErrorComponent","useError","itemLayout","bordered","dataSource","renderItem","actions","to","Meta","Projects","coverStyle","imgStyle","cardStyle","cardImgMargin","marginBottom","masonryStyle","paddingTop","paddingBottom","masonryOptions","gutter","fitWidth","ErrorHandler","showIcon","searchStyle","marginRight","onSearch","setPages","pages","filters","clearTimeout","setTimeout","filterPages","searchPages","Fuse","search","onFilter","setFilters","searchValue","availableFilters","page","res","Select","Search","withFilters","selectedFilters","setSelectedFilters","pagesFiltered","setPagesFiltered","tokenSeparators","filterOption","timestampToString","unix","calendar","buttonStyle","marginLeft","onSetStatus","success","DiffImageButtons","valid","report","getColorByStatus","zoneStyle","ratio","img","over","top","left","xMax","yMax","border","position","backgroundImage","backgroundPosition","backgroundSize","DiffZone","thumb","originalWidth","hover","setHover","onMouseOver","onMouseOut","PageImageDiffZone","more","Fragment","perStatus","getCountZonesPerStatus","PageImageDiff","theme","n","precision","fix","toFixed","sigDig","PageImage","convert","fg","alertStyle","Page","pageError","dangerouslySetInnerHTML","__html","toHtml","PagesActionZone","onPin","hide","PagesActionPin","DiffImage","onImg","setThumb","alt","DiffImageWithZone","useAsyncCacheWatch","cache","setVisible","PagesActionFullscreen","PagesActions","setMasonry","m","onMasonryImg","layout","Pages","options","c","cover","setCrawler","SwitchStatus","checkedChildren","unCheckedChildren","checked","useProject","setProject","update","ProjectName","Typography","warningStyle","limitStyle","fontSize","CrawlerInfo","diffZoneCount","errorCount","urlsCount","inQueue","total","percent","screen","duration","format","CrawlerResults","subscrib","unsubscrib","handleDelete","setPins","pins","PinPage","onConfirm","okText","cancelText","pathname","state","Pins","CodeInfo","full","aceEditorStyle","buttonBarStyle","float","inputStyle","maxWidth","margin","onPlay","warn","CodeForm","setSource","overlay","Code","setSettings","Settings","settings","ForEachPage","onSave","BeforeAfter","codeParam","Codes","Before","After","ProjectJobs","loadJobs","loadCrawlers","jobInProgress","setJobInProgress","setInterval","clearInterval","onStart","btn","onAutoPinChange","autopin","getCrawlerStatusIcon","Project","setCrawlers","useCrawlers","ProjectBreadcrumb","CrawlerResultsBreadcrumb","PinsBreadcrumb","CodeBreadcrumb","DocSider","Sider","breakpoint","collapsedWidth","padding","fontStyle","offsetTop","shape","Content","Layout","Header","layoutStyle","minHeight","titleStyle","marginTop","contentStyle","background","App","fill","selectable","exact","component","NewProject","Boolean","hostname","host","hotjar","initialize","ReactDOM","render","setStateOpen","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bcc062a.chunk.js","sourcesContent":["\nexport abstract class CrawlerProviderStorageBase {\n    abstract startCrawlers(): Promise<void>;\n}\n","import { WsContext, Context } from 'isomor-server';\nimport Cookies from 'universal-cookie';\nimport { GitHubStorage } from './storage/GitHubStorage';\nimport { StorageType } from '../storage.typing';\nimport { CrawlerProviderStorageBase } from './CrawlerProviderStorageBase';\n\n\nconst gitHubStorage = new GitHubStorage();\n\nexport function getCookie(key: string, ctx?: undefined | WsContext | Context) {\n    const cookies = new Cookies();\n    return cookies.get(key);\n}\n\nexport abstract class CrawlerProviderStorage extends CrawlerProviderStorageBase {\n    constructor(storageType?: StorageType, public ctx?: undefined | WsContext | Context) {\n        super();\n    }\n\n    storage = gitHubStorage;\n\n    async startCrawlers() {}\n}\n","export enum ERR {\n    missingGitHubConfig = 'cannot use GitHub if no config provided',\n}\n","import {\n    CrawlerProvider,\n} from './lib';\n\nimport {\n    Crawler,\n    CrawlerInput,\n    PageData,\n    Project,\n    Code,\n    CodeInfoList,\n    StartCrawler,\n    BeforeAfterType,\n    Browser,\n    ZoneStatus,\n} from './typing';\nimport { StorageType } from './storage.typing';\n\n// Force getSettings to be a async since crawlerProvider.getSettings is sync\nexport async function getSettings() {\n    return {\n        dir: __dirname,\n    }\n}\n\nexport function getInfo(storageType: StorageType) {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.info();\n}\n\nexport function getJobs(storageType: StorageType, projectId: string) {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.jobs(projectId);\n}\n\nexport function getRepo(storageType: StorageType) {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.repo();\n}\n\nexport function loadRepos(storageType: StorageType) {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.repos();\n}\n\nexport function loadProject(storageType: StorageType, projectId: string): Promise<Project> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.loadProject(projectId);\n}\n\nexport function loadProjects(storageType: StorageType): Promise<Project[]> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.loadProjects();\n}\n\nexport function saveProject(storageType: StorageType, crawlerInput: CrawlerInput, name: string, projectId?: string): Promise<Project> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.saveProject(crawlerInput, name, projectId);\n}\n\nexport function getCrawler(storageType: StorageType, projectId: string, timestamp: string): Promise<Crawler> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.getCrawler(projectId, timestamp);\n}\n\nexport function getCrawlers(storageType: StorageType, projectId: string): Promise<Crawler[]> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.getAllCrawlers(projectId);\n}\n\nexport function getPages(storageType: StorageType, projectId: string, timestamp: string): Promise<PageData[]> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.getPages(projectId, timestamp);\n}\n\nexport function getPins(storageType: StorageType, projectId: string): Promise<PageData[]> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.getPins(projectId);\n}\n\nexport function getPin(storageType: StorageType, projectId: string, id: string): Promise<PageData> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.getPin(projectId, id);\n}\n\nexport function saveBeforeAfterCode(storageType: StorageType, projectId: string, type: BeforeAfterType, code: string): Promise<void> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.saveBeforeAfterCode(projectId, type, code);\n}\n\nexport function getBeforeAfterCode(storageType: StorageType, projectId: string, type: BeforeAfterType): Promise<string> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.getBeforeAfterCode(projectId, type);\n}\n\nexport function setCode(storageType: StorageType, projectId: string, code: Code): Promise<void> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.saveCode(projectId, code);\n}\n\nexport function getCode(storageType: StorageType, projectId: string, id: string): Promise<Code> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.loadCode(projectId, id);\n}\n\nexport function getCodes(storageType: StorageType, projectId: string): Promise<CodeInfoList> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.getCodeList(projectId);\n}\n\nexport async function getThumbnail(storageType: StorageType, projectId: string, timestamp: string, id: string, width: number = 300): Promise<string> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    const image = await crawlerProvider.image(projectId, timestamp, id);\n    if (!image) {\n        throw new Error('Cannot load image.');\n    }\n    // return `data:image/png;base64, ${(await image.toBuffer()).toString('base64')}`;\n    return `data:image/png;base64, ${(image).toString('base64')}`;\n}\n\nexport function removePin(storageType: StorageType, projectId: string, id: string): Promise<PageData[]> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.removeFromPins(projectId, id);\n}\n\nexport function pin(storageType: StorageType, projectId: string, timestamp: string, id: string): Promise<PageData> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.copyToPins(projectId, timestamp, id);\n}\n\nexport async function setZoneStatus(storageType: StorageType, projectId: string, timestamp: string, id: string, index: number, status: ZoneStatus): Promise<PageData[]> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.setZoneStatus(projectId, timestamp, id, status, index);\n}\n\nexport async function setZonesStatus(storageType: StorageType, projectId: string, timestamp: string, id: string, status: ZoneStatus): Promise<PageData[]> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.setZoneStatus(projectId, timestamp, id, status);\n}\n\nexport function setStatus(storageType: StorageType, projectId: string, timestamp: string, status: string): Promise<Crawler> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.setCrawlerStatus(projectId, timestamp, status);\n}\n\nexport async function getBrowsers(storageType: StorageType) {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.browsers;\n}\n\nexport function startCrawler(storageType: StorageType, projectId: string, browser: Browser): Promise<StartCrawler> {\n    const crawlerProvider = new CrawlerProvider(storageType, this);\n    return crawlerProvider.startCrawler(projectId, browser);\n}\n\nexport function startCrawlers(/* storageType: StorageType */): Promise<void> {\n    const crawlerProvider = new CrawlerProvider(undefined, this);\n    return crawlerProvider.startCrawlers();\n}\n","// import { Zone } from 'pixdiff-zone';\n// import { Viewport } from 'puppeteer';\n// export { Viewport, Zone };\n\nexport enum ZoneStatus {\n    valid = 'valid',\n    zonePin = 'zone-pin',\n    report = 'report',\n    diff = 'diff',\n}\n\nexport enum Browser {\n    ChromePuppeteer = 'chrome-puppeteer',\n    FirefoxSelenium = 'firefox-selenium',\n    ChromeSelenium = 'chrome-selenium',\n    SafariSelenium = 'safari-selenium',\n    IeSelenium = 'ie-selenium',\n    // EdgeSelenium = 'edge-selenium',\n}\n\nexport interface StartCrawler {\n    timestamp: string;\n    redirect?: string;\n}\n\nexport interface Zone {\n    xMin: number;\n    yMin: number;\n    xMax: number;\n    yMax: number;\n}\n\nexport interface Viewport {\n    width: number;\n    height: number;\n    deviceScaleFactor?: number;\n    isMobile?: boolean;\n    hasTouch?: boolean;\n    isLandscape?: boolean;\n}\n\nexport interface CodeInfoList {\n    [id: string]: CodeInfo;\n}\n\nexport interface CodeInfo {\n    id: string;\n    pattern: string;\n    name: string;\n}\n\nexport interface Code extends CodeInfo {\n    source: string;\n}\n\nexport enum BeforeAfterType {\n    Before = 'before',\n    After = 'after',\n}\n\nexport interface CrawlerInput {\n    url: string;\n    viewport: Viewport;\n    browser: Browser;\n    method: string;\n    limit?: number;\n    autopin: boolean;\n}\n\nexport interface Project {\n    id: string;\n    name: string;\n    crawlerInput: CrawlerInput;\n}\n\nexport interface Crawler extends CrawlerInput {\n    id: string;\n    timestamp: string;\n    diffZoneCount: number;\n    errorCount: number;\n    inQueue: number;\n    urlsCount: number;\n    status: string;\n    startAt: number;\n    lastUpdate: number;\n}\n\nexport interface PngDiffDataZone {\n    zone: Zone;\n    status: ZoneStatus;\n}\n\nexport interface PngDiffData {\n    pixelDiffRatio: number;\n    zones: PngDiffDataZone[];\n}\n\nexport interface PageData {\n    id: string;\n    url: string;\n    timestamp: string;\n    error?: string;\n    performance?: Performance;\n    metrics?: PageMetrics;\n    viewport?: Viewport;\n\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n}\n\nexport interface CrawlTarget {\n    timestamp: string;\n    projectId: string;\n}\n\nexport interface PageMetrics {\n    Timestamp: number;\n    Documents: number;\n    Frames: number;\n    JSEventListeners: number;\n    Nodes: number;\n    LayoutCount: number;\n    RecalcStyleCount: number;\n    LayoutDuration: number;\n    RecalcStyleDuration: number;\n    ScriptDuration: number;\n    TaskDuration: number;\n    JSHeapUsedSize: number;\n    JSHeapTotalSize: number;\n}\n\nexport interface Performance {\n    timeOrigin: number;\n    timing: Timing;\n    navigation: Navigation;\n}\n\nexport interface Navigation {\n    type: 0;\n    redirectCount: 0;\n}\n\nexport interface Timing {\n    navigationStart: number;\n    unloadEventStart: number;\n    unloadEventEnd: number;\n    redirectStart: number;\n    redirectEnd: number;\n    fetchStart: number;\n    domainLookupStart: number;\n    domainLookupEnd: number;\n    connectStart: number;\n    connectEnd: number;\n    secureConnectionStart: number;\n    requestStart: number;\n    responseStart: number;\n    responseEnd: number;\n    domLoading: number;\n    domInteractive: number;\n    domContentLoadedEventStart: number;\n    domContentLoadedEventEnd: number;\n    domComplete: number;\n    loadEventStart: number;\n    loadEventEnd: number;\n}\n\nexport interface Job {\n    id: string;\n    url: string;\n    status: string;\n    startAt: number;\n    lastUpdate: number;\n    stepsCount?: number;\n    stepsDone?: number;\n    currentStep?: string;\n}\n","import { join, extname } from 'path';\nimport * as md5 from 'md5';\nimport { groupOverlappingZone } from 'pixdiff-zone';\nimport { WsContext, Context } from 'isomor-server';\n\nimport { CRAWL_FOLDER, PIN_FOLDER, CODE_FOLDER, PROJECT_FOLDER, SNAPSHOT_FOLDER } from './config';\n\nimport { Crawler, CrawlerInput, PageData, Project, Code, CodeInfoList, StartCrawler, BeforeAfterType, Browser, ZoneStatus } from '../typing';\nimport { StorageType } from '../storage.typing';\nimport { CrawlerProviderStorage } from './CrawlerProviderStorage';\n\nexport class CrawlerProvider extends CrawlerProviderStorage {\n    constructor(storageType?: StorageType, public ctx?: undefined | WsContext | Context) {\n        super(storageType, ctx);\n    }\n\n    repos() {\n        return this.storage.repos();\n    }\n\n    repo() {\n        return this.storage.getRepo();\n    }\n\n    info() {\n        return this.storage.info();\n    }\n\n    jobs(projectId: string) {\n        return this.storage.jobs(projectId);\n    }\n\n    loadProject(projectId: string): Promise<Project> {\n        return this.storage.readJSON(this.join(projectId, `project.json`));\n    }\n\n    async loadProjects(): Promise<Project[]> {\n        // we should use accumulator\n        const projects = await this.storage.readdir(PROJECT_FOLDER);\n        return Promise.all(\n            projects.map(projectId => this.loadProject(projectId)),\n        );\n    }\n\n    async saveProject(crawlerInput: CrawlerInput, name: string, projectId?: string): Promise<Project> {\n        if (!projectId) {\n            projectId = (md5 as any)(name) as string;\n        }\n        const project = { id: projectId, name, crawlerInput };\n        await this.storage.saveJSON(this.join(projectId, 'project.json'), project);\n        return project;\n    }\n\n    getCrawler(projectId: string, timestamp: string): Promise<Crawler> {\n        const path = this.join(projectId, CRAWL_FOLDER, timestamp, '_.json');\n        return this.storage.readJSON(path);\n    }\n\n    async getAllCrawlers(projectId: string): Promise<Crawler[]> {\n        const path = this.join(projectId, CRAWL_FOLDER);\n        const folders = await this.storage.readdir(path);\n        const crawlers: Crawler[] = await Promise.all(\n            folders.map(timestamp => this.getCrawler(projectId, timestamp)),\n        );\n        return crawlers;\n    }\n\n    async copyToPins(projectId: string, timestamp: string, id: string): Promise<PageData> {\n        const jsonFile = this.join(projectId, CRAWL_FOLDER, timestamp, `${id}.json`);\n\n        // set diff to 0\n        // instead to load this file again, we could get the data from the frontend?\n        const data: PageData = await this.storage.readJSON(jsonFile);\n        if (data?.png) {\n            data.png.diff = {\n                pixelDiffRatio: 0,\n                zones: [],\n            };\n            if (data.png.diff.pixelDiffRatio > 0) {\n                await this.storage.saveJSON(jsonFile, data);\n            }\n        }\n        await this.storage.saveJSON(this.join(projectId, PIN_FOLDER, `${id}.json`), data);\n        return data;\n    }\n\n    async removeFromPins(projectId: string, id: string): Promise<PageData[]> {\n        await this.storage.remove(this.join(projectId, PIN_FOLDER, `${id}.json`));\n        return this.getPins(projectId);\n    }\n\n    async image(projectId: string, timestamp: string, id: string) {\n        if (timestamp === 'pin') {\n            const pin: PageData = await this.storage.readJSON(this.join(projectId, PIN_FOLDER, `${id}.json`));\n            if (!pin) return;\n            timestamp = pin.timestamp;\n        }\n        return this.storage.blob(this.join(projectId, SNAPSHOT_FOLDER, `${timestamp}-${id}.png`));\n    }\n\n    saveBeforeAfterCode(projectId: string, type: BeforeAfterType, code: string): Promise<void> {\n        if (!Object.values(BeforeAfterType).includes(type)) {\n            throw new Error(`Unknown code type ${type}.`);\n        }\n        const file = this.join(projectId, `${type}.js`);\n        if (!code.length) {\n            return this.storage.remove(file);\n        }\n        return this.storage.saveFile(file, code);\n    }\n\n    async getBeforeAfterCode(projectId: string, type: BeforeAfterType): Promise<string> {\n        if (!Object.values(BeforeAfterType).includes(type)) {\n            throw new Error(`Unknown code type ${type}.`);\n        }\n        try {\n            const buf = await this.storage.read(this.join(projectId, `${type}.js`));\n            return buf?.toString() || '';\n        } catch (err) { }\n        return '';\n    }\n\n    async saveCode(projectId: string, code: Code): Promise<void> {\n        const { source, ...codeInfo } = code;\n        const list = await this.getCodeList(projectId);\n        list[code.id] = codeInfo;\n        await this.storage.saveJSON(\n            this.join(projectId, CODE_FOLDER, `list.json`),\n            { ...list }); // for some reason it need a copy\n        await this.storage.saveFile(\n            this.join(projectId, CODE_FOLDER, `${code.id}.js`),\n            source);\n    }\n\n    async loadCode(projectId: string, id: string): Promise<Code> {\n        const list = await this.getCodeList(projectId);\n        const codeInfo = list[id];\n        const sourcePath = this.join(projectId, CODE_FOLDER, `${id}.js`);\n        if (codeInfo) {\n            const buffer = await this.storage.read(sourcePath);\n            if (buffer) {\n                const source = buffer.toString();\n                return { ...codeInfo, source };\n            }\n        }\n        return {\n            id,\n            name: '',\n            pattern: '',\n            source: '',\n        };\n    }\n\n    async getCodeList(projectId: string): Promise<CodeInfoList> {\n        const listPath = this.join(projectId, CODE_FOLDER, `list.json`);\n        const list = await this.storage.readJSON(listPath);\n        return list || {};\n    }\n\n    getPins(projectId: string): Promise<PageData[]> {\n        return this.getPinsInFolder(this.join(projectId, PIN_FOLDER));\n    }\n\n    getPin(projectId: string, id: string): Promise<PageData> {\n        return this.getPageInFolder(this.join(projectId, PIN_FOLDER), id);\n    }\n\n    getPages(projectId: string, timestamp: string): Promise<PageData[]> {\n        return this.getPinsInFolder(this.join(projectId, CRAWL_FOLDER, timestamp));\n    }\n\n    private getPageInFolder(folder: string, id: string): Promise<PageData> {\n        return this.storage.readJSON(join(folder, `${id}.json`));\n\n    }\n\n    private async getPinsInFolder(folder: string): Promise<PageData[]> {\n        const files = await this.storage.readdir(folder);\n        return Promise.all(\n            files.filter(file => extname(file) === '.json' && file !== '_.json')\n                .map(file => this.storage.readJSON(join(folder, file))),\n        );\n    }\n\n    async setCrawlerStatus(projectId: string, timestamp: string, status: string): Promise<Crawler> {\n        const file = this.join(projectId, CRAWL_FOLDER, timestamp, '_.json');\n        const crawler: Crawler = await this.storage.readJSON(file);\n        crawler.status = status;\n        await this.storage.saveJSON(file, crawler);\n        return crawler;\n    }\n\n    async setZoneStatus(projectId: string, timestamp: string, id: string, status: ZoneStatus, index?: number): Promise<PageData[]> {\n        const folder = this.join(projectId, CRAWL_FOLDER, timestamp);\n        const fileJson = join(folder, `${id}.json`)\n        const data: PageData = await this.storage.readJSON(fileJson);\n        if (index && status === ZoneStatus.zonePin) {\n            const pinJsonFile = this.join(projectId, PIN_FOLDER, `${id}.json`);\n            const pin: PageData = await this.storage.readJSON(pinJsonFile);\n\n            if (pin?.png?.diff?.zones && data?.png?.diff?.zones) {\n                if (index) {\n                    pin.png.diff.zones.push({ ...data.png.diff.zones[index], status });\n                }\n                const zones = pin.png.diff.zones.map(item => item.zone);\n                zones.sort((a, b) => a.xMin * a.yMin - b.xMin * b.yMin);\n                const groupedZones = groupOverlappingZone(zones);\n                pin.png.diff.zones = groupedZones.map(zone => ({ zone, status }));\n            }\n\n            await this.storage.saveJSON(pinJsonFile, pin);\n        }\n        if (data?.png?.diff?.zones) {\n            if (index) {\n                data.png.diff.zones[index].status = status;\n            } else {\n                data.png.diff.zones.forEach(zone => zone.status = status);\n            }\n        }\n        await this.storage.saveJSON(fileJson, data);\n        return this.getPages(projectId, timestamp);\n    }\n\n    async startCrawler(projectId: string, browser?: Browser): Promise<StartCrawler> {\n        const timestamp = Math.floor(Date.now() / 1000).toString();\n\n        const crawlTarget = { projectId, timestamp };\n        const redirect = await this.storage.crawl(crawlTarget, 30, (this.ctx as any)?.push, browser);\n\n        return {\n            timestamp,\n            redirect,\n        };\n    }\n\n    get browsers(): Browser[] {\n        return this.storage.browsers;\n    }\n\n    protected join(projectId: string, ...path: string[]) {\n        return join(PROJECT_FOLDER, projectId, ...path);\n    }\n}\n","import * as config from './config';\n\nexport { CrawlerProvider } from './CrawlerProvider';\n\nexport const getConfig = () => config;\nexport const CrawlerMethod = {\n    URLs: 'urls',\n    SPIDER_BOT: 'spiderbot',\n};\n","import { join } from 'path';\n\nexport const ROOT_FOLDER = process.env.ROOT_FOLDER || join(__dirname, '../../..');\nexport const PROJECT_FOLDER = process.env.PROJECT_FOLDER || 'test-crawler';\nexport const CRAWL_FOLDER = 'crawl';\nexport const PIN_FOLDER = 'pin';\nexport const CODE_FOLDER = 'code';\nexport const QUEUE_FOLDER = 'queue';\nexport const SNAPSHOT_FOLDER = 'snapshot';\nexport const MAX_HISTORY = 10;\nexport const TIMEOUT = 10000; // 10 sec\nexport const CONSUMER_COUNT = 5;\nexport const USER_AGENT = 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)';\nexport const CONSUME_TIMEOUT = process.env.CONSUME_TIMEOUT ? parseInt(process.env.CONSUME_TIMEOUT, 10) : 0;\n\nexport const config = getConfig();\n\nfunction getConfig(): Config {\n    const configFile = join(ROOT_FOLDER, 'test-crawler.config.js');\n    let config: any;\n    try {\n        config = require(configFile);\n    }\n    catch (e) {\n        config = {};\n    }\n    return {\n        remote: {},\n        ...config,\n    }\n}\n\nexport interface Config {\n    remote: {\n        github?: GitHubConfig,\n    }\n}\n\nexport interface GitHubConfig {\n    user: string;\n    token: string;\n    defaultRepo: string; // for the moment only single repo suported but we might want to make it on any repo\n}\n","import { Storage } from './Storage';\n\nimport { basename, dirname } from 'path';\nimport { WsContext, Context } from 'isomor-server';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { CrawlTarget, Job, Browser } from '../../typing';\nimport { config, GitHubConfig } from '../config';\nimport { ERR } from '../../error';\nimport { getCookie } from '../CrawlerProviderStorage';\n\nconst BASE_URL = 'https://api.github.com';\nconst COMMIT_PREFIX = '[test-crawler]';\nconst EVENT_TYPE = 'test-crawler';\n\n// need to keep yml config in here to be able to compile it in static mode\nconst CI_Workflow = `\nname: Test-crawler CI\n\non:\n  repository_dispatch:\n    types: [${EVENT_TYPE}]\n\njobs:\n  test-crawler:\n    if: github.event.client_payload.os == 'default'\n    runs-on: macos-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Enable safari driver\n      run: |\n        sudo safaridriver --enable\n        safaridriver -p 0 &\n    - name: Run test-crawler \\${{ github.event.client_payload.projectId }}\n      uses: apiel/test-crawler/actions/run@master\n    - name: Push changes\n      uses: apiel/test-crawler/actions/push@master\n      with:\n        token: \\${{ secrets.GITHUB_TOKEN }}\n\n  test-crawler-windows:\n    if: github.event.client_payload.os == 'win'\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - uses: warrenbuckley/Setup-Nuget@v1\n    - name: Enable ie driver\n      run: |\n        nuget install Selenium.WebDriver.IEDriver -Version 3.150.0\n        # nuget install Selenium.WebDriver.MicrosoftDriver -Version 17.17134.0\n        # nuget install Selenium.WebDriver.MicrosoftWebDriver -Version 10.0.17134\n    - name: Run test-crawler \\${{ github.event.client_payload.projectId }}\n      uses: apiel/test-crawler/actions/run@master\n    - name: Push changes\n      uses: apiel/test-crawler/actions/push@master\n      with:\n        token: \\${{ secrets.GITHUB_TOKEN }}\n`;\n\ninterface GitHubWorkflow {\n    status: string;\n    id: string;\n    html_url: string;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface GitHubJob {\n    status: string;\n    html_url: string;\n    started_at: string;\n    steps: GitHubStep[];\n}\n\ninterface GitHubStep {\n    status: string;\n    name: string;\n    started_at: string;\n}\n\nexport class GitHubStorage extends Storage {\n    private config: GitHubConfig | undefined;\n    constructor(protected ctx?: undefined | WsContext | Context) {\n        super();\n        this.config = config.remote.github;\n    }\n\n    get browsers(): Browser[] {\n        return Object.values(Browser);\n    }\n\n    async readdir(path: string) {\n        try {\n            const { data } = await this.getContents(path);\n            return data.map(({ name }: any) => name) as string[]; // type is also available so we could filter for type === 'file'   \n        } catch (error) {\n            if (error?.response?.status === 404) {\n                return [] as string[];\n            }\n            throw error;\n        }\n    }\n\n    async blob(path: string) {\n        const { data } = await this.getContents(dirname(path));\n        if (data.content) {\n            return Buffer.from(data.content, 'base64');\n        }\n        const filename = basename(path);\n        const filedata = data.find((item: any) => item.name === filename);\n        if (!filedata) {\n            return;\n        }\n        const { data: { content } } = await this.call({\n            url: `${this.blobUrl}/${filedata.sha}`,\n        });\n        return Buffer.from(content, 'base64');\n    }\n\n    async saveBlob(file: string, content: Buffer) {\n        await this.remove(file);\n        const { data: [\n            { sha: latestCommitSha, commit: { tree: { sha: base_tree } } }\n        ] } = await this.call({\n            url: `${this.baseRepo}/commits`,\n        });\n\n        const { data: { sha: newBlobSha } } = await this.call({\n            method: 'POST',\n            url: this.blobUrl,\n            data: {\n                content: content.toString('base64'),\n                encoding: 'base64',\n            },\n        });\n\n        const { data: { sha: newTreeSha } } = await this.call({\n            method: 'POST',\n            url: `${this.baseRepo}/git/trees`,\n            data: {\n                base_tree,\n                tree: [{\n                    path: file,\n                    mode: '100644',\n                    sha: newBlobSha,\n                }],\n            },\n        });\n\n        const { data: { sha: shaCommit } } = await this.call({\n            method: 'POST',\n            url: `${this.baseRepo}/git/commits`,\n            data: {\n                message: `${COMMIT_PREFIX} save blob`,\n                tree: newTreeSha,\n                parents: [latestCommitSha]\n            },\n        });\n\n        await this.call({\n            method: 'PATCH',\n            url: `${this.baseRepo}/git/refs/heads/master`,\n            data: {\n                sha: shaCommit,\n            },\n        });\n        console.log('Blob saved', file);\n    }\n\n    async read(path: string) {\n        const { data: { content } } = await this.getContents(path);\n        return Buffer.from(content, 'base64');\n    }\n\n    async readJSON(path: string) {\n        try {\n            return JSON.parse((await this.read(path)).toString());\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async remove(file: string) {\n        const { data: { sha } } = await this.getContents(file);\n        const data = JSON.stringify({\n            message: `${COMMIT_PREFIX} save json`,\n            sha,\n        });\n        await this.call({\n            method: 'DELETE',\n            url: `${this.contentsUrl}/${file}`,\n            data,\n        });\n    }\n\n    async saveFile(file: string, content: string) {\n        if (!this.repo) {\n            throw new Error('GitHub repository required.');\n        }\n        const sha = await this.getSha(file);\n        const data = JSON.stringify({\n            message: `${COMMIT_PREFIX} save file`,\n            content: Buffer.from(content).toString('base64'),\n            ...(sha && { sha }),\n        });\n        await this.call({\n            method: 'PUT',\n            url: `${this.contentsUrl}/${file}`,\n            data,\n        });\n    }\n\n    protected async getSha(file: string) {\n        try {\n            const { data } = await this.getContents(file);\n            if (data?.sha) {\n                return data.sha;\n            }\n        } catch (error) {\n            if (error?.response?.status !== 404) {\n                throw error;\n            }\n        }\n    }\n\n    async saveJSON(file: string, content: any) {\n        return this.saveFile(file, JSON.stringify(content, null, 4))\n    }\n\n    async copy(src: string, dst: string) {\n        const srcData = await this.read(src);\n        if (srcData) {\n            this.saveFile(dst, srcData.toString());\n        }\n    }\n\n    async copyBlob(src: string, dst: string) {\n        const srcData = await this.blob(src);\n        if (srcData) {\n            await this.saveBlob(dst, srcData);\n        }\n    }\n\n    async crawl(\n        crawlTarget?: CrawlTarget,\n        consumeTimeout?: number,\n        push?: (payload: any) => void,\n        browser?: Browser,\n    ) {\n        if (crawlTarget?.projectId) { // run only if projectId provided (but we could think to do it also id)\n            await this.saveFile('.github/workflows/test-crawler.yml', CI_Workflow);\n            const os = browser === Browser.IeSelenium ? 'win' : 'default';\n            await this.call({\n                method: 'POST',\n                url: `${this.ciDispatchUrl}`,\n                data: {\n                    event_type: EVENT_TYPE,\n                    client_payload: {\n                        projectId: crawlTarget.projectId,\n                        os,\n                    }\n                },\n            });\n        }\n        return this.redirectUrl;\n    }\n\n    async repos() {\n        const { data } = await this.call({\n            url: `${BASE_URL}/users/${this.config?.user}/repos?sort=updated&per_page=1000`,\n        });\n        return data.map(({ name }: any) => name) as string[];\n    }\n\n    async getRepo() {\n        return this.repo;\n    }\n\n    async info() {\n        const { data: { rate: { limit, remaining } } } = await this.call({\n            url: `${BASE_URL}/rate_limit`,\n        });\n        return `For GitHub API requests, you can make up to 5000 requests per hour.\n        Every pages of the test-crawler UI is using multiples request at once. Your\n        current rate limit is: ${remaining} of ${limit}`;\n    }\n\n    async jobs(projectId: string) {\n        const { data: { workflow_runs } } = await this.call({\n            url: this.runsUrl,\n        });\n        const inProgress = await this.getInProgressJobs(projectId, workflow_runs);\n        const queued = this.getQueuedJobs(workflow_runs);\n\n        return [...queued, ...inProgress];\n    }\n\n    protected getQueuedJobs(runs: GitHubWorkflow[]) {\n        return runs.filter(({ status }) => !['in_progress', 'completed'].includes(status))\n            .map(({ id, html_url, status, created_at, updated_at }) => ({\n                id,\n                url: html_url,\n                status,\n                startAt: Math.round(new Date(created_at).getTime() / 1000),\n                lastUpdate: Math.round(new Date(updated_at).getTime() / 1000),\n            })) as Job[];\n    }\n\n    protected async getInProgressJobs(projectId: string, runs: GitHubWorkflow[]) {\n        const progressIds = runs.filter(({ status }) => status === 'in_progress').map(({ id }) => id);\n        const jobs = progressIds.map(async (id: string) => {\n            const { data: { jobs } } = await this.call({\n                url: `${this.baseRepo}/actions/runs/${id}/jobs`,\n            });\n            const [job]: [GitHubJob] = jobs;\n            const isProjectJob = job.steps.find(({ name }) => name.includes(projectId)) !== undefined;\n            if (isProjectJob) {\n                const step = job.steps.find(({ status }) => status === 'in_progress');\n                return {\n                    id,\n                    url: job.html_url,\n                    status: job.status,\n                    startAt: Math.round(new Date(job.started_at).getTime() / 1000),\n                    stepsCount: job.steps.length,\n                    stepsDone: job.steps.filter(({ status }) => status === 'completed').length,\n                    currentStep: step?.name || 'unknown',\n                    lastUpdate: Math.round(new Date(step?.started_at || job.started_at).getTime() / 1000),\n                } as Job;\n            }\n        }) as Promise<Job | undefined>[];\n        return (await Promise.all(jobs)).filter(job => job) as Job[];\n    }\n\n    protected call(config: AxiosRequestConfig) {\n        if (!this.token || !this.user) {\n            throw new Error(ERR.missingGitHubConfig);\n        }\n        return axios({\n            ...config,\n            headers: { ...config?.headers, 'Authorization': `token ${this.token}` },\n        });\n    }\n\n    protected getContents(path: string) {\n        return this.call({\n            url: `${this.contentsUrl}/${path}`,\n        });\n    }\n\n    protected get baseRepo() {\n        return `${BASE_URL}/repos/${this.user}/${this.repo}`;\n    }\n\n    protected get contentsUrl() {\n        return `${this.baseRepo}/contents`;\n    }\n\n    protected get blobUrl() {\n        return `${this.baseRepo}/git/blobs`;\n    }\n\n    protected get ciDispatchUrl() {\n        return `${this.baseRepo}/dispatches`;\n    }\n\n    protected get runsUrl() {\n        return `${this.baseRepo}/actions/workflows/test-crawler.yml/runs?event=repository_dispatch`;\n    }\n\n    protected get redirectUrl() {\n        return `https://github.com/${this.user}/${this.repo}/actions`;\n    }\n\n    protected get user() {\n        return getCookie('github', this.ctx)?.user || this.config?.user;\n    }\n\n    protected get token() {\n        return getCookie('github', this.ctx)?.token || this.config?.user;\n    }\n\n    protected get repo() {\n        return getCookie('githubRepo', this.ctx) || this.config?.defaultRepo;\n    }\n}\n","import { CrawlTarget, Job, Browser } from '../../typing';\n\nexport abstract class Storage {\n    abstract get browsers(): Browser[];\n    abstract info(): Promise<string | undefined>;\n    abstract blob(path: string): Promise<Buffer | undefined>;\n    abstract repos(): Promise<string[] | undefined>;\n    abstract getRepo(): Promise<string | undefined>;\n    abstract read(path: string): Promise<Buffer>;\n    abstract readJSON(path: string): Promise<any>;\n    abstract readdir(path: string): Promise<string[]>;\n    abstract saveJSON(file: string, data: any): Promise<void>;\n    abstract saveFile(file: string, data: string): Promise<void>;\n    abstract copy(src: string, dst: string): Promise<void>;\n    abstract copyBlob(src: string, dst: string): Promise<void>;\n    abstract remove(file: string): Promise<void>;\n    abstract crawl(crawlTarget?: CrawlTarget, consumeTimeout?: number, push?: (payload: any) => void, browser?: Browser): Promise<undefined | string>;\n    abstract jobs(projectId: string): Promise<Job[]>;\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 402;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M325.8166665077209,137.29999988079066 c146.97,0 251.77,73.76 322.73,155.31 V1.4999998807907104 h-647.5 v292.48 C72.47666650772089,211.8799998807907 178.03666650772095,137.29999988079066 325.8166665077209,137.29999988079066 z\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  x: 1.0366616249084473,\n  y: 506.1999510526657,\n  width: 647.5,\n  height: 142.8000030517578\n});\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"circle\", {\n  cx: 324.79667139053345,\n  cy: 325.2499998807907,\n  r: 125.18000030517578\n});\n\nvar SvgLogo = function SvgLogo(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 647.5 647.5\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgLogo, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/logo.25ca0e45.svg\";\nexport { ForwardRef as ReactComponent };","import { StorageType } from './server/storage.typing';\n\nexport const getHomeRoute = () => '/';\nexport const getSettingsRoute = () => '/settings';\nexport const getAuthGitHubRoute = () => '/auth/github';\n\nexport function getNewProjectRoute<T = StorageType>(storageType: T) {\n    return `/new/${storageType}`;\n}\nexport function getPinsRoute<T = StorageType>(storageType: T, projectId: string) {\n    return `/pins/${storageType}/${projectId}`;\n}\nexport function getCodeRoute<T = StorageType>(storageType: T, projectId: string, id: string) {\n    return `/code/${storageType}/${projectId}/${id}`;\n}\nexport function getResultsRoute<T = StorageType>(storageType: T, projectId: string, timestamp: string) {\n    return `/results/${storageType}/${projectId}/${timestamp}`;\n}\nexport function getProjectRoute<T = StorageType>(storageType: T, projectId: string) {\n    return `/project/${storageType}/${projectId}`;;\n}\n","import React from 'react';\n\nconst infoStyle = {\n    lineHeight: 1.2,\n    borderLeft: '8px solid #EEE',\n    paddingLeft: 15,\n    color: '#666',\n    textAlign: 'justify' as 'justify',\n}\n\nexport const Info: React.FunctionComponent = ({ children }) => (\n    <div style={infoStyle}>\n        { children }\n    </div>\n);\n","import { Viewport as ViewportObject } from './server/typing';\n\nexport interface ViewportString {\n    name: string;\n    value: string;\n}\n\nexport interface Viewport {\n    name: string;\n    value: ViewportObject;\n}\n\nexport const viewports: Viewport[] = [\n    { name: 'Desktop - 800x600', value: { width: 800, height: 600 } },\n    { name: 'Desktop - 1024x768', value: { width: 1024, height: 768 } },\n    { name: 'Desktop - 1920x1080', value: { width: 1920, height: 1080 } },\n    { name: 'iPhone 5 - 320x568', value: { width: 320, height: 568, isMobile: true, hasTouch: true } },\n    { name: 'iPhone 6 - 375x667', value: { width: 375, height: 667, isMobile: true, hasTouch: true } },\n    { name: 'Ipad - 768x1024', value: { width: 768, height: 1024, isMobile: true, hasTouch: true } },\n    { name: 'Galaxy S5 - 360x640', value: { width: 360, height: 640, isMobile: true, hasTouch: true } },\n];\n\nexport const viewportsStr: ViewportString[] = viewports.map(\n    ({ value, ...viewport }) => ({ ...viewport, value: JSON.stringify(value) })\n);\n\nexport const getDefaultViewportStr = () => viewportsStr[0];\nexport const getDefaultViewport = (): ViewportObject => viewports[0].value;\n\nexport const getViewportName = (value: ViewportObject) => {\n    const valueStr = JSON.stringify(value);\n    const index = viewportsStr.findIndex(vp => vp.value === valueStr);\n    if (index !== -1) {\n        return viewportsStr[index].name;\n    }\n    const { width, height, isMobile } = value;\n    return `${width}x${height}${ isMobile && ' mobile'}`;\n};\n","import React from 'react';\n\nconst load = <T>(\n    fn: () => Promise<any>,\n    setResult: React.Dispatch<React.SetStateAction<T>>,\n    setError: React.Dispatch<React.SetStateAction<any | undefined>>,\n    setLoading: React.Dispatch<React.SetStateAction<boolean>>,\n) => async () => {\n    try {\n        setError(undefined);\n        setLoading(true);\n        const result = await fn();\n        setResult(result);\n    } catch (error) {\n        setError(error);\n    }\n    setLoading(false);\n}\nexport const useAsync = <T>(\n    fn: () => Promise<any>,\n    deps: React.DependencyList = [],\n    initialValue?: any,\n) => {\n    const [result, setResult] = React.useState<T>(initialValue);\n    const [error, setError] = React.useState();\n    const [loading, setLoading] = React.useState(false);\n    const call = load<T>(fn, setResult, setError, setLoading);\n    React.useEffect(() => {\n        call();\n    }, deps);\n    return { loading, result, call, error, setResult }\n}","import React from 'react';\nimport Select from 'antd/lib/select';\nimport Cookies from 'universal-cookie';\n\nimport { StorageType } from '../server/storage.typing';\nimport { loadRepos, getRepo } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\n\ninterface Props {\n    storageType: StorageType;\n    loadProjects?: () => Promise<void>;\n    defaultValue?: string | number;\n}\n\nexport const ProjectRepos = ({ storageType, loadProjects, defaultValue }: Props) => {\n    const { result: repos } = useAsync<string[]>(() => loadRepos(storageType));\n    const { result: repo } = useAsync<string>(() => getRepo(storageType));\n\n    return !repos ? null : (\n            <Select\n                showSearch\n                defaultValue={repo}\n                onChange={(value: string) => {\n                    const cookies = new Cookies();\n                    cookies.set('githubRepo', value, { path: '/' });\n                    loadProjects && loadProjects();\n                }}\n                style={{ width: 200 }}\n                placeholder=\"repository\"\n            >\n                {repos.map(repo => (<Select.Option key={repo} value={repo}>{repo}</Select.Option>))}\n            </Select>\n    );\n}\n","import React, { ReactNode } from 'react';\nimport Cookies from 'universal-cookie';\n\nconst DocContext = React.createContext<{\n    open: boolean,\n    toggle: () => void,\n    content?: ReactNode,\n    setOpen: (value: boolean) => void,\n    setContent: React.Dispatch<React.SetStateAction<ReactNode>>,\n}>({\n    open: false,\n    toggle: () => { },\n    setOpen: () => { },\n    setContent: () => { },\n});\n\nexport function DocProvider({ children }: React.PropsWithChildren<any>) {\n    const cookies = new Cookies();\n    const [open, setStateOpen] = React.useState(cookies.get('doc') === 'open');\n    const [content, setContent] = React.useState<ReactNode>();\n    const setOpen = (value: boolean) => {\n        cookies.set('doc', value ? 'open' : 'close', { path: '/' });\n        setStateOpen(value);\n    }\n    return (\n        <DocContext.Provider value={{\n            open,\n            setOpen,\n            content,\n            setContent,\n            toggle: () => setOpen(!open),\n        }}>\n            {children}\n        </DocContext.Provider>\n    );\n}\n\nexport const useDoc = () => React.useContext(DocContext);\n\nexport const useThisDoc = (content?: ReactNode) => {\n    const { setContent } = useDoc();\n    React.useEffect(() => {\n        setContent(content);\n    }, []);\n}\n","/**\n * Separate types for storage in order to build static storage page\n * e.g. for GitHub pages\n */\n\nexport enum StorageType {\n    GitHub = 'github',\n}\n","import React from 'react';\nimport Input from 'antd/lib/input';\nimport InputNumber from 'antd/lib/input-number';\nimport Checkbox from 'antd/lib/checkbox';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport Icon from 'antd/lib/icon';\nimport Popover from 'antd/lib/popover';\nimport Radio from 'antd/lib/radio';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport Button from 'antd/lib/button';\nimport { RouteComponentProps } from 'react-router';\nimport { CrawlerInput, Browser } from '../../server/typing';\n\nimport { getHomeRoute } from '../../routes';\nimport { saveProject, getBrowsers } from '../../server/service';\nimport { Info } from '../../common/Info';\nimport { getDefaultViewport, viewportsStr } from '../../viewport';\nimport { History } from 'history';\nimport { StorageType } from '../../server/storage.typing';\nimport { ProjectRepos } from '../ProjectRepos';\nimport { useThisDoc } from '../../doc/useDoc';\nimport Select from 'antd/lib/select';\nimport { useAsync } from '../../hook/useAsync';\n\nconst save = async (\n    storageType: StorageType,\n    history: History<any>,\n    { name, viewport, ...input }: (CrawlerInput & { name: string, viewport: string }),\n) => {\n    try {\n        await saveProject(storageType, { ...input, viewport: JSON.parse(viewport) }, name, undefined);\n        history.push(getHomeRoute());\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst handleSubmit = (storageType: StorageType, history: History<any>, validateFields: any) => (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    validateFields((err: any, values: any) => {\n        if (!err) {\n            save(storageType, history, values);\n        }\n    });\n}\n\ntype Props = FormComponentProps & RouteComponentProps<{ storageType: StorageType }>;\nconst NewProject = ({\n    history,\n    match: { params: { storageType } },\n    form: { getFieldDecorator, validateFields, getFieldValue },\n}: Props) => {\n    const { result: browsers } = useAsync<Browser[]>(() => getBrowsers(storageType));\n    useThisDoc(Doc);\n    return (\n        <Form onSubmit={handleSubmit(storageType, history, validateFields)}>\n            <Form.Item>\n                {getFieldDecorator('name', {\n                    rules: [{ required: true, message: 'Please give a name to the project.' }],\n                })(\n                    <Input addonBefore=\"Name\" placeholder=\"Project name\" />\n                )}\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator('url', {\n                    rules: [{ required: true, message: 'Please input an URL to crawl.' }],\n                })(\n                    <Input\n                        placeholder=\"https://domain.com/\"\n                        addonBefore=\"URL\"\n                    />\n                )}\n            </Form.Item>\n            <div>\n                <Form.Item label=\"Browser\" className=\"item-inline\">\n                    {getFieldDecorator('browser', {\n                        initialValue: Browser.ChromePuppeteer,\n                        rules: [{ required: true, message: 'Please select a browser.' }],\n                    })(\n                        <Select>\n                            {browsers?.map(\n                                (browser) => <Select.Option key={browser} value={browser}>{browser}</Select.Option>\n                            )}\n                        </Select>\n                    )}\n                </Form.Item>\n                <Form.Item label=\"Viewport\" className=\"item-inline\">\n                    {getFieldDecorator('viewport', {\n                        initialValue: JSON.stringify(getDefaultViewport()),\n                        rules: [{ required: true, message: 'Please select viewport.' }],\n                    })(\n                        <Select>\n                            {viewportsStr.map(\n                                ({ value, name }) => <Select.Option key={value} value={value}>{name}</Select.Option>\n                            )}\n                        </Select>\n                    )}\n                </Form.Item>\n            </div>\n            <div>\n                <Form.Item label=\"Method\" className=\"item-inline\">\n                    {getFieldDecorator('method', {\n                        initialValue: 'spiderbot',\n                        rules: [{ required: true }],\n                    })(\n                        <Radio.Group size=\"small\">\n                            <Radio.Button value={'spiderbot'}><Icon type=\"radar-chart\" /> Spider bot</Radio.Button>\n                            <Radio.Button value={'urls'}><Icon type=\"ordered-list\" /> URLs list</Radio.Button>\n                        </Radio.Group>\n                    )}\n                </Form.Item>\n                {getFieldValue('method') === 'spiderbot' &&\n                    <Form.Item label=\"Limit\" className=\"item-inline\">\n                        {getFieldDecorator('limit')(\n                            <InputNumber min={0} size=\"small\" />\n                        )}\n                        &nbsp;<Popover content={<div>\n                            <b>Limit the number of sibling pages. </b>\n                            For example, with the urls:\n                        <ul>\n                                <li>/item/1</li>\n                                <li>/item/2</li>\n                                <li>/item/3</li>\n                                <li>/item/4</li>\n                            </ul> using the limit <b>2</b> will only crawl <b>/item/1</b> and <b>/item/2</b>.<br /><br />\n                            Use <b>0</b> to skip the limit.</div>} trigger=\"click\" overlayStyle={{ width: 200 }}>\n                            <Icon type=\"question-circle\" />\n                        </Popover>\n                    </Form.Item>\n                }\n                <Info>\n                    <Typography.Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>Spider bot</b> crawling method will get all the links inside the page of the given URL\n                        and crawl the children. It will then continue do the same with the children till no new\n                        link is found. Be careful if you have big website, this is most likely not the right\n                        solution for you.\n                    </Typography.Paragraph>\n                    <Typography.Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>URLs list</b> crawling method will crawl a specific sets of URLs. In the URL input field\n                        you must provide an endpoint containing a list of URLs (a simple text format, with one URL\n                        per line). The crawler will crawl each of those URL only and will not try to find links in\n                        the page. To use a static list of URLs, you can use a tool\n                        like <a href=\"https://pastebin.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://pastebin.com</a>.\n                    </Typography.Paragraph>\n                </Info>\n            </div>\n            <Form.Item>\n                {getFieldDecorator('autopin', {\n                    valuePropName: 'checked',\n                })(\n                    <Checkbox>Automatically pin new page founds.</Checkbox>\n                )}\n            </Form.Item>\n            <Form.Item>\n                <ProjectRepos storageType={storageType} />\n            </Form.Item>\n            <Form.Item>\n                <Button\n                    type=\"primary\"\n                    icon=\"plus\"\n                    htmlType=\"submit\"\n                >\n                    Create\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nconst NewForm = Form.create({ name: 'start_crawler' })(NewProject);\nexport default NewForm;\n\nconst Doc = () => (\n    <>\n        <p>\n            First of all, you need to give a name to your project. Then, you need to\n            provide the URL depending of the crawling method you will be using. If\n            you are using the <b>Spider bot</b> method, you should give the URL of\n            the website you want to crawl. If you are using the <b>URLs list</b> method,\n            you should give the URL of the endpoint containing the list of URLs.\n        </p>\n        <p>\n            There is different kind of browser: <a\n                href=\"https://github.com/puppeteer/puppeteer\"\n                target=\"_blank\" rel=\"noopener noreferrer\"\n            >chrome-puppeteer</a>, <a\n                href=\"https://github.com/SeleniumHQ/selenium\"\n                target=\"_blank\" rel=\"noopener noreferrer\"\n            >firefox-selenium</a>... Depending of the browser you will select, different tool\n            will be available in the code injection. Also some browser are only available\n            depending of the OS where is test-crawler hosted.\n        </p>\n        <Info>\n            <p>IE and Safari are in experimentation, might not be stable.</p>\n        </Info>\n        <p>\n            Running your test in safari work only on macOS. Safari doesn't support multiple instance\n            in parallel, therefor crawling might be very slow. Locally, you will need to activate safari\n            webdriver for selenium with the following commands:\n        </p>\n        <pre>\n            <code>\n                sudo safaridriver --enable\n                safaridriver -p 0 &\n            </code>\n        </pre>\n        <p>\n            Internet explorer, is the browser giving the most problem till now. Setting viewport\n            has no effect, fullpage screenshot doesn't work, Spider Bot crawling will most likely\n            fail.\n        </p>\n        <p>\n            There is multiple viewports (screen size) available. If you want to test\n            multiple viewports for the same website, you will have to create one\n            project per viewport.\n        </p>\n        <p>\n            Finally, you can specify if you want to automatically pin the new pages founds.\n            Pins are the references screenshot to make the comparison with.\n            While crawling, the crawler is comparing page to pin.\n            If you are not sure, the auto-pin can be activate/deactivate afterwards.\n        </p>\n        <Typography.Title level={4}>Spider bot</Typography.Title>\n        <p>\n            <b>Spider bot</b> crawling method will get all the links inside the page of the given URL\n            and crawl the children. It will then continue do the same with the children till no new\n            link is found. Be careful if you have big website, this is most likely not the right\n            solution for you.\n        </p>\n        <Typography.Title level={4}>URLs list</Typography.Title>\n        <p>\n            <b>URLs list</b> crawling method will crawl a specific sets of URLs. In the URL input field\n            you must provide an endpoint containing a list of URLs (a simple text format, with one URL\n            per line). The crawler will crawl each of those URL only and will not try to find links in\n            the page. To use a static list of URLs, you can use a tool\n            like <a href=\"https://pastebin.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://pastebin.com</a>.\n        </p>\n    </>\n);\n\n","import { PageData } from '../server/typing';\nimport Fuse from 'fuse.js';\nimport get from 'lodash/get';\nimport { cardStyle, masonryOptions } from '../pages/pageStyle';\n\nexport const searchStyle = {\n    width: cardStyle.width,\n    marginRight: masonryOptions.gutter,\n}\n\nlet timerSearch: NodeJS.Timer;\nexport const onSearch = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    filters: string[],\n) => (value: string) => {\n    if (pages) {\n        if (!value.length) {\n            filterPages(setPages, pages, filters);\n        } else {\n            clearTimeout(timerSearch);\n            timerSearch = setTimeout(() => {\n                filterPages(setPages, searchPages(pages, value), filters);\n            }, 500);\n        }\n    }\n};\n\nconst searchPages = (\n    pages: PageData[],\n    value: string,\n) => {\n    const fuse = new Fuse(pages, {\n        keys: [\n            'url',\n            'viewport.width',\n            'viewport.height',\n            'keywords',\n        ],\n    });\n    return fuse.search(value);\n}\n\n// instead to have 2 fields, we could use one combine with to instance of fuse.js\n// 1 with partial match and 1 with full word match for filters\n// for the input field see \"Search and Select Users\" from select component\nexport const onFilter = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    setFilters: React.Dispatch<React.SetStateAction<any>>,\n) => (filters: string[]) => {\n    if (pages) {\n        setFilters(filters);\n        filterPages(setPages, pages, filters);\n    }\n};\n\nconst filterPages = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    filters: string[]\n) => {\n    if (pages) {\n        if (!filters.length) {\n            setPages(pages);\n        } else {\n            const searchValue = filters.filter(filter => !Object.keys(availableFilters).includes(filter)).join(' ');\n            if (searchValue) {\n                pages = searchPages(pages, searchValue);\n            }\n            setPages(pages.filter(page => {\n                let res = true\n                if (filters.includes('with-diff')) {\n                    const pixelDiffRatio = get(page, 'png.diff.pixelDiffRatio');\n                    res = res && pixelDiffRatio > 0;\n                }\n                if (filters.includes('new')) {\n                    res = res && !!page.png && !page.png.diff\n                }\n                return res;\n            }));\n        }\n    }\n}\n\nexport const availableFilters = {\n    'with-diff': 'with diff',\n    'new': 'new',\n}\n","let masonry: any;\nlet timer: NodeJS.Timer;\n\nexport const setMasonry = (m: any) => masonry = m;\n\nexport const onMasonryImg = () => {\n    if (masonry) masonry.layout();\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n        if (masonry) masonry.layout();\n    }, 500);\n}\n","import React from 'react';\nimport Modal from 'antd/lib/modal';\nimport { Info } from '../common/Info';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Button from 'antd/lib/button';\nimport Cookies from 'universal-cookie';\nimport AES from 'crypto-js/aes';\n\nconst handleCancel = (\n    setToken: React.Dispatch<React.SetStateAction<string>>,\n) => () => {\n    setToken('');\n}\n\nconst handleNever = (\n    setToken: React.Dispatch<React.SetStateAction<string>>,\n) => () => {\n    const cookies = new Cookies();\n    cookies.set('githubNoSave', 'true', { path: '/' });\n    setToken('');\n}\n\nconst handleSave = (\n    setToken: React.Dispatch<React.SetStateAction<string>>,\n    pass: string,\n    token: string,\n) => () => {\n    if (pass.length) {\n        const cookies = new Cookies();\n        cookies.set('githubToken', AES.encrypt(token, pass).toString(), { path: '/' });\n        setToken('');\n    }\n}\n\ninterface Props {\n    token: string;\n    setToken: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const GitHubSave = ({ token, setToken }: Props) => {\n    // const cookies = new Cookies();\n    // const encToken = cookies.get('githubToken');\n    // console.log('encToken', encToken);\n    // if (encToken) {\n    //     var bytes  = AES.decrypt(cookies.get('githubToken'), 'hello');\n    //     console.log('originalText', bytes.toString(encUtf8));\n    // }\n\n    const [pass, setPass] = React.useState('');\n    return (\n        <Modal\n            visible={!!token.length}\n            title=\"Keep token safe\"\n            onCancel={handleCancel(setToken)}\n            footer={[\n                <Button key=\"later\" onClick={handleCancel(setToken)}>\n                    Later\n                </Button>,\n                <Button key=\"never\" onClick={handleNever(setToken)}>\n                    Never\n                </Button>,\n                <Button key=\"save\" onClick={handleSave(setToken, pass, token)}>\n                    Save\n                </Button>,\n            ]}\n        >\n            <p style={{ textAlign: 'justify' }}>\n                Personal access tokens is a sensible information and you should keep it safe. For this\n                reason, we are saving this token in your cookie only for a limited amount of time. After\n                5 min of inactivity, you will need to enter it again.\n            </p>\n            <p style={{ textAlign: 'justify' }}>\n                To keep this token safe, use some password manager like Lastpass or Bitwarden.\n                Alternatively, you can use the build-in token AES encryption. Just set a password:\n            </p>\n            <Input.Password placeholder=\"Password\" onChange={({ target: { value } }) => setPass(value)} />\n        </Modal>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport { Info } from '../common/Info';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Button from 'antd/lib/button';\nimport message from 'antd/lib/message';\nimport Icon from 'antd/lib/icon';\nimport Cookies from 'universal-cookie';\nimport encUtf8 from 'crypto-js/enc-utf8';\nimport AES from 'crypto-js/aes';\n\nimport { GitHubSave } from './GitHubSave';\n\nconst handleSubmit = (validateFields: any) => (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    validateFields((err: any, values: any) => {\n        if (!err) {\n            // save\n            const cookies = new Cookies();\n            cookies.set('github', values, { path: '/', maxAge: 5 * 60 });\n            window?.location?.reload();\n        }\n    });\n}\n\nconst handleBlur = (\n    setShowSave: React.Dispatch<React.SetStateAction<string>>,\n) => ({ target: { value } }: React.FocusEvent<HTMLInputElement>) => {\n    if (value.length) {\n        const cookies = new Cookies();\n        if (cookies.get('githubNoSave') !== 'true' && !cookies.get('githubToken')) {\n            setShowSave(value);\n        }\n    }\n}\n\nconst handleUnlock = (\n    setToken: React.Dispatch<React.SetStateAction<string>>,\n) => () => {\n    const cookies = new Cookies();\n    const encToken = cookies.get('githubToken');\n    if (encToken) {\n        const pass = prompt('Please enter password to unlock token');\n        if (pass?.length) {\n            const bytes  = AES.decrypt(cookies.get('githubToken'), pass);\n            if (bytes) {\n                const token = bytes.toString(encUtf8);\n                if (token.length) {\n                    setToken(token);\n                    return;\n                }\n            }\n            message.error('Invalid password');\n        }\n    }\n}\n\nconst GitHubAuthForm = ({ form: { getFieldDecorator, validateFields } }: FormComponentProps) => {\n    const [showSave, setShowSave] = React.useState('');\n    const [token, setToken] = React.useState('');\n    const cookies = new Cookies();\n    const saveTokenAvailable = cookies.get('githubNoSave') !== 'true' && !cookies.get('githubToken');\n    return (\n        <>\n            <GitHubSave token={showSave} setToken={setShowSave} />\n            <Typography.Title level={4}>GitHub</Typography.Title>\n            <Info>\n                <Typography.Paragraph>\n                    To save data in your GitHub repository, we need to provide\n                    a <a href=\"https://developer.github.com/v3/auth/#via-oauth-and-personal-access-tokens\" target=\"_blank\" rel=\"noopener noreferrer\">personal access tokens</a> to\n                    the <a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub API</a>.\n                    To <a href=\"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        create a token</a>, go in developer settings, personal access tokens and then generate new token. In most of the case\n                    you will only need to give permission for <Typography.Text code>public_repo</Typography.Text>.\n                </Typography.Paragraph>\n            </Info>\n            <Form onSubmit={handleSubmit(validateFields)}>\n                <Form.Item>\n                    {getFieldDecorator('user', {\n                        rules: [{ required: true, message: 'Please provide your GitHub username.' }],\n                    })(\n                        <Input addonBefore=\"Username\" placeholder=\"Github username\" />\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('token', {\n                        initialValue: token,\n                        rules: [{ required: true, message: 'Please provide your personal access tokens.' }],\n                    })(\n                        <Input.Password\n                            addonBefore=\"Token\"\n                            placeholder=\"Personal access tokens\"\n                            {...(saveTokenAvailable && { onBlur: handleBlur(setShowSave) })}\n                            {...(cookies.get('githubToken') && { addonAfter: <Icon type=\"unlock\" onClick={handleUnlock(setToken)} /> })}\n                        />\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Button\n                        type=\"primary\"\n                        icon=\"github\"\n                        htmlType=\"submit\"\n                    >\n                        OK\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    );\n}\n\nexport const GitHubAuth = Form.create({ name: 'github_auth' })(GitHubAuthForm);\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport { Info } from '../common/Info';\nimport { StorageType } from '../server/storage.typing';\nimport { getInfo } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\n\ninterface Props {\n    storageType: StorageType;\n}\n\nexport const ProjectsInfo = ({ storageType }: Props) => {\n    const { result: info } = useAsync<string>(() => getInfo(storageType));\n\n    return !info ? null : (\n        <Info>\n            <Typography.Paragraph>\n                {info}\n            </Typography.Paragraph>\n        </Info>\n    );\n}\n","import React from 'react';\nimport List from 'antd/lib/list';\nimport Icon from 'antd/lib/icon';\nimport { Link } from 'react-router-dom';\nimport Typography from 'antd/lib/typography';\nimport { StorageType } from '../server/storage.typing';\nimport { getProjectRoute } from '../routes';\nimport { useProjects } from './useProjects';\nimport Spin from 'antd/lib/spin';\nimport { useError } from '../hook/useError';\nimport { ProjectRepos } from './ProjectRepos';\nimport { ProjectsInfo } from './ProjectsInfo';\n\ninterface Props {\n    title: string;\n    storageType: StorageType;\n}\n\nexport const ProjectsPerRemote = ({ title, storageType }: Props) => {\n    const { projects, loading, error, call } = useProjects(storageType);\n    const ErrorComponent = useError(error);\n    // console.log('ErrorComponent', ErrorComponent);\n    if (ErrorComponent) {\n        return <ErrorComponent />;\n    }\n    return (\n        <>\n            <Typography.Title level={4}>\n                {title} <ProjectRepos storageType={storageType} loadProjects={call} />\n            </Typography.Title>\n            <ProjectsInfo storageType={storageType} />\n            {loading ? <Spin /> : <List\n                itemLayout=\"horizontal\"\n                bordered\n                dataSource={projects}\n                renderItem={({ id, name, crawlerInput: { url } }) => (\n                    <List.Item\n                        actions={[\n                            <Link to={getProjectRoute(storageType, id)}>\n                                Open\n                            </Link>,\n                        ]}\n                    >\n                        <List.Item.Meta\n                            title={<Link to={getProjectRoute(storageType, id)}>\n                                {name} <Icon type={storageType} />\n                            </Link>}\n                            description={url}\n                        />\n                    </List.Item>\n                )}\n            />}\n        </>\n    );\n}\n","// import notification from 'antd/lib/notification';\nimport { Project } from '../server/typing';\nimport { loadProjects } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\nexport const useProjects = (storageType: StorageType) => {\n    const { result: projects, error, loading, call } =\n        useAsync<Project[]>(() => loadProjects(storageType));\n    if (error) {\n        // notification['warning']({\n        //     message: `Something went wrong while loading project from ${storageType}.`,\n        //     description: error.toString(),\n        // });\n    }\n    return { projects, loading, error, call };\n}\n","import { ERR } from '../server/error';\nimport { GitHubAuth } from '../auth/GitHubAuth';\nimport { notification } from 'antd';\n\nexport const useError = (error: any) => {\n    if (error) {\n        if (error === ERR.missingGitHubConfig || error?.message === ERR.missingGitHubConfig) {\n            return GitHubAuth;\n        } else {\n            notification['warning']({\n                message: `Something went wrong.`,\n                description: error.toString(),\n            });\n        }\n    }\n}\n","import React from 'react';\nimport Button from 'antd/lib/button';\nimport { Link } from 'react-router-dom';\nimport Typography from 'antd/lib/typography';\nimport Icon from 'antd/lib/icon';\nimport { StorageType } from '../server/storage.typing';\nimport { getNewProjectRoute } from '../routes';\nimport { ProjectsPerRemote } from './ProjectsPerRemote';\nimport { useThisDoc } from '../doc/useDoc';\nimport { Info } from '../common/Info';\n\nexport const Projects = () => {\n    useThisDoc(Doc);\n    return (\n        <>\n            <Typography.Title level={3}>Projects</Typography.Title>\n            {Object.keys(StorageType).map((key) => (\n                <div key={key}>\n                    <ProjectsPerRemote\n                        title={key}\n                        storageType={StorageType[key as keyof typeof StorageType]}\n                    />\n                    <br />\n                    <Link to={getNewProjectRoute(StorageType[key as keyof typeof StorageType])}>\n                        <Button icon=\"plus\" size=\"small\">New</Button>\n                    </Link>\n                    <br />\n                    <br />\n                </div>\n            ))}\n        </>\n    );\n}\n\nconst Doc = () => (\n    <>\n        <p>\n            Test-crawler is project based. To be able to start a crawler,\n            you will first need to create a project by clicking\n            on <Button icon=\"plus\" size=\"small\">New</Button>\n        </p>\n        <p>\n            Depending on how test-crawler is hosted, there will be different\n            type of storage availble: local, GitHub, and more coming soon...\n            If you are running it, yourself, all the storage should be available.\n        </p>\n        <Typography.Title level={4}>Local</Typography.Title>\n        <p>\n            The <b>local</b> storage consist to save the data on the server\n            where is hosted test-crawler. This is the best option to keep your tests\n            private and safe.\n        </p>\n        <Typography.Title level={4}>GitHub</Typography.Title>\n        <p>\n            The <b>GitHub</b> storage consist to save the data on a given\n            repository. This option is good for public project, especially\n            for open source project that are already on GitHub. It will give\n            you the possibility to keep history of your tests in relation to\n            your code changes. Also this storage is using GitHub CI workflow\n            to generate your test, you can therefor integrate it very well\n            with your other workflow.\n        </p>\n        <p>\n            To use <b>GitHub</b> storage, we need to provide a user and a <a\n                href=\"https://developer.github.com/v3/auth/#via-oauth-and-personal-access-tokens\"\n                target=\"_blank\" rel=\"noopener noreferrer\"\n            >personal access tokens</a> to the <a\n                href=\"https://developer.github.com/v3/\"\n                target=\"_blank\" rel=\"noopener noreferrer\"\n            >GitHub API</a>. Personal access tokens is a sensible information and you should keep\n            it safe. For this reason, we are saving this token in your cookie only for a limited\n            amount of time. After 5 min of inactivity, you will need to enter it again.\n        </p>\n        <p>\n            To keep this token safe, use some password manager like Lastpass or Bitwarden.\n            Alternatively, you can use the build-in token AES encryption. To decrypt the token\n            click on lock icon <Icon type=\"unlock\" />.\n        </p>\n        <p>To <a\n                href=\"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\"\n                target=\"_blank\" rel=\"noopener noreferrer\"\n            >create a token</a>, go in developer settings, personal access tokens and then generate\n            new token. In most of the case you will only need to give permission\n            for <Typography.Text code>public_repo</Typography.Text>.\n        </p>\n        <Info>\n            <Typography.Paragraph>\n                Note: we are not saving any of your credential on a server.\n                Everything is save in your cookies. Also\n                the <a href=\"https://apiel.github.io/test-crawler/live/\">live version</a> hosted\n                on GitHub page is purely static. All the logic is running in your browser.\n            </Typography.Paragraph>\n        </Info>\n        <p>\n            Once your credential provided, you will need to select the repository where you want\n            to save your tests. In general, it would make sense to save those tests in the same\n            repository as the website you are testing. You can switch from one\n            repository to the other at anytime.\n        </p>\n    </>\n);\n","export const coverStyle = {\n    textAlign: 'center',\n    // borderBottom: '1px solid #888',\n}\n\nexport const imgStyle = {\n    width: 300,\n}\n\nexport const cardImgMargin = 10;\n\nexport const cardStyle = {\n    width: imgStyle.width + cardImgMargin*2,\n    marginBottom: 10,\n};\n\nexport const masonryStyle = {\n    paddingTop: 10,\n    paddingBottom: 10,\n}\n\nexport const masonryOptions = {\n    gutter: 10,\n    // percentPosition: true,\n    fitWidth: true,\n}\n\nexport const iconTheme = 'outlined'; // 'twoTone'\n","import React from 'react';\nimport Alert from 'antd/lib/alert';\n\ninterface Props {\n    message?: string;\n    description: string;\n}\nexport const ErrorHandler = ({ message = 'Something went wrong', description }: Props) => (\n    <Alert\n        message={message}\n        description={description}\n        type=\"warning\"\n        showIcon\n    />\n);","import React from 'react';\nimport { PageData } from '../server/typing';\n\nimport { onSearch, searchStyle, onFilter } from './search';\nimport Select from 'antd/lib/select';\n\nconst { Option } = Select;\n\nexport interface Filters {\n    [key: string]: string;\n}\n\ninterface Props {\n    withFilters?: Filters;\n    response: PageData[],\n    children: (pages: PageData[] | undefined) => React.ReactNode,\n}\nexport const Search = ({ children, response, withFilters }: Props) => {\n    const [pages, setPages] = React.useState<PageData[]>();\n    const [selectedFilters, setSelectedFilters] = React.useState<string[]>([]);\n    const [pagesFiltered, setPagesFiltered] = React.useState<PageData[]>();\n    React.useEffect(() => {\n        setPages(response);\n        onFilter(setPagesFiltered, response, setSelectedFilters)(selectedFilters);\n    }, [response, setSelectedFilters, selectedFilters]);\n\n    return (\n        <>\n            <Select\n                mode=\"tags\"\n                onChange={onFilter(setPagesFiltered, pages, setSelectedFilters)}\n                tokenSeparators={[',']}\n                style={searchStyle}\n                placeholder=\"Search\"\n                filterOption={false}\n                onSearch={onSearch(setPagesFiltered, pages, selectedFilters)}\n            >\n                { !!withFilters && Object.keys(withFilters).map(key => <Option key={key}>{withFilters[key]}</Option>) }\n            </Select>\n            {children(pagesFiltered)}\n        </>\n    );\n}\n","import { unix } from 'moment';\n\nexport const timestampToString =\n    (timestamp: string) => unix(parseInt(timestamp, 10)).calendar()\n\nexport const sigDig = (n: number, precision = 1) => {\n    if (!n) {\n        return n;\n    }\n    const fix = (precision - 1) - Math.floor(Math.log(n) / Math.log(10));\n    return n.toFixed(fix);\n}","import React from 'react';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport Button from 'antd/lib/button';\n\nimport { setZoneStatus } from '../server/service';\nimport { PageData, ZoneStatus } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nconst buttonStyle = {\n    marginLeft: 5,\n    marginRight: 5,\n}\n\ninterface Props {\n    index: number;\n    timestamp: string;\n    id: string;\n    projectId: string;\n    storageType: StorageType;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nconst onSetStatus = (\n    status: ZoneStatus,\n    { timestamp, id, index, projectId, setPages, storageType }: Props,\n) => async () => {\n    try {\n        const pages = await setZoneStatus(storageType, projectId, timestamp, id, index, status);\n        setPages(pages);\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nexport const DiffImageButtons = (props: Props) => {\n    return (\n        <>\n            <Button\n                style={buttonStyle}\n                icon=\"check\"\n                size=\"small\"\n                onClick={onSetStatus(ZoneStatus.valid, props)}>Valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"pushpin\"\n                size=\"small\"\n                onClick={onSetStatus(ZoneStatus.zonePin, props)}>Always valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"warning\"\n                size=\"small\"\n                type=\"danger\"\n                onClick={onSetStatus(ZoneStatus.report, props)}>Report</Button>\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport Popover from 'antd/lib/popover';\n\nimport { DiffImageButtons } from './DiffImageButtons';\nimport { Zone, PageData, ZoneStatus } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nexport const getColorByStatus = (status: ZoneStatus) => {\n    if (status === ZoneStatus.valid || status === ZoneStatus.zonePin) {\n        return '#0F0'; //'green';\n    } else if (status === ZoneStatus.report) {\n        return 'red';\n    }\n    return 'yellow';\n}\n\nconst zoneStyle = (\n    { xMin, yMin, xMax, yMax }: any,\n    ratio: number,\n    width: number,\n    marginLeft: number,\n    img: string | undefined,\n    over: boolean,\n    status: ZoneStatus,\n) => {\n    const top = yMin / ratio - 1;\n    const left = xMin / ratio - 1;\n    return ({\n        width: (xMax - xMin) / ratio + 2,\n        height: (yMax - yMin) / ratio + 2,\n        // width: 200,\n        // height: 100,\n        top,\n        left: left + marginLeft,\n        border: `1px solid ${getColorByStatus(status)}`,\n        position: 'absolute',\n        backgroundImage: over ? `url(\"${img}\")` : 'none',\n        backgroundPosition: `${-(left + 1)}px ${-(top + 1)}px`,\n        backgroundSize: width,\n    });\n}\n\ninterface Props {\n    storageType: StorageType;\n    thumb: string;\n    timestamp: string;\n    id: string;\n    zone: Zone;\n    originalWidth: number;\n    index: number;\n    status: ZoneStatus;\n    width: number;\n    marginLeft: number;\n    projectId: string;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n};\n\nexport const DiffZone = ({ storageType, thumb, setPages, projectId, timestamp, id, index, originalWidth, zone, status, width, marginLeft }: Props) => {\n    const [hover, setHover] = useState(false);\n    const ratio = originalWidth / width;\n    return (\n        <Popover key={`${id}-${index}`} content={(\n            <DiffImageButtons\n                storageType={storageType}\n                index={index}\n                timestamp={timestamp}\n                id={id}\n                projectId={projectId}\n                setPages={setPages}\n            />\n        )} trigger=\"click\">\n            <div\n                style={zoneStyle(zone, ratio, width, marginLeft, thumb, hover, status) as any}\n                onMouseOver={() => setHover(true)}\n                onMouseOut={() => setHover(false)}\n            />\n        </Popover>\n    );\n}\n","import React from 'react';\nimport { PngDiffDataZone, ZoneStatus } from '../server/typing';\n\nimport { getColorByStatus } from '../diff/DiffZone';\n\nconst getCountZonesPerStatus = (zones: any, perStatus: ZoneStatus[]) =>\n    zones.filter(({ status }: any) => perStatus.includes(status)).length\n\nexport const PageImageDiffZone = ({ zones }: {\n    zones: PngDiffDataZone[]\n}) => (\n        <p>\n            <b>Zone:</b>&nbsp;\n            {[\n                [ZoneStatus.diff],\n                [ZoneStatus.valid, ZoneStatus.zonePin],\n                [ZoneStatus.report],\n            ].map(([status, ...more]) => (\n                <React.Fragment key={status}>\n                    <span style={{\n                        marginLeft: 10,\n                        color: getColorByStatus(status)\n                    }}>■</span> <b>{getCountZonesPerStatus(zones, [status, ...more])}</b> {status}\n                </React.Fragment>\n            ))}\n        </p>\n    );","import React from 'react';\nimport Icon from 'antd/lib/icon';\n\nimport { iconTheme } from './pageStyle';\nimport { PngDiffData } from '../server/typing';\nimport { sigDig } from '../utils';\nimport { PageImageDiffZone } from './PageImageDiffZone';\n\nexport const PageImageDiff = ({ diff }: {\n    diff: PngDiffData;\n}) => (\n    <>\n        <p>\n            <Icon type=\"picture\" theme={iconTheme} />&nbsp;\n                    Pixel diff ratio: {sigDig(diff.pixelDiffRatio)}\n        </p>\n        {diff.zones && diff.zones.length > 0 &&\n            <PageImageDiffZone zones={diff.zones} />\n        }\n    </>\n);","import React from 'react';\nimport Tag from 'antd/lib/tag';\nimport Icon from 'antd/lib/icon';\n\nimport { iconTheme } from './pageStyle';\nimport { PngDiffData } from '../server/typing';\nimport { PageImageDiff } from './PageImageDiff';\n\nexport const PageImage = ({ diff }: {\n    diff?: PngDiffData;\n}) => (!diff)\n        ? (\n            <div>\n                <Icon type=\"picture\" theme={iconTheme} />&nbsp;\n                New screenshot <Tag color=\"green\">New</Tag>\n            </div>\n        ) : (\n            <PageImageDiff diff={diff} />\n        );","import React from 'react';\nimport Alert from 'antd/lib/alert';\nimport Icon from 'antd/lib/icon';\nimport { PngDiffData } from '../server/typing';\n// import * as Convert from 'ansi-to-html';\n\nimport { iconTheme } from './pageStyle';\nimport { PageImage } from './PageImage';\n\nconst Convert = require('ansi-to-html');\nconst convert = new Convert({\n    fg: '#333',\n});\n\nconst alertStyle = {\n    marginBottom: 10,\n}\n\ninterface Props {\n    pageError: any;\n    url: string;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n}\n\nexport const Page = ({ pageError, url, png }: Props) => {\n    return (\n        <>\n            {pageError && <Alert message={\n                <div dangerouslySetInnerHTML={{ __html: convert.toHtml(pageError) }} />\n            } type=\"warning\" style={alertStyle} />}\n            <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n            {png\n                ? <PageImage diff={png.diff} />\n                : <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { setZonesStatus } from '../server/service';\nimport { PageData, ZoneStatus } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nconst onClick = (\n    { timestamp, id, status, projectId, setPages, storageType }: Props,\n) => async () => {\n    try {\n        const pages = await setZonesStatus(storageType, projectId, timestamp.toString(), id, status);\n        setPages(pages);\n        message.success(`All zone are set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    storageType: StorageType;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    status: ZoneStatus;\n    type: string;\n}\nexport const PagesActionZone = (props: Props) => {\n    const { status, type } = props;\n    return (\n        <Icon type={type} title={`Set all zone to \"${status}\".`} onClick={onClick(props)} />\n    );\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { pin } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\n\nconst onPin = ({ storageType, projectId, timestamp, id }: Props) => async () => {\n    try {\n        const hide = message.loading('Pin in progress..', 0);\n        await pin(storageType, projectId, timestamp.toString(), id);\n        hide();\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    timestamp: string,\n    id: string,\n    projectId: string,\n    storageType: StorageType,\n}\n\nconst PagesActionPin = (props: Props) =>\n    <Icon\n        type=\"pushpin\"\n        title=\"pin as reference for comparison\"\n        onClick={onPin(props)}\n    />;\n\nexport default function(props: Props) {\n    return PagesActionPin(props);\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n    coverStyle,\n    imgStyle,\n} from '../pages/pageStyle';\n\nimport { getThumbnail } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\nexport interface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    width?: number;\n    onImg?: () => void;\n    marginLeft: number;\n};\n\nexport const DiffImage = ({\n    storageType,\n    projectId,\n    timestamp,\n    id,\n    onImg = () => { },\n    width = imgStyle.width,\n    children\n}: Props & React.PropsWithChildren<any>) => {\n    const [thumb, setThumb] = useState<string>();\n    const load = async () => {\n        setThumb(await getThumbnail(storageType, projectId, timestamp, id, width));\n        onImg();\n    }\n    useEffect(() => { load(); }, []);\n    return thumb ? (\n        <div style={coverStyle as any}>\n            {children}\n            <img style={{ width }} alt=\"\" src={thumb} />\n        </div>) : null;\n}\n","import React from 'react';\n\nimport {\n    imgStyle,\n} from '../pages/pageStyle';\n\nimport { DiffZone } from './DiffZone';\nimport { PngDiffDataZone, PageData } from '../server/typing';\nimport { Props as DiffImageProps, DiffImage } from './DiffImage';\nimport { useAsyncCacheWatch } from 'react-async-cache';\nimport { getThumbnail } from '../server/service';\n\ninterface Props {\n    zones?: PngDiffDataZone[];\n    originalWidth?: number;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n};\n\nexport const DiffImageWithZone = ({\n    storageType,\n    projectId,\n    timestamp,\n    id,\n    zones,\n    originalWidth = 0,\n    width = imgStyle.width,\n    setPages,\n    marginLeft,\n    ...props\n}: Props & DiffImageProps) => {\n    // we might not even need useAsyncCacheWatch\n    const { call, response: thumb, cache } = useAsyncCacheWatch(getThumbnail, storageType, projectId, 'pin', id, width);\n\n    React.useEffect(() => {\n        if (zones && !cache()) {\n            call();\n        }\n    }, [zones]);\n\n    return (\n        <DiffImage storageType={storageType} projectId={projectId} timestamp={timestamp} id={id} width={width} {...props}>\n            {zones?.map(({ zone, status }: PngDiffDataZone, index: number) =>\n                <DiffZone\n                    storageType={storageType}\n                    thumb={thumb}\n                    projectId={projectId}\n                    timestamp={timestamp}\n                    id={id}\n                    width={width}\n                    index={index}\n                    originalWidth={originalWidth}\n                    marginLeft={marginLeft}\n                    status={status}\n                    zone={zone}\n                    key={`zone-${id}-${index}`}\n                    setPages={setPages}\n                />)\n            }\n        </DiffImage>\n    );\n};\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport Modal from 'antd/lib/modal';\nimport { PngDiffData, PageData } from '../server/typing';\nimport { Page } from './Page';\nimport { DiffImageWithZone } from '../diff/DiffImageWithZone';\nimport { StorageType } from '../server/storage.typing';\n\nconst onClick = (setVisible: React.Dispatch<React.SetStateAction<boolean>>) => () => {\n    setVisible(true);\n}\n\nconst onCancel = (setVisible: React.Dispatch<React.SetStateAction<boolean>>) => () => {\n    setVisible(false);\n}\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    url: string;\n    pageError: any;\n    png: {\n        width: number;\n        diff?: PngDiffData;\n    };\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nexport const PagesActionFullscreen = ({ storageType, setPages, projectId, timestamp, id, png, url, pageError }: Props) => {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    return (\n        <>\n            <Modal\n                title=\"\"\n                visible={visible}\n                onCancel={onCancel(setVisible)}\n                footer={null}\n                width={png.width + 40}\n            >\n                <div style={{ position: \"relative\" }}>\n                    <DiffImageWithZone\n                        storageType={storageType}\n                        setPages={setPages}\n                        projectId={projectId}\n                        timestamp={timestamp}\n                        id={id}\n                        zones={png.diff && png.diff.zones}\n                        originalWidth={png.width}\n                        width={png.width}\n                        marginLeft={0}\n                    />\n                    <Page url={url} pageError={pageError} png={png} />\n                </div>\n            </Modal>\n            <Icon type=\"fullscreen\" title=\"fullscreen\" onClick={onClick(setVisible)} />\n        </>\n    );\n}\n","import React from 'react';\nimport { PngDiffData, PageData, ZoneStatus } from '../server/typing';\n\nimport { PagesActionZone } from './PagesActionZone';\nimport PagesActionPin from './PagesActionPin';\nimport { PagesActionFullscreen } from './PagesActionFullscreen';\nimport { StorageType } from '../server/storage.typing';\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    url: string;\n    pageError: any;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nexport const PagesActions = ({ storageType, setPages, projectId, timestamp, id, png, url, pageError }: Props) => [\n    ...[png && <PagesActionFullscreen storageType={storageType} setPages={setPages} projectId={projectId} png={png} id={id} timestamp={timestamp} url={url} pageError={pageError} />],\n    <PagesActionZone storageType={storageType} type=\"check\" setPages={setPages} projectId={projectId}  timestamp={timestamp} id={id} status={ZoneStatus.valid} />,\n    <PagesActionZone storageType={storageType} type=\"warning\" setPages={setPages} projectId={projectId} timestamp={timestamp} id={id} status={ZoneStatus.report} />,\n    <PagesActionPin storageType={storageType} projectId={projectId} timestamp={timestamp} id={id} />,\n    // <Icon type=\"ellipsis\" title=\"more\" />,\n];\n","import React from 'react';\nimport Card from 'antd/lib/card';\nimport Spin from 'antd/lib/spin';\nimport Masonry from 'react-masonry-component';\n\nimport {\n    masonryStyle,\n    masonryOptions,\n    cardStyle,\n    cardImgMargin,\n} from './pageStyle';\nimport { PageData } from '../server/typing';\nimport { getPages } from '../server/service';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { Search } from '../search/Search';\nimport { Page } from './Page';\nimport { PagesActions } from './PagesActions';\nimport { availableFilters } from '../search/search';\nimport { setMasonry, onMasonryImg } from '../common/refreshMasonry';\nimport { DiffImageWithZone } from '../diff/DiffImageWithZone';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    lastUpdate: number;\n}\n\nexport const Pages = ({ projectId, timestamp, lastUpdate, storageType }: Props) => {\n    const { result: pages, error, setResult: setPages } = useAsync<PageData[]>(\n        () => getPages(storageType, projectId, timestamp),\n        [lastUpdate],\n    );\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n\n    return (\n        <Search response={pages} withFilters={availableFilters}>\n            {(pagesFiltered) => pagesFiltered ? (\n                <Masonry\n                    style={masonryStyle}\n                    options={masonryOptions}\n                    ref={(c: any) => { setMasonry(c && c.masonry); }}\n                >\n                    {\n                        pagesFiltered.map(({ id, url, png, error: pageError }: PageData) => (\n                            <Card\n                                key={id}\n                                style={cardStyle}\n                                cover={png && <DiffImageWithZone\n                                    storageType={storageType}\n                                    projectId={projectId}\n                                    timestamp={timestamp}\n                                    id={id}\n                                    zones={png.diff && png.diff.zones}\n                                    originalWidth={png.width}\n                                    onImg={onMasonryImg}\n                                    setPages={setPages}\n                                    marginLeft={cardImgMargin}\n                                />}\n                                actions={PagesActions({ storageType, setPages, projectId, id, timestamp, png, url, pageError })}\n                            >\n                                <Page url={url} pageError={pageError} png={png} />\n                            </Card>\n                        ))\n                    }\n                </Masonry >\n            ) : <Spin />\n            }\n        </Search>);\n}\n","import React from 'react';\nimport Switch from 'antd/lib/switch';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { setStatus } from '../server/service';\nimport { Crawler } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nconst onChange = (\n    storageType: StorageType,\n    projectId: string,\n    timestamp: string,\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>,\n) => async (value: boolean) => {\n    try {\n        const status = value ? 'done' : 'review';\n        const crawler = await setStatus(storageType, projectId, timestamp, status);\n        setCrawler(crawler);\n        message.success(`Status set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n    timestamp: string;\n    status: string;\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>;\n}\nexport const SwitchStatus = ({ storageType, timestamp, status, projectId, setCrawler }: Props) => {\n    return <Switch\n        checkedChildren=\"done\"\n        unCheckedChildren=\"review\"\n        checked={status === 'done'}\n        onChange={onChange(storageType, projectId, timestamp, setCrawler)}\n    />;\n}","import React from 'react';\nimport { useAsyncCacheWatch } from 'react-async-cache';\n\nimport notification from 'antd/lib/notification';\nimport { loadProject } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\nimport { Project } from '../server/typing';\n\nexport const useProject = (storageType: StorageType, projectId: string) => {\n    const {\n        call,\n        response: project,\n        update: setProject,\n        error,\n        cache,\n    } = useAsyncCacheWatch<Project>(loadProject, storageType, projectId);\n\n    React.useEffect(() => {\n        if (!cache()) {\n            call();\n        }\n    }, [storageType, projectId, cache, call]);\n    if (error) {\n        notification['warning']({\n            message: 'Something went wrong while loading project.',\n            description: error.toString(),\n        });\n    }\n    return {\n        project,\n        setProject,\n    };\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { getProjectRoute } from '../routes';\nimport { useProject } from './useProject';\nimport { StorageType } from '../server/storage.typing';\n\ninterface Props {\n    projectId: string;\n    storageType: StorageType;\n}\n\nexport const ProjectName = ({\n    projectId,\n    storageType,\n}: Props) => {\n    const { project } = useProject(storageType, projectId);\n    return !project ? null : (\n        <p>\n            <b>Project:</b> <Link to={getProjectRoute(storageType, project.id)}>\n                {project.name}\n            </Link>\n        </p>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport Progress from 'antd/lib/progress';\nimport Icon from 'antd/lib/icon';\nimport { Crawler, Browser } from '../server/typing';\nimport { duration } from 'moment';\nimport 'moment-duration-format';\n\nimport { timestampToString } from '../utils';\nimport { SwitchStatus } from './SwitchStatus';\nimport { getViewportName } from '../viewport';\nimport { ProjectName } from '../projects/ProjectName';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Title } = Typography;\n\nconst warningStyle = {\n    color: '#faad29',\n};\n\nconst limitStyle = {\n    color: '#999',\n    fontSize: 11,\n};\n\ninterface Props {\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>;\n    crawler: Crawler;\n    projectId: string;\n    storageType: StorageType;\n}\n\n// need to flatten props and use react memo\nexport const CrawlerInfo = ({\n    crawler: {\n        timestamp,\n        url,\n        browser,\n        diffZoneCount,\n        errorCount,\n        status,\n        urlsCount,\n        inQueue,\n        startAt,\n        lastUpdate,\n        limit,\n        viewport,\n    },\n    projectId,\n    storageType,\n    setCrawler,\n}: Props) => {\n    const total = urlsCount + inQueue;\n    const percent = Math.floor(urlsCount / total * 100);\n    const screen = getViewportName(viewport);\n    return (\n        <>\n            <Title level={3}>{timestampToString(timestamp)}</Title>\n            {(diffZoneCount > 0 || errorCount > 0)\n                && <p><SwitchStatus storageType={storageType} setCrawler={setCrawler} projectId={projectId} status={status} timestamp={timestamp} /></p>}\n            <ProjectName projectId={projectId} storageType={storageType} />\n            <p><b>URL:</b> {url}</p>\n            <p><b>Browser:</b> {browser || Browser.ChromePuppeteer}</p>\n            <p><b>Screen:</b> {screen}</p>\n            <p>\n                <b>URL crawled:</b> {urlsCount}\n                {limit !== undefined && limit > 0 &&\n                    <span style={limitStyle}> (with limit set to {limit})</span>\n                }\n            </p>\n            <p><b>Duration:</b> {duration(lastUpdate - startAt).format('h [hrs], m [min], s [sec]')}</p>\n            {inQueue > 0 && <>\n                <Progress percent={percent} />\n                <p><b>In queue:</b> {inQueue}</p>\n            </>}\n            {errorCount > 0 &&\n                <p style={warningStyle}>\n                    <Icon type=\"exclamation-circle\" /> {errorCount} error(s) founds\n                </p>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { subscrib, unsubscrib } from 'isomor';\n\nimport { Pages } from '../pages/Pages';\nimport { CrawlerInfo } from './CrawlerInfo';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { useAsync } from '../hook/useAsync';\nimport { Crawler } from '../server/typing';\nimport { getCrawler } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\nimport { useThisDoc } from '../doc/useDoc';\n\nexport const CrawlerResults = ({\n    match: { params: { timestamp, projectId, storageType } },\n}: RouteComponentProps<{ timestamp: string, projectId: string, storageType: StorageType }>) => {\n    useThisDoc();\n    const { result: crawler, error, setResult: setCrawler } = useAsync<Crawler>(\n        () => getCrawler(storageType, projectId, timestamp)\n    );\n    React.useEffect(() => {\n        const id = subscrib(setCrawler);\n        return () => unsubscrib(id);\n    }, [crawler, setCrawler]);\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    const lastUpdate = crawler?.lastUpdate;\n    return crawler ? (\n        <>\n            <CrawlerInfo\n                crawler={crawler}\n                projectId={projectId}\n                storageType={storageType}\n                setCrawler={setCrawler}\n            />\n            <Pages storageType={storageType} timestamp={timestamp} lastUpdate={lastUpdate!} projectId={projectId} />\n        </>\n    ) : <Spin />;\n}\n","import React from 'react';\nimport Card from 'antd/lib/card';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport Popconfirm from 'antd/lib/popconfirm';\n\nimport {\n    cardStyle,\n    iconTheme,\n} from '../pages/pageStyle';\nimport { DiffImage } from '../diff/DiffImage';\nimport { PngDiffData, Viewport, PageData } from '../server/typing';\nimport { Link } from 'react-router-dom';\nimport { getCodeRoute } from '../routes';\nimport { getViewportName } from '../viewport';\nimport { removePin } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\n\nconst handleDelete = (\n    storageType: StorageType,\n    projectId: string,\n    id: string,\n    setPins: React.Dispatch<React.SetStateAction<PageData[]>>,\n) => async () => {\n    const hide = message.loading('Delete in progress..', 0);\n    const pins = await removePin(storageType, projectId, id);\n    setPins(pins);\n    hide();\n}\n\ninterface Props {\n    projectId: string;\n    timestamp: string;\n    storageType: StorageType,\n    id: string;\n    url: string;\n    setPins: React.Dispatch<React.SetStateAction<PageData[]>>;\n    viewport?: Viewport,\n    onImg: () => void;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n}\n\nexport const PinPage = ({ storageType, projectId, timestamp, id, url, viewport, onImg, png, setPins }: Props) => (\n    <Card\n        style={cardStyle}\n        cover={png && <DiffImage timestamp={timestamp} id={id} onImg={onImg} projectId={projectId} storageType={storageType} />}\n        actions={[\n            <Popconfirm\n                title=\"Are you sure delete this pin?\"\n                onConfirm={handleDelete(storageType, projectId, id, setPins)}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"delete\" title={`Delete pin`} />\n            </Popconfirm>,\n            (<Link to={{\n                pathname: getCodeRoute(storageType, projectId, id),\n                state: { pattern: url }\n            }}>\n                <Icon type=\"code\" title={`Insert code while crawling`} />\n            </Link>),\n        ]}\n    >\n        <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n        {!png && <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>}\n        {viewport && <p><Icon type=\"picture\" theme={iconTheme} /> {getViewportName(viewport)}</p>}\n    </Card>\n);\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Masonry from 'react-masonry-component';\n\nimport {\n    masonryStyle,\n    masonryOptions,\n} from '../pages/pageStyle';\nimport { PageData } from '../server/typing';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { PinPage } from './PinPage';\nimport { Search } from '../search/Search';\nimport { setMasonry, onMasonryImg } from '../common/refreshMasonry';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { ProjectName } from '../projects/ProjectName';\nimport { useAsync } from '../hook/useAsync';\nimport { getPins } from '../server/service';\nimport { StorageType } from '../server/storage.typing';\nimport { useThisDoc } from '../doc/useDoc';\n\nconst { Title } = Typography;\n\nexport const Pins = ({\n    match: { params: { projectId, storageType } },\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    useThisDoc();\n    const { result, error, setResult: setPins } = useAsync<PageData[]>(\n        () => getPins(storageType, projectId)\n    );\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n\n    return (\n        <>\n            <Title level={3}>Pins</Title>\n            <ProjectName projectId={projectId} storageType={storageType} />\n            <Search response={result}>\n                {(pins) => pins ? (\n                    <Masonry\n                        style={masonryStyle}\n                        options={masonryOptions}\n                        ref={(c: any) => { setMasonry(c && c.masonry); }}\n                    >\n                        {pins.map(({ id, url, png, viewport, timestamp }: PageData) => (\n                            <PinPage\n                                projectId={projectId}\n                                timestamp={timestamp}\n                                id={id}\n                                key={id}\n                                url={url}\n                                setPins={setPins}\n                                png={png}\n                                viewport={viewport}\n                                onImg={onMasonryImg}\n                                storageType={storageType}\n                            />\n                        ))}\n                    </Masonry>\n                ) : <Spin />\n                }\n            </Search>\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\n\nimport { Info } from '../common/Info';\n\nconst { Paragraph, Text } = Typography;\n\nexport const CodeInfo = ({full = true}) => (\n    <Info>\n        <Paragraph>\n            Inject some code in the crawler while parsing the page. This code will\n            be executed just after the page finish loaded, before to make the screenshot and\n            before extracting the links. {full && <>You need to export a function that will take as\n            first parameter the <Text code>page</Text> coming from Puppeteer.</>}\n        </Paragraph>\n        {full && <Paragraph>\n            <Text code>module.exports = async (page) => ...some code</Text>\n        </Paragraph>}\n    </Info>\n);\n","import { cardStyle } from \"../pages/pageStyle\";\n\nexport const aceEditorStyle = {\n    border: '1px solid #EEE',\n    marginBottom: 15,\n    width: 'auto',\n}\n\nexport const cardRightStyle = {\n    ...cardStyle,\n    float: 'left' as 'left',\n}\n\nexport const buttonBarStyle = {\n    marginBottom: 15,\n}\n\nexport const buttonStyle = {\n    marginRight: 10,\n}\n\nexport const inputStyle = {\n    maxWidth: 500,\n    margin: '0px 0px 10px 0px',\n}\n","import React from 'react';\nimport Input from 'antd/lib/input';\nimport notification from 'antd/lib/notification';\nimport Icon from 'antd/lib/icon';\nimport Button from 'antd/lib/button';\nimport message from 'antd/lib/message';\nimport Dropdown from 'antd/lib/dropdown';\nimport Typography from 'antd/lib/typography';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport { Code } from '../server/typing';\n\nimport { setCode } from '../server/service';\nimport { codeSnippet } from './CodeSnippet';\nimport { buttonBarStyle, buttonStyle, inputStyle } from './codeStyle';\nimport { Info } from '../common/Info';\nimport { Location } from 'history';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Paragraph } = Typography;\n\ninterface FormInput extends HTMLFormElement {\n    name: string,\n    pattern: string,\n}\n\nconst onPlay = () => {\n    message.warn('To be implemented.', 2);\n}\n\nconst save = async (\n    storageType: StorageType,\n    projectId: string,\n    id: string,\n    source: string,\n    info: FormInput,\n) => {\n    try {\n        const hide = message.loading('Saving in progress...', 0);\n        await setCode(storageType, projectId, {\n            id,\n            source,\n            ...info,\n        });\n        hide();\n        message.success('Code saved.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst handleSubmit = (\n    storageType: StorageType,\n    projectId: string,\n    id: string,\n    source: string,\n    validateFields: any,\n) => (event: React.FormEvent<FormInput>) => {\n    event.preventDefault();\n    validateFields((err: any, info: FormInput) => {\n        if (!err) {\n            save(storageType, projectId, id, source, info);\n        }\n    });\n}\n\ntype Props = FormComponentProps & {\n    storageType: StorageType;\n    projectId: string;\n    id: string;\n    code: Code;\n    location: Location<{ pattern: string }>;\n    setSource: (source: string) => void;\n};\n\nconst CodeFormComponent = ({\n    storageType,\n    projectId,\n    setSource,\n    id,\n    code,\n    form: { getFieldDecorator, validateFields },\n    location: { state },\n}: Props) => {\n    return (\n        <Form onSubmit={handleSubmit(storageType, projectId, id, code.source, validateFields)}>\n            <Form.Item style={inputStyle}>\n                {getFieldDecorator('name', {\n                    initialValue: code.name || '',\n                })(\n                    <Input addonBefore=\"Name\" />\n                )}\n            </Form.Item>\n            <Form.Item style={inputStyle}>\n                {getFieldDecorator('pattern', {\n                    rules: [{ required: true, message: 'Please input a pattern!' }],\n                    initialValue: code.pattern || (state && state.pattern) || '',\n                })(\n                    <Input addonBefore=\"Pattern\" />\n                )}\n            </Form.Item>\n            <Info>\n                <Paragraph>\n                    Pattern is using <a href=\"https://www.npmjs.com/package/minimatch\" target=\"_blank\" rel=\"noopener noreferrer\">minimatch</a> to\n                    match the urls to inject the code.\n                    It works by converting glob expressions into JavaScript RegExp objects.\n                </Paragraph>\n            </Info>\n            <div style={buttonBarStyle}>\n                <Button icon=\"save\" htmlType=\"submit\" style={buttonStyle}>Save</Button>\n                <Button icon=\"caret-right\" onClick={onPlay} style={buttonStyle}>Preview</Button>\n                <Dropdown overlay={codeSnippet(setSource)}>\n                    <Button style={buttonStyle}>\n                        Code snippet <Icon type=\"down\" />\n                    </Button>\n                </Dropdown>\n            </div>\n        </Form>\n    );\n}\n\nexport const CodeForm = Form.create<Props>({ name: 'code' })(CodeFormComponent);\n","import React from 'react';\nimport Menu from 'antd/lib/menu';\n\nexport const codeSnippet = (setCode: (source: string) => void) => (\n    <Menu>\n        <Menu.Item\n            key=\"1\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    await page.evaluate(() => {\n        const div = document.createElement(\"div\");\n        div.innerHTML = \"Test-crawler is awesome!\";\n        document.body.insertBefore(div, document.body.firstChild);\n    });\n}`\n                );\n            }}\n        >\n            Test-crawler is awesome\n        </Menu.Item>\n        <Menu.Item\n            key=\"2\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    return await page.evaluate(() => {\n        Array.from(document.body.getElementsByTagName(\"a\"))\n             .filter(a => !a.href)\n             .forEach(a => a.click());\n        return Array.from(document.links).map(\n            link => link.href.replace('/?', '/iframe.html?')\n        );\n    });\n}`\n                );\n            }}\n        >\n            Storybook\n        </Menu.Item>\n        <Menu.Item\n            key=\"3\"\n            onClick={() => {\n                setCode(\n`// expect library from jest is installed by default\n// but you can use any assertion tool of your choice\n// just install it and use it here :D\nconst expect = require('expect');\n\nmodule.exports = async function run(page) {\n  await expect(page.title()).resolves.toMatch('React App');\n  expect('a').toBe('b'); // fail\n}`\n                );\n            }}\n        >\n            Expect assetion example\n        </Menu.Item>\n    </Menu>\n);","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Form from 'antd/lib/form';\nimport AceEditor from 'react-ace';\nimport { RouteComponentProps } from 'react-router';\nimport { Code as CodeType } from '../server/typing';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\n\nimport { getCode } from '../server/service';\nimport { CodeInfo } from './CodeInfo';\nimport { aceEditorStyle } from './codeStyle';\nimport { CodeForm } from './CodeFrom';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { ProjectName } from '../projects/ProjectName';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\nimport { useThisDoc } from '../doc/useDoc';\n\nconst { Title } = Typography;\n\nconst setSource = (\n    code: CodeType,\n    setCode: React.Dispatch<React.SetStateAction<CodeType>>,\n) => (source: string) => {\n    setCode({\n        ...code,\n        source,\n    })\n}\n\ntype Props = RouteComponentProps<{ id: string, projectId: string, storageType: StorageType }>;\n\nexport const Code = ({ match: { params: { id, projectId, storageType } }, location }: Props) => {\n    useThisDoc();\n    const { error, result: code, setResult: setCode } = useAsync<CodeType>(() => getCode(storageType, projectId, id));\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    // instead to getPin, there should be a special endpoint retriving a\n    // list of pages matching the pattern\n    // (when it is coming from pin, pattern should be already be filled out)\n    return (\n        <>\n            <Title level={3}>Add some code</Title>\n            {\n                code ? (\n                    <Form>\n                        <CodeInfo />\n                        <ProjectName projectId={projectId} storageType={storageType} />\n                        <CodeForm\n                            projectId={projectId}\n                            id={id}\n                            code={code}\n                            setSource={setSource(code, setCode)}\n                            location={location as any}\n                            storageType={storageType}\n                        />\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow\"\n                            onChange={setSource(code, setCode)}\n                            fontSize={14}\n                            value={code.source.length\n                                ? code.source\n                                : `module.exports = async function run(page) {\\n// your code\\n}`}\n                            style={aceEditorStyle}\n                        />\n                    </Form>\n                ) : <Spin />\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport Spin from 'antd/lib/spin';\n\nimport { getSettings, startCrawlers } from './server/service';\nimport Button from 'antd/lib/button';\nimport { useThisDoc } from './doc/useDoc';\n\nconst { Title } = Typography;\n\nconst load = async (\n    setSettings: React.Dispatch<any>,\n) => {\n    setSettings(await getSettings());\n}\n\nexport const Settings = () => {\n    const [settings, setSettings] = React.useState();\n\n    React.useEffect(() => { load(setSettings); }, []);\n    useThisDoc();\n\n    return (\n        <>\n            <Title level={3}>Settings</Title>\n            {settings ? (\n                <>\n                    <p><b>Dir:</b> {settings.dir}</p>\n                </>\n            ) : <Spin />}\n            <p>\n                <Button\n                    icon=\"caret-right\"\n                    size=\"small\"\n                    onClick={startCrawlers}\n                >\n                    Start crawlers\n                </Button>\n            </p>\n        </>\n    );\n}\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport List from 'antd/lib/list';\nimport Button from 'antd/lib/button';\nimport Typography from 'antd/lib/typography';\nimport { CodeInfoList } from '../server/typing';\n\nimport { getCodes } from '../server/service';\nimport { CodeInfo } from './CodeInfo';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { Link } from 'react-router-dom';\nimport { getCodeRoute } from '../routes';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\n\nconst { Title, Text } = Typography;\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n}\nexport const ForEachPage = ({ projectId, storageType }: Props) => {\n    const { error, result } = useAsync<CodeInfoList>(() => getCodes(storageType, projectId));\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    return (\n        <>\n            <Title level={4}>For each page</Title>\n            <CodeInfo full={false} />\n            {\n                result\n                    ? <List\n                        bordered\n                        dataSource={Object.values(result)}\n                        renderItem={({ id, name, pattern }) => (\n                            <List.Item\n                                actions={[\n                                    <Link to={getCodeRoute(storageType, projectId, id)}>\n                                        Edit\n                                    </Link>,\n                                ]}\n                            >\n                                <List.Item.Meta\n                                    title={\n                                        <Link to={getCodeRoute(storageType, projectId, id)}>\n                                            {name} <Text code>{pattern}</Text>\n                                        </Link>\n                                    }\n                                />\n                            </List.Item>\n                        )}\n                    />\n                    : <Spin />\n            }\n            <br />\n            <Link to={getCodeRoute(storageType, projectId, Math.floor(Date.now() / 1000).toString())}>\n                <Button icon=\"plus\" size=\"small\">New code</Button>\n            </Link>\n        </>\n    );\n}\n","import React from 'react';\nimport message from 'antd/lib/message';\nimport Typography from 'antd/lib/typography';\nimport Button from 'antd/lib/button';\nimport notification from 'antd/lib/notification';\nimport AceEditor from 'react-ace';\nimport { BeforeAfterType } from '../server/typing';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\n\nimport { getBeforeAfterCode, saveBeforeAfterCode } from '../server/service';\nimport { aceEditorStyle } from './codeStyle';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { useAsync } from '../hook/useAsync';\nimport { StorageType } from '../server/storage.typing';\nimport { Info } from '../common/Info';\n\nconst { Title, Paragraph } = Typography;\n\nconst onSave = (\n    code: string,\n    type: BeforeAfterType,\n    projectId: string,\n    storageType: StorageType,\n) => async () => {\n    try {\n        const hide = message.loading('Saving...', 0);\n        await saveBeforeAfterCode(storageType, projectId, type, code);\n        hide();\n        message.success('Code saved.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    type: BeforeAfterType;\n    projectId: string;\n    storageType: StorageType;\n    title: string;\n    info: string;\n    codeParam?: string;\n}\n\nexport const BeforeAfter = ({\n    type,\n    projectId,\n    storageType,\n    title,\n    info,\n    codeParam = '',\n}: Props) => {\n    const { error, result: code, setResult: setCode } = useAsync<string>(() => getBeforeAfterCode(storageType, projectId, type));\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    return (\n        <>\n            <Title level={4}>{title}</Title>\n            <Info>\n                <Paragraph>\n                    {info}\n                </Paragraph>\n            </Info>\n            <AceEditor\n                mode=\"javascript\"\n                theme=\"tomorrow\"\n                onChange={setCode}\n                fontSize={14}\n                value={!!code?.length\n                    ? code\n                    : `module.exports = async function run(${codeParam}) {\\n// your code\\n}`}\n                style={{ ...aceEditorStyle, height: 200 }}\n            />\n            <Button\n                icon=\"save\"\n                size=\"small\"\n                onClick={onSave(code, type, projectId, storageType)}\n            >\n                Save\n            </Button>\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport { BeforeAfterType } from '../server/typing';\n\nimport { StorageType } from '../server/storage.typing';\nimport { ForEachPage } from './ForEachPage';\nimport { BeforeAfter } from './BeforeAfter';\n\nconst { Title } = Typography;\n\ninterface Props {\n    storageType: StorageType;\n    projectId: string;\n}\nexport const Codes = ({ projectId, storageType }: Props) => {\n    return (\n        <>\n            <Title level={3}>Codes</Title>\n            <ForEachPage projectId={projectId} storageType={storageType} />\n            <br />\n            <br />\n            <BeforeAfter\n                type={BeforeAfterType.Before}\n                projectId={projectId}\n                storageType={storageType}\n                title=\"Before all\"\n                info=\"This script will run when the test-crawler is starting, to give you the possibility to setup a working environment, for example to start a test server.\"\n            />\n            <br />\n            <br />\n            <BeforeAfter\n                type={BeforeAfterType.After}\n                projectId={projectId}\n                storageType={storageType}\n                title=\"After all\"\n                info=\"This script will run when the test-crawler finish. You could for example use this script to send some notification.\"\n                codeParam=\"totalDiffCount, totalErrorCount\"\n            />\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport { Job } from '../server/typing';\nimport Progress from 'antd/lib/progress';\nimport List from 'antd/lib/list';\nimport { timestampToString } from '../utils';\n\ninterface Props {\n    jobs: Job[];\n    loadJobs: () => Promise<void>;\n    loadCrawlers: () => Promise<void>;\n}\n\nexport const ProjectJobs = ({ jobs, loadJobs, loadCrawlers }: Props) => {\n    const [jobInProgress, setJobInProgress] = React.useState(false);\n    React.useEffect(() => {\n        let timer: NodeJS.Timeout;\n        if (jobs?.length) {\n            !jobInProgress && setJobInProgress(true);\n            timer = setInterval(loadJobs, 30000); // 30 sec\n        } else if (jobInProgress) {\n            setJobInProgress(false);\n            loadCrawlers();\n        }\n        return () => clearInterval(timer);\n    }, [jobs, loadCrawlers, setJobInProgress, jobInProgress]);\n    return jobs?.length ? (\n        <List\n            itemLayout=\"horizontal\"\n            bordered\n            dataSource={jobs}\n            style={{ marginBottom: 10 }}\n            renderItem={({ status, startAt, stepsCount, stepsDone, currentStep, url }) => (\n                <List.Item\n                    actions={[\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            Open\n                        </a>,\n                    ]}\n                >\n                    <List.Item.Meta\n                        title={<span>CI job {timestampToString(startAt.toString())}</span>}\n                        description={<>\n                            {!!stepsCount && stepsDone !== undefined && <Progress\n                                percent={100 / stepsCount * stepsDone}\n                                size=\"small\"\n                                format={() => `${stepsDone} of ${stepsCount}`}\n                            />}\n                            <span><Typography.Text code>{status}</Typography.Text> {currentStep}</span>\n                        </>}\n                    />\n                </List.Item>\n            )}\n        />\n    ) : null;\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport { Project as ProjectType, Job, Browser } from '../server/typing';\nimport { saveProject, startCrawler, getJobs } from '../server/service';\nimport Spin from 'antd/lib/spin';\nimport { getViewportName } from '../viewport';\nimport Icon from 'antd/lib/icon';\nimport Checkbox, { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { History } from 'history';\nimport { getResultsRoute, getPinsRoute } from '../routes';\nimport Button from 'antd/lib/button';\nimport { useProject } from './useProject';\nimport { useCrawlers } from './useCrawlers';\nimport List from 'antd/lib/list';\nimport { timestampToString } from '../utils';\nimport { Codes } from '../code/Codes';\nimport { StorageType } from '../server/storage.typing';\nimport message from 'antd/lib/message';\nimport { ProjectJobs } from './ProjectJobs';\nimport { useAsync } from '../hook/useAsync';\nimport { useThisDoc } from '../doc/useDoc';\n\nconst onStart = (\n    history: History<any>,\n    projectId: string,\n    storageType: StorageType,\n    loadJobs: () => Promise<void>,\n    browser: Browser,\n) => async () => {\n    try {\n        const hide = message.loading('Starting crawlers', 0);\n        const { timestamp, redirect } = await startCrawler(storageType, projectId, browser);\n        if (redirect) {\n            setTimeout(loadJobs, 5000);\n            setTimeout(loadJobs, 10000);\n            notification.open({\n                duration: 10,\n                message: 'Test-crawler started',\n                description: 'Test-crawler is running the crawlers on a remote container. To see live progress click open:',\n                btn: (<a href={redirect} target=\"_blank\" rel=\"noopener noreferrer\">\n                    Open\n                </a>),\n            });\n        } else {\n            history.push(getResultsRoute(storageType, projectId, timestamp));\n        }\n        hide();\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst onAutoPinChange = (\n    storageType: StorageType,\n    { name, id, crawlerInput }: ProjectType,\n    setProject: (response: ProjectType) => Promise<void>,\n) => async ({ target: { checked } }: CheckboxChangeEvent) => {\n    const project = await saveProject(storageType, { ...crawlerInput, autopin: checked }, name, id);\n    setProject(project);\n}\n\nconst getCrawlerStatusIcon = (diffZoneCount: number, errorCount: number, status: string, inQueue: number) => {\n    if (inQueue > 0) {\n        return 'loading';\n    }\n    if (!diffZoneCount && errorCount === 0) {\n        return 'check';\n    }\n    if (status === 'done') {\n        return 'issues-close';\n    }\n    return 'exclamation-circle';\n}\n\nexport const Project = ({\n    match: { params: { projectId, storageType } },\n    history,\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    useThisDoc(Doc);\n    const { project, setProject } = useProject(storageType, projectId);\n    const { crawlers, loading, loadCrawlers } = useCrawlers(storageType, projectId);\n    const { result: jobs, call: loadJobs } = useAsync<Job[]>(() => getJobs(storageType, projectId));\n    const browser = project?.crawlerInput?.browser || Browser.ChromePuppeteer;\n    return (\n        <>\n            <Typography.Title level={3}>Project</Typography.Title>\n            {!project ? <Spin /> : <>\n                <p><b>Name:</b> {project.name}</p>\n                <p><b>ID:</b> {projectId}</p>\n                <p><b>URL:</b> {project.crawlerInput.url}</p>\n                <p><b>Browser:</b> {browser}</p>\n                <p><b>Screen:</b> {getViewportName(project.crawlerInput.viewport)}</p>\n                <p><b>Method:</b>\n                    {project.crawlerInput.method === 'urls'\n                        ? <> <Icon type=\"ordered-list\" /> URLs list</>\n                        : <> <Icon type=\"radar-chart\" /> Spider bot\n                            {!!project.crawlerInput.limit &&\n                                <span style={{ color: '#999', fontSize: 12 }}> (Limit: {project.crawlerInput.limit})</span>}\n                        </>\n                    }\n                </p>\n                <p>\n                    <Checkbox\n                        checked={project.crawlerInput.autopin}\n                        onChange={onAutoPinChange(storageType, project, setProject)}\n                    >\n                        Automatically pin new page founds.\n                    </Checkbox>\n                </p>\n                <p>\n                    <Button\n                        icon=\"caret-right\"\n                        size=\"small\"\n                        onClick={onStart(history, projectId, storageType, loadJobs, browser)}\n                    >\n                        Run\n                    </Button> &nbsp;\n                    <Link to={getPinsRoute(storageType, projectId)}>\n                        <Button\n                            icon=\"pushpin\"\n                            size=\"small\"\n                        >\n                            Pins\n                        </Button>\n                    </Link>\n                </p>\n                <ProjectJobs jobs={jobs} loadJobs={loadJobs} loadCrawlers={loadCrawlers} />\n                <List\n                    itemLayout=\"horizontal\"\n                    bordered\n                    loading={loading}\n                    dataSource={crawlers}\n                    renderItem={({ timestamp, diffZoneCount, errorCount, status, inQueue }) => (\n                        <List.Item\n                            actions={[\n                                <Link to={getResultsRoute(storageType, projectId, timestamp)}>\n                                    Open\n                                </Link>,\n                            ]}\n                        >\n                            <List.Item.Meta\n                                title={\n                                    <Link to={getResultsRoute(storageType, projectId, timestamp)}>\n                                        {timestampToString(timestamp)}\n                                    </Link>}\n                                description={<>\n                                    <Icon type={getCrawlerStatusIcon(diffZoneCount, errorCount, status, inQueue)} />\n                                    <span> Diff: {diffZoneCount} - Error: {errorCount} - In queue: {inQueue}</span>\n                                </>}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </>}\n            <br />\n            <Codes projectId={projectId} storageType={storageType} />\n        </>\n    );\n}\n\nconst Doc = () => (\n    <>\n        <p>\n            This page give you an overview of a selected project. From there you can see all the\n            crawlers that has been started and their results. To run a crawler click\n            on <Button icon=\"caret-right\" size=\"small\">Run</Button>\n        </p>\n        <p>\n            After clicking on the run button, you will be either redirected to the result page or\n            a job will appear above the list of crawler, this will depends of the crawling storage\n            you will use.\n        </p>\n        <Typography.Title level={4}>Codes</Typography.Title>\n        <p>\n            Under the list of crawlers, is a codes section. This will let you write your own code\n            to interact with the crawler when the job is running. There is different phases where\n            you can interact with the crawler: before, during and after crawling.\n        </p>\n        <p><b>Before all</b></p>\n        <p>\n            This script will run when the test-crawler is starting, to give you the possibility\n            to setup a working environment. This can be useful if you need to start a server to\n            run your test against it.\n        </p>\n        <p><b>For each page</b></p>\n        <p>\n            This give you the possibility to inject some code in the crawler while parsing the page.\n            This code will be executed just after the page finish loaded, before to make the\n            screenshot and before extracting the links. This can be really useful to manipulate the\n            page before making the screenshot. For example, if you have dynamic element in your\n            page, you can simply remove it. You could open some hidden element from an accordion.\n            Run some e2e assertion with Jest. There is so much possibility with this feature...\n        </p>\n        <p><b>After all</b></p>\n        <p>\n            This script will run when the test-crawler finish. This can be useful to send the\n            result to an API or in an email. In the following example, we will show you how\n            to send result in slack:\n        </p>\n        <pre>\n            <code>\n                {`\n// Need to install @slack/web-api where the crawler is running.\n// with local storage just do yarn add @slack/web-api\n// with remote storage like GitHub you will need to customize the CI job\nconst { WebClient } = require('@slack/web-api');\n\nconst token = 'api_slack_token';\n// Given some known conversation ID (representing a public channel, private channel, DM or group DM)\nconst conversationId = '...';\n\nmodule.exports = async function run(totalDiffCount, totalErrorCount) {\n    const web = new WebClient(token);\n    const result = await web.chat.postMessage({\n        text: \\`Hi, crawler finish his job. We found \\${totalDiffCount} diff(s) and \\${totalErrorCount} error(s).\\`,\n        channel: conversationId,\n    });\n}\n            `}\n            </code>\n        </pre>\n        <Typography.Title level={4}>Schedule</Typography.Title>\n        <p>\n            Right now, test-crawler doesn't offer scheduling out of the box but you can easily setup your own.\n            On your server you can use build-in feature, like cronjob on Linux. For that, just\n            use <Typography.Text code>test-crawler-cli --project the_id_of_your_project</Typography.Text>.\n        </p>\n        <p>\n            On GitHub, you can reuse the workflow generated by test-crawler\n            in <Typography.Text code>.github/workflows</Typography.Text>. Make a copy of the workflow\n            under a different name and define the event to trigger the run, see <a\n                href=\"https://help.github.com/en/actions/reference/events-that-trigger-workflows\"\n                target=\"_blank\" rel=\"noopener noreferrer\"\n            >documentation</a>. You need then to specify the project you want to run.\n        </p>\n        <pre>\n            <code>\n                {`\nname: Test-crawler schedule\n\non:\n  schedule:\n    # everyday at 01.00\n    - cron:  '* 1 * * *'\n\njobs:\n  test-crawler:\n    runs-on: macos-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run test-crawler\n      uses: apiel/test-crawler/actions/run@master\n      with:\n        projectId: put_here_id_of_the_project\n    - name: Push changes\n      uses: apiel/test-crawler/actions/push@master\n      with:\n        token: \\${{ secrets.GITHUB_TOKEN }}\n\n            `}\n            </code>\n        </pre>\n    </>\n);\n","import notification from 'antd/lib/notification';\nimport { getCrawlers } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\nimport { Crawler } from '../server/typing';\nimport { StorageType } from '../server/storage.typing';\n\nexport const useCrawlers = (storageType: StorageType, projectId: string) => {\n    const { result: crawlers, setResult: setCrawlers, error, loading, call: loadCrawlers } = useAsync<Crawler[]>(async () => {\n        const list = await getCrawlers(storageType, projectId);\n        return list.sort(({ timestamp: a }: any, { timestamp: b }: any) => parseInt(b, 10) - parseInt(a, 10));\n    });\n    if (error) {\n        notification['warning']({\n            message: 'Something went wrong while loading crawlers from project.',\n            description: error.toString(),\n        });\n    }\n    return {crawlers, setCrawlers, loading, loadCrawlers };\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport { useProject } from './useProject';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute } from '../routes';\nimport { StorageType } from '../server/storage.typing';\n\nexport const ProjectBreadcrumb = ({\n    match: { params: { projectId, storageType } },\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getResultsRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\nimport { timestampToString } from '../utils';\nimport { StorageType } from '../server/storage.typing';\n\nexport const CrawlerResultsBreadcrumb = ({\n    match: { params: { projectId, timestamp, storageType } },\n}: RouteComponentProps<{ projectId: string, timestamp: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item>\n                <Link to={getResultsRoute(storageType, projectId, timestamp)}>\n                    Results: {timestampToString(timestamp)}\n                </Link>\n            </Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getPinsRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\nimport { StorageType } from '../server/storage.typing';\n\nexport const PinsBreadcrumb = ({\n    match: { params: { projectId, storageType } },\n}: RouteComponentProps<{ projectId: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getPinsRoute(storageType, projectId)}>Pins</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getCodeRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\nimport { StorageType } from '../server/storage.typing';\n\nexport const CodeBreadcrumb = ({\n    match: { params: { projectId, id, storageType } },\n}: RouteComponentProps<{ projectId: string, id: string, storageType: StorageType }>) => {\n    const { project } = useProject(storageType, projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(storageType, projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getCodeRoute(storageType, projectId, id)}>Code</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport Layout from 'antd/lib/layout';\nimport Typography from 'antd/lib/typography';\nimport Affix from 'antd/lib/affix';\nimport Button from 'antd/lib/button';\nimport { useDoc } from './useDoc';\n\nexport const DocSider = ({ children }: React.PropsWithChildren<any>) => {\n    const { open, toggle, content } = useDoc();\n    return (\n        <Layout>\n            {children}\n            {!!open && <Layout.Sider\n                theme=\"light\"\n                breakpoint=\"md\"\n                collapsedWidth=\"100%\"\n                width=\"40%\"\n                style={{\n                    padding: 15,\n                    textAlign: 'justify',\n                }}\n            >\n                <Typography.Title level={3} style={{\n                    float: 'right',\n                    fontStyle: 'italic',\n                    color: '#CCC',\n                }}>\n                    Documentation\n                </Typography.Title>\n                <Affix offsetTop={10} style={{ marginBottom: 10 }}>\n                    <Button\n                        size=\"small\"\n                        shape=\"circle\"\n                        icon=\"close\"\n                        onClick={toggle}\n                    />\n                </Affix>\n                <br />\n                {content || (<p>\n                    We are sorry, there is no documentation for this section.\n                    If you have any questions, please don't hesitate\n                    to <a\n                        href=\"https://github.com/apiel/test-crawler/issues\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        contact us\n                    </a>.</p>)}\n            </Layout.Sider>}\n        </Layout>\n    );\n}\n","import React from 'react';\nimport Layout from 'antd/lib/layout';\nimport Typography from 'antd/lib/typography';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport {\n    // BrowserRouter,\n    Route,\n    Link,\n    HashRouter,\n} from 'react-router-dom';\n\nimport './App.css';\nimport { ReactComponent as Logo } from './logo.svg';\nimport NewProject from './projects/new/NewProject';\nimport { Projects } from './projects/Projects';\nimport { CrawlerResults } from './crawler/CrawlerResults';\nimport {\n    getHomeRoute, getResultsRoute, getPinsRoute, getProjectRoute,\n    getCodeRoute, getSettingsRoute, getNewProjectRoute\n} from './routes';\nimport { Pins } from './pin/Pins';\nimport { Code } from './code/Code';\nimport { Settings } from './Settings';\nimport { Project } from './projects/Project';\nimport Menu from 'antd/lib/menu';\nimport Icon from 'antd/lib/icon';\nimport { ProjectBreadcrumb } from './projects/ProjectBreadcrumb';\nimport { CrawlerResultsBreadcrumb } from './crawler/CrawlerResultsBreadcrumb';\nimport { PinsBreadcrumb } from './pin/PinsBreadcrumb';\nimport { CodeBreadcrumb } from './code/CodeBreadcrumb';\nimport { DocSider } from './doc/DocSider';\nimport { useDoc } from './doc/useDoc';\n\nconst { Content, Header } = Layout;\nconst { Title } = Typography;\n\nconst layoutStyle = {\n    minHeight: '100vh',\n};\nconst titleStyle = {\n    color: '#fff',\n    marginTop: 15,\n    marginRight: 15,\n    float: 'left' as any,\n}\nconst contentStyle = {\n    background: '#fff',\n    padding: 24,\n    margin: 10,\n    minHeight: 280,\n};\n\nconst App = () => {\n    const { toggle } = useDoc();\n    return (\n        // <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <HashRouter\n        // basename={process.env.PUBLIC_URL}\n        >\n            <DocSider>\n                <Layout style={layoutStyle}>\n                    <Header>\n                        <Link to={getHomeRoute()}>\n                            <Title level={3} style={titleStyle}>\n                                <Logo style={{ height: 32, width: 32, position: 'absolute', fill: '#8c8c8c', }} /> \n                                <span style={{ marginLeft: 45 }}>Test-crawler</span>\n                            </Title>\n                        </Link>\n                        <Menu\n                            theme=\"dark\"\n                            mode=\"horizontal\"\n                            selectable={false}\n                            style={{ paddingTop: 10 }}\n                        >\n                            <Menu.Item key=\"projects\">\n                                <Icon type=\"folder\" />\n                                <span className=\"nav-text\">Projects</span>\n                                <Link to={getHomeRoute()} />\n                            </Menu.Item>\n                            <Menu.Item\n                                key=\"doc\"\n                                title=\"Docs\"\n                                // style={{ float: 'right', padding: 0 }}\n                                onClick={toggle}\n                            >\n                                <Icon type=\"question-circle\" />\n                                <span className=\"nav-text\">Documentation</span>\n                            </Menu.Item>\n                            <Menu.Item key=\"settings\" title=\"settings\">\n                                <Icon type=\"setting\" />\n                                <span className=\"nav-text\">Settings</span>\n                                <Link to={getSettingsRoute()} />\n                            </Menu.Item>\n                        </Menu>\n                    </Header>\n                    <Breadcrumb style={{ margin: '10px 0 0 10px' }}>\n                        <Route path={getProjectRoute(':storageType', ':projectId')} exact component={ProjectBreadcrumb} />\n                        <Route path={getResultsRoute(':storageType', ':projectId', ':timestamp')} exact component={CrawlerResultsBreadcrumb} />\n                        <Route path={getPinsRoute(':storageType', ':projectId')} exact component={PinsBreadcrumb} />\n                        <Route path={getCodeRoute(':storageType', ':projectId', ':id')} exact component={CodeBreadcrumb} />\n                    </Breadcrumb>\n                    <Content style={contentStyle}>\n                        <Route path={getHomeRoute()} exact component={Projects} />\n                        <Route path={getSettingsRoute()} exact component={Settings} />\n\n                        <Route path={getNewProjectRoute(':storageType')} exact component={NewProject} />\n                        <Route path={getPinsRoute(':storageType', ':projectId')} exact component={Pins} />\n                        <Route path={getCodeRoute(':storageType', ':projectId', ':id')} exact component={Code} />\n                        <Route path={getResultsRoute(':storageType', ':projectId', ':timestamp')} component={CrawlerResults} />\n                        <Route path={getProjectRoute(':storageType', ':projectId')} exact component={Project} />\n                    </Content>\n                </Layout>\n            </DocSider>\n        </HashRouter>\n        // </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AsyncCacheProvider } from 'react-async-cache';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { hotjar } from 'react-hotjar';\nimport { DocProvider } from './doc/useDoc';\n\n// use hotjar only on github\nif (window.location.host === 'apiel.github.io') {\n    hotjar.initialize(1680523, 6);\n}\n\nReactDOM.render((\n    <AsyncCacheProvider>\n        <DocProvider>\n            <App />\n        </DocProvider>\n    </AsyncCacheProvider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["routes.tsx","server/service.ts","common/Info.tsx","search/search.ts","common/refreshMasonry.ts","viewport.ts","projects/new/Viewport.tsx","projects/new/NewProject.tsx","projects/Projects.tsx","pages/pageStyle.tsx","common/ErrorHandler.tsx","search/Search.tsx","utils/index.ts","diff/DiffImageButtons.tsx","diff/DiffZone.tsx","pages/PageImageDiffZone.tsx","pages/PageImageDiff.tsx","pages/PageImage.tsx","pages/Page.tsx","pages/PagesActionZone.tsx","pages/PagesActionPin.tsx","diff/DiffImage.tsx","diff/DiffImageWithZone.tsx","pages/PagesActionFullscreen.tsx","pages/PagesActions.tsx","hook/useAsync.ts","pages/Pages.tsx","crawler/SwitchStatus.tsx","projects/useProject.tsx","projects/ProjectName.tsx","crawler/CrawlerInfo.tsx","crawler/CrawlerResults.tsx","pin/PinPage.tsx","pin/Pins.tsx","code/CodeInfo.tsx","code/codeStyle.ts","code/CodeFrom.tsx","code/CodeSnippet.tsx","code/Code.tsx","Settings.tsx","code/Codes.tsx","projects/Project.tsx","projects/useCrawlers.tsx","projects/ProjectBreadcrumb.tsx","crawler/CrawlerResultsBreadcrumb.tsx","pin/PinsBreadcrumb.tsx","code/CodeBreadcrumb.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getPinsRoute","projectId","getCodeRoute","id","getResultsRoute","timestamp","getProjectRoute","getSettings","args","isomorRemote","getCrawlers","loadProjects","saveProject","setCode","getThumbnail","removePin","pin","setZoneStatus","setZonesStatus","setStatus","startCrawlerFromProject","startCrawlers","timerSearch","masonry","timer","infoStyle","lineHeight","borderLeft","paddingLeft","color","textAlign","Info","children","style","viewports","name","value","width","height","isMobile","hasTouch","viewportsStr","map","viewport","JSON","stringify","getViewportName","valueStr","index","findIndex","vp","Option","Select","Viewport","getFieldDecorator","initialValue","key","inlineStyle","marginRight","display","radioGroupdStyle","save","history","a","input","parse","undefined","push","notification","message","description","toString","handleSubmit","validateFields","event","preventDefault","err","values","NewForm","Form","create","form","getFieldValue","onSubmit","Item","rules","required","addonBefore","placeholder","addonAfter","Group","size","Button","type","min","content","trigger","overlayStyle","Paragraph","ellipsis","rows","expandable","valuePropName","icon","htmlType","load","setProjects","list","Projects","React","useState","projects","useEffect","Title","level","itemLayout","bordered","dataSource","renderItem","url","crawlerInput","actions","to","Meta","title","coverStyle","imgStyle","cardStyle","cardImgMargin","marginBottom","masonryStyle","paddingTop","paddingBottom","masonryOptions","gutter","fitWidth","ErrorHandler","showIcon","searchStyle","onSearch","setPages","pages","filters","length","clearTimeout","setTimeout","filterPages","searchPages","Fuse","keys","search","onFilter","setFilters","searchValue","filter","Object","availableFilters","includes","join","page","res","pixelDiffRatio","get","png","diff","Search","response","withFilters","selectedFilters","setSelectedFilters","pagesFiltered","setPagesFiltered","mode","onChange","tokenSeparators","filterOption","timestampToString","unix","calendar","buttonStyle","marginLeft","onSetStatus","status","success","DiffImageButtons","props","onClick","getColorByStatus","zoneStyle","ratio","img","over","xMin","yMin","top","left","xMax","yMax","border","position","backgroundImage","backgroundPosition","backgroundSize","DiffZone","folder","originalWidth","zone","thumb","setThumb","hover","setHover","onMouseOver","onMouseOut","PageImageDiffZone","zones","more","Fragment","perStatus","getCountZonesPerStatus","PageImageDiff","theme","n","precision","fix","Math","floor","log","toFixed","sigDig","PageImage","convert","require","fg","alertStyle","Page","pageError","dangerouslySetInnerHTML","__html","toHtml","href","PagesActionZone","onPin","PagesActionPin","DiffImage","onImg","alt","src","DiffImageWithZone","setVisible","onCancel","PagesActionFullscreen","visible","footer","PagesActions","setMasonry","m","onMasonryImg","layout","fn","setResult","setError","setLoading","result","useAsync","deps","error","loading","call","Pages","lastUpdate","getPages","options","ref","c","cover","setCrawler","crawler","SwitchStatus","checkedChildren","unCheckedChildren","checked","useProject","loadProject","project","setProject","ProjectName","Typography","warningStyle","limitStyle","fontSize","CrawlerInfo","diffZoneCount","errorCount","urlsCount","inQueue","startAt","limit","total","percent","screen","duration","format","CrawlerResults","match","params","getCrawler","subscrib","unsubscrib","handleDelete","setPins","pins","PinPage","onConfirm","okText","cancelText","pathname","state","pattern","Pins","getPins","Text","CodeInfo","full","code","aceEditorStyle","float","buttonBarStyle","inputStyle","maxWidth","margin","onPlay","warn","source","info","CodeForm","setSource","location","target","overlay","Code","getCode","setSettings","Settings","settings","dir","Codes","getCodes","Date","now","onStart","onAutoPinChange","autopin","getCrawlerStatusIcon","Project","crawlers","sort","setCrawlers","useCrawlers","method","ProjectBreadcrumb","CrawlerResultsBreadcrumb","parseInt","PinsBreadcrumb","CodeBreadcrumb","Content","Layout","Header","layoutStyle","minHeight","titleStyle","marginTop","contentStyle","background","padding","App","className","path","exact","component","NewProject","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.738a3fbe.chunk.js","sourcesContent":["export const getHomeRoute = () => '/';\nexport const getNewProjectRoute = () => '/new';\nexport const getSettingsRoute = () => '/settings';\nexport const getPinsRoute = (projectId: string) => `/pins/${projectId}`;\nexport const getCodeRoute = (projectId: string, id: string) => `/code/${projectId}/${id}`;\nexport const getResultsRoute = (projectId: string, timestamp: string) => `/results/${projectId}/${timestamp}`;\nexport const getProjectRoute = (projectId: string) => `/project/${projectId}`;\n","import { isomorRemote } from \"isomor\";\n// import * as sharp from 'sharp';\nimport { WsContext } from 'isomor-server';\nexport function getSettings(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getSettings\", args);\n}\nexport function getCrawlers(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getCrawlers\", args);\n}\nexport function loadProject(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"loadProject\", args);\n}\nexport function loadProjects(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"loadProjects\", args);\n}\nexport function saveProject(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"saveProject\", args);\n}\nexport function getCrawler(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getCrawler\", args);\n}\nexport function getPages(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getPages\", args);\n}\nexport function getPins(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getPins\", args);\n}\nexport function getPin(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getPin\", args);\n}\nexport function setCode(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"setCode\", args);\n}\nexport function getCode(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getCode\", args);\n}\nexport function getCodes(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getCodes\", args);\n}\nexport function getThumbnail(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"getThumbnail\", args);\n}\nexport function removePin(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"removePin\", args);\n}\nexport function pin(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"pin\", args);\n}\nexport function setZoneStatus(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"setZoneStatus\", args);\n}\nexport function setZonesStatus(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"setZonesStatus\", args);\n}\nexport function setStatus(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"setStatus\", args);\n}\nexport function startCrawlerFromProject(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"startCrawlerFromProject\", args);\n}\nexport function startCrawlers(...args: any) {\n  return isomorRemote(\"ws\", \"ws://127.0.0.1:3005\", \"server-service\", \"test-crawler\", \"startCrawlers\", args);\n}","import React from 'react';\n\nconst infoStyle = {\n    lineHeight: 1.2,\n    borderLeft: '8px solid #EEE',\n    paddingLeft: 15,\n    color: '#666',\n    textAlign: 'justify' as 'justify',\n}\n\nexport const Info: React.FunctionComponent = ({ children }) => (\n    <div style={infoStyle}>\n        { children }\n    </div>\n);\n","import { PageData } from '../server/typing';\nimport Fuse from 'fuse.js';\nimport get from 'lodash/get';\nimport { cardStyle, masonryOptions } from '../pages/pageStyle';\n\nexport const searchStyle = {\n    width: cardStyle.width,\n    marginRight: masonryOptions.gutter,\n}\n\nlet timerSearch: NodeJS.Timer;\nexport const onSearch = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    filters: string[],\n) => (value: string) => {\n    if (pages) {\n        if (!value.length) {\n            filterPages(setPages, pages, filters);\n        } else {\n            clearTimeout(timerSearch);\n            timerSearch = setTimeout(() => {\n                filterPages(setPages, searchPages(pages, value), filters);\n            }, 500);\n        }\n    }\n};\n\nconst searchPages = (\n    pages: PageData[],\n    value: string,\n) => {\n    const fuse = new Fuse(pages, {\n        keys: [\n            'url',\n            'viewport.width',\n            'viewport.height',\n            'keywords',\n        ],\n    });\n    return fuse.search(value);\n}\n\n// instead to have 2 fields, we could use one combine with to instance of fuse.js\n// 1 with partial match and 1 with full word match for filters\n// for the input field see \"Search and Select Users\" from select component\nexport const onFilter = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    setFilters: React.Dispatch<React.SetStateAction<any>>,\n) => (filters: string[]) => {\n    if (pages) {\n        setFilters(filters);\n        filterPages(setPages, pages, filters);\n    }\n};\n\nconst filterPages = (\n    setPages: React.Dispatch<React.SetStateAction<PageData[] | undefined>>,\n    pages: PageData[] | undefined,\n    filters: string[]\n) => {\n    if (pages) {\n        if (!filters.length) {\n            setPages(pages);\n        } else {\n            const searchValue = filters.filter(filter => !Object.keys(availableFilters).includes(filter)).join(' ');\n            if (searchValue) {\n                pages = searchPages(pages, searchValue);\n            }\n            setPages(pages.filter(page => {\n                let res = true\n                if (filters.includes('with-diff')) {\n                    const pixelDiffRatio = get(page, 'png.diff.pixelDiffRatio');\n                    res = res && pixelDiffRatio > 0;\n                }\n                if (filters.includes('new')) {\n                    res = res && !!page.png && !page.png.diff\n                }\n                return res;\n            }));\n        }\n    }\n}\n\nexport const availableFilters = {\n    'with-diff': 'with diff',\n    'new': 'new',\n}\n","let masonry: any;\nlet timer: NodeJS.Timer;\n\nexport const setMasonry = (m: any) => masonry = m;\n\nexport const onMasonryImg = () => {\n    if (masonry) masonry.layout();\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n        if (masonry) masonry.layout();\n    }, 500);\n}\n","import { Viewport as ViewportObject } from './server/typing';\n\nexport interface ViewportString {\n    name: string;\n    value: string;\n}\n\nexport interface Viewport {\n    name: string;\n    value: ViewportObject;\n}\n\nexport const viewports: Viewport[] = [\n    { name: 'Desktop - 800x600', value: { width: 800, height: 600 } },\n    { name: 'Desktop - 1024x768', value: { width: 1024, height: 768 } },\n    { name: 'Desktop - 1920x1080', value: { width: 1920, height: 1080 } },\n    { name: 'iPhone 5 - 320x568', value: { width: 320, height: 568, isMobile: true, hasTouch: true } },\n    { name: 'iPhone 6 - 375x667', value: { width: 375, height: 667, isMobile: true, hasTouch: true } },\n    { name: 'Ipad - 768x1024', value: { width: 768, height: 1024, isMobile: true, hasTouch: true } },\n    { name: 'Galaxy S5 - 360x640', value: { width: 360, height: 640, isMobile: true, hasTouch: true } },\n];\n\nexport const viewportsStr: ViewportString[] = viewports.map(\n    ({ value, ...viewport }) => ({ ...viewport, value: JSON.stringify(value) })\n);\n\nexport const getDefaultViewportStr = () => viewportsStr[0];\nexport const getDefaultViewport = (): ViewportObject => viewports[0].value;\n\nexport const getViewportName = (value: ViewportObject) => {\n    const valueStr = JSON.stringify(value);\n    const index = viewportsStr.findIndex(vp => vp.value === valueStr);\n    if (index !== -1) {\n        return viewportsStr[index].name;\n    }\n    const { width, height, isMobile } = value;\n    return `${width}x${height}${ isMobile && ' mobile'}`;\n};\n","import React from 'react';\n\nimport Select from 'antd/lib/select';\nimport { viewportsStr, getDefaultViewportStr } from '../../viewport';\n\nconst { Option } = Select;\n\nexport const Viewport = ({ getFieldDecorator, initialValue }: any) => getFieldDecorator(\n    'viewport',\n    {\n        initialValue: initialValue || getDefaultViewportStr().name,\n    }\n)(\n    <Select>\n        {viewportsStr.map(\n            ({ value, name }) => <Option key={value} value={value}>{name}</Option>\n        )}\n    </Select>\n);\n","import React from 'react';\nimport Input from 'antd/lib/input';\nimport InputNumber from 'antd/lib/input-number';\nimport Checkbox from 'antd/lib/checkbox';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport Icon from 'antd/lib/icon';\nimport Popover from 'antd/lib/popover';\nimport Radio from 'antd/lib/radio';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport Button from 'antd/lib/button';\nimport { RouteComponentProps } from 'react-router';\nimport { CrawlerInput } from '../../server/typing';\n\nimport { getHomeRoute } from '../../routes';\nimport { saveProject } from '../../server/service';\nimport { Info } from '../../common/Info';\nimport { Viewport } from './Viewport';\nimport { getDefaultViewport } from '../../viewport';\nimport { History } from 'history';\n\nconst inlineStyle = {\n    marginRight: 10,\n    display: 'inline-block',\n}\n\nconst radioGroupdStyle = {\n    marginRight: 30,\n}\n\nconst save = async (\n    history: History<any>,\n    { name, viewport, ...input }: (CrawlerInput & { name: string, viewport: string }),\n) => {\n    try {\n        await saveProject({ ...input, viewport: JSON.parse(viewport) }, name, undefined);\n        history.push(getHomeRoute());\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst handleSubmit = (history: History<any>, validateFields: any) => (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    validateFields((err: any, values: any) => {\n        if (!err) {\n            save(history, values);\n        }\n    });\n}\n\ntype Props = FormComponentProps & RouteComponentProps;\nconst NewProject = ({ history, form: { getFieldDecorator, validateFields, getFieldValue } }: Props) => {\n    return (\n        <Form onSubmit={handleSubmit(history, validateFields)}>\n            <Form.Item>\n                {getFieldDecorator('name', {\n                    rules: [{ required: true, message: 'Please give a name to the project.' }],\n                })(\n                    <Input addonBefore=\"Name\" placeholder=\"Project name\" />\n                )}\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator('url', {\n                    rules: [{ required: true, message: 'Please input an URL to crawl.' }],\n                })(\n                    <Input\n                        placeholder=\"https://domain.com/\"\n                        addonBefore=\"URL\"\n                        addonAfter={\n                            <Viewport\n                                getFieldDecorator={getFieldDecorator}\n                                initialValue={JSON.stringify(getDefaultViewport())}\n                            />\n                        }\n                    />\n                )}\n            </Form.Item>\n            <Form.Item>\n                <Form.Item style={inlineStyle}>\n                    {getFieldDecorator('method', {\n                        initialValue: 'spiderbot',\n                    })(\n                        <Radio.Group size=\"small\" style={radioGroupdStyle}>\n                            <Radio.Button value={'spiderbot'}><Icon type=\"radar-chart\" /> Spider bot</Radio.Button>\n                            <Radio.Button value={'urls'}><Icon type=\"ordered-list\" /> URLs list</Radio.Button>\n                        </Radio.Group>\n                    )}\n                </Form.Item>\n                {getFieldValue('method') === 'spiderbot' && <Form.Item style={inlineStyle}>\n                    Limit {getFieldDecorator('limit')(\n                        <InputNumber min={0} size=\"small\" />\n                    )}\n                    &nbsp;<Popover content={<div>\n                        <b>Limit the number of sibling pages. </b>\n                        For example, with the urls:\n                        <ul>\n                            <li>/item/1</li>\n                            <li>/item/2</li>\n                            <li>/item/3</li>\n                            <li>/item/4</li>\n                        </ul> using the limit <b>2</b> will only crawl <b>/item/1</b> and <b>/item/2</b>.<br /><br />\n                        Use <b>0</b> to skip the limit.</div>} trigger=\"click\" overlayStyle={{ width: 200 }}>\n                        <Icon type=\"question-circle\" />\n                    </Popover>\n                </Form.Item>}\n                <Info>\n                    <Typography.Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>Spider bot</b> crawling method will get all the links inside the page of the given URL\n                        and crawl the children. It will then continue do the same with the children till no new\n                        link is found. Be careful if you have big website, this is most likely not the right\n                        solution for you.\n                    </Typography.Paragraph>\n                    <Typography.Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>URLs list</b> crawling method will crawl a specific sets of URLs. In the URL input field\n                        you must provide an endpoint containing a list of URLs (a simple text format, with one URL\n                        per line). The crawler will crawl each of those URL only and will not try to find links in\n                        the page.\n                    </Typography.Paragraph>\n                </Info>\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator('autopin', {\n                    valuePropName: 'checked',\n                })(\n                    <Checkbox>Automatically pin new page founds.</Checkbox>\n                )}\n            </Form.Item>\n            <Form.Item>\n                <Form.Item style={inlineStyle}>\n                    <Button\n                        type=\"primary\"\n                        icon=\"plus\"\n                        htmlType=\"submit\"\n                    >\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form.Item>\n        </Form>\n    );\n}\n\nconst NewForm = Form.create({ name: 'start_crawler' })(NewProject);\nexport default NewForm;\n","import React from 'react';\nimport List from 'antd/lib/list';\nimport Button from 'antd/lib/button';\nimport { Link } from 'react-router-dom';\nimport notification from 'antd/lib/notification';\nimport Typography from 'antd/lib/typography';\nimport { loadProjects } from '../server/service';\nimport { Project } from '../server/typing';\nimport { getNewProjectRoute, getProjectRoute } from '../routes';\n\nconst load = async (\n    setProjects: React.Dispatch<React.SetStateAction<Project[]>>,\n) => {\n    try {\n        const list = await loadProjects();\n        setProjects(list);\n    } catch (error) {\n        notification['warning']({\n            message: 'Something went wrong while loading projects.',\n            description: error.toString(),\n        });\n    }\n}\n\nexport const Projects = () => {\n    const [projects, setProjects] = React.useState<Project[]>([]);\n\n    React.useEffect(() => { load(setProjects); }, []);\n    return (\n        <>\n            <Typography.Title level={3}>Projects</Typography.Title>\n            <List\n                itemLayout=\"horizontal\"\n                bordered\n                dataSource={projects}\n                renderItem={({ id, name, crawlerInput: { url } }) => (\n                    <List.Item\n                        actions={[\n                            <Link to={getProjectRoute(id)}>\n                                Open\n                            </Link>,\n                        ]}\n                    >\n                        <List.Item.Meta\n                            title={<Link to={getProjectRoute(id)}>{name}</Link>}\n                            description={url}\n                        />\n                    </List.Item>\n                )}\n            />\n            <br />\n            <Link to={getNewProjectRoute()}>\n                <Button icon=\"plus\" size=\"small\">New</Button>\n            </Link>\n        </>\n    );\n}\n","export const coverStyle = {\n    textAlign: 'center',\n    // borderBottom: '1px solid #888',\n}\n\nexport const imgStyle = {\n    width: 300,\n}\n\nexport const cardImgMargin = 10;\n\nexport const cardStyle = {\n    width: imgStyle.width + cardImgMargin*2,\n    marginBottom: 10,\n};\n\nexport const masonryStyle = {\n    paddingTop: 10,\n    paddingBottom: 10,\n}\n\nexport const masonryOptions = {\n    gutter: 10,\n    // percentPosition: true,\n    fitWidth: true,\n}\n\nexport const iconTheme = 'outlined'; // 'twoTone'\n","import React from 'react';\nimport Alert from 'antd/lib/alert';\n\ninterface Props {\n    message?: string;\n    description: string;\n}\nexport const ErrorHandler = ({ message = 'Something went wrong', description }: Props) => (\n    <Alert\n        message={message}\n        description={description}\n        type=\"warning\"\n        showIcon\n    />\n);","import React from 'react';\nimport { PageData } from '../server/typing';\n\nimport { onSearch, searchStyle, onFilter } from './search';\nimport Select from 'antd/lib/select';\n\nconst { Option } = Select;\n\nexport interface Filters {\n    [key: string]: string;\n}\n\ninterface Props {\n    withFilters?: Filters;\n    response: PageData[],\n    children: (pages: PageData[] | undefined) => React.ReactNode,\n}\nexport const Search = ({ children, response, withFilters }: Props) => {\n    const [pages, setPages] = React.useState<PageData[]>();\n    const [selectedFilters, setSelectedFilters] = React.useState<string[]>([]);\n    const [pagesFiltered, setPagesFiltered] = React.useState<PageData[]>();\n    React.useEffect(() => {\n        setPages(response);\n        onFilter(setPagesFiltered, response, setSelectedFilters)(selectedFilters);\n    }, [response]);\n\n    return (\n        <>\n            <Select\n                mode=\"tags\"\n                onChange={onFilter(setPagesFiltered, pages, setSelectedFilters)}\n                tokenSeparators={[',']}\n                style={searchStyle}\n                placeholder=\"Search\"\n                filterOption={false}\n                onSearch={onSearch(setPagesFiltered, pages, selectedFilters)}\n            >\n                { !!withFilters && Object.keys(withFilters).map(key => <Option key={key}>{withFilters[key]}</Option>) }\n            </Select>\n            {children(pagesFiltered)}\n        </>\n    );\n}\n","import { unix } from 'moment';\n\nexport const timestampToString = (timestamp: number) => unix(timestamp)//.format('YYYY.DD.MM HH:mm')\n    .calendar()\n\nexport const sigDig = (n: number, precision = 1) => {\n    if (!n) {\n        return n;\n    }\n    const fix = (precision - 1) - Math.floor(Math.log(n) / Math.log(10));\n    return n.toFixed(fix);\n}","import React from 'react';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport Button from 'antd/lib/button';\n\nimport { setZoneStatus } from '../server/service';\nimport { PageData } from '../server/typing';\n\nconst buttonStyle = {\n    marginLeft: 5,\n    marginRight: 5,\n}\n\ninterface Props {\n    index: number;\n    timestamp: string;\n    id: string;\n    projectId: string;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nconst onSetStatus = (\n    status: string,\n    { timestamp, id, index, projectId, setPages }: Props,\n) => async () => {\n    try {\n        const pages = await setZoneStatus(projectId, timestamp.toString(), id, index, status);\n        setPages(pages);\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nexport const DiffImageButtons = (props: Props) => {\n    return (\n        <>\n            <Button\n                style={buttonStyle}\n                icon=\"check\"\n                size=\"small\"\n                onClick={onSetStatus('valid', props)}>Valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"pushpin\"\n                size=\"small\"\n                onClick={onSetStatus('pin', props)}>Always valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"warning\"\n                size=\"small\"\n                type=\"danger\"\n                onClick={onSetStatus('report', props)}>Report</Button>\n        </>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport Popover from 'antd/lib/popover';\n\nimport { DiffImageButtons } from './DiffImageButtons';\nimport { getThumbnail } from '../server/service';\nimport { Zone, PageData } from '../server/typing';\n\nexport const getColorByStatus = (status: string) => {\n    if (status === 'valid' || status === 'pin') {\n        return '#0F0'; //'green';\n    } else if (status === 'report') {\n        return 'red';\n    }\n    return 'yellow';\n}\n\nconst zoneStyle = (\n    { xMin, yMin, xMax, yMax }: any,\n    ratio: number,\n    width: number,\n    marginLeft: number,\n    img: string | undefined,\n    over: boolean,\n    status: string,\n) => {\n    const top = yMin / ratio - 1;\n    const left = xMin / ratio - 1;\n    return ({\n        width: (xMax - xMin) / ratio + 2,\n        height: (yMax - yMin) / ratio + 2,\n        // width: 200,\n        // height: 100,\n        top,\n        left: left + marginLeft,\n        border: `1px solid ${getColorByStatus(status)}`,\n        position: 'absolute',\n        backgroundImage: over ? `url(\"${img}\")` : 'none',\n        backgroundPosition: `${-(left + 1)}px ${-(top + 1)}px`,\n        backgroundSize: width,\n    });\n}\n\ninterface Props {\n    folder: string;\n    id: string;\n    zone: Zone;\n    originalWidth: number;\n    index: number;\n    status: string;\n    width: number;\n    marginLeft: number;\n    projectId: string;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n};\n\nexport const DiffZone = ({ setPages, projectId, folder, id, index, originalWidth, zone, status, width, marginLeft }: Props) => {\n    const [thumb, setThumb] = useState<string>();\n    const load = async () => {\n        setThumb(await getThumbnail(projectId, 'base', id, width));\n    }\n    useEffect(() => { load(); }, []);\n    const [hover, setHover] = useState(false);\n    const ratio = originalWidth / width;\n    return (\n        <Popover key={`${id}-${index}`} content={(\n            <DiffImageButtons index={index} timestamp={folder} id={id} projectId={projectId} setPages={setPages} />\n        )} trigger=\"click\">\n            <div\n                style={zoneStyle(zone, ratio, width, marginLeft, thumb, hover, status) as any}\n                onMouseOver={() => setHover(true)}\n                onMouseOut={() => setHover(false)}\n            />\n        </Popover>\n    );\n}\n","import React from 'react';\nimport { PngDiffDataZone } from '../server/typing';\n\nimport { getColorByStatus } from '../diff/DiffZone';\n\nconst getCountZonesPerStatus = (zones: any, perStatus: string[]) =>\n    zones.filter(({ status }: any) => perStatus.includes(status)).length\n\nexport const PageImageDiffZone = ({ zones }: {\n    zones: PngDiffDataZone[]\n}) => (\n    <p>\n        <b>Zone:</b>&nbsp;\n            {[['diff'], ['valid', 'pin'], ['report']].map(([status, ...more]) => (\n            <React.Fragment key={status}>\n                <span style={{\n                    marginLeft: 10,\n                    color: getColorByStatus(status)\n                }}>■</span> <b>{getCountZonesPerStatus(zones, [status, ...more])}</b> {status}\n            </React.Fragment>\n        ))}\n    </p>\n);","import React from 'react';\nimport Icon from 'antd/lib/icon';\n\nimport { iconTheme } from './pageStyle';\nimport { PngDiffData } from '../server/typing';\nimport { sigDig } from '../utils';\nimport { PageImageDiffZone } from './PageImageDiffZone';\n\nexport const PageImageDiff = ({ diff }: {\n    diff: PngDiffData;\n}) => (\n    <>\n        <p>\n            <Icon type=\"picture\" theme={iconTheme} />&nbsp;\n                    Pixel diff ratio: {sigDig(diff.pixelDiffRatio)}\n        </p>\n        {diff.zones && diff.zones.length > 0 &&\n            <PageImageDiffZone zones={diff.zones} />\n        }\n    </>\n);","import React from 'react';\nimport Tag from 'antd/lib/tag';\nimport Icon from 'antd/lib/icon';\n\nimport { iconTheme } from './pageStyle';\nimport { PngDiffData } from '../server/typing';\nimport { PageImageDiff } from './PageImageDiff';\n\nexport const PageImage = ({ diff }: {\n    diff?: PngDiffData;\n}) => (!diff)\n        ? (\n            <div>\n                <Icon type=\"picture\" theme={iconTheme} />&nbsp;\n                New screenshot <Tag color=\"green\">New</Tag>\n            </div>\n        ) : (\n            <PageImageDiff diff={diff} />\n        );","import React from 'react';\nimport Alert from 'antd/lib/alert';\nimport Icon from 'antd/lib/icon';\nimport { PngDiffData } from '../server/typing';\n// import * as Convert from 'ansi-to-html';\n\nimport { iconTheme } from './pageStyle';\nimport { PageImage } from './PageImage';\n\nconst Convert = require('ansi-to-html');\nconst convert = new Convert({\n    fg: '#333',\n});\n\nconst alertStyle = {\n    marginBottom: 10,\n}\n\ninterface Props {\n    pageError: any;\n    url: string;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n}\n\nexport const Page = ({ pageError, url, png }: Props) => {\n    return (\n        <>\n            {pageError && <Alert message={\n                <div dangerouslySetInnerHTML={{ __html: convert.toHtml(pageError) }} />\n            } type=\"warning\" style={alertStyle} />}\n            <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n            {png\n                ? <PageImage diff={png.diff} />\n                : <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { setZonesStatus } from '../server/service';\nimport { PageData } from '../server/typing';\n\nconst onClick = (\n    { timestamp, id, status, projectId, setPages }: Props,\n) => async () => {\n    try {\n        const pages = await setZonesStatus(projectId, timestamp.toString(), id, status);\n        setPages(pages);\n        message.success(`All zone are set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n    projectId: string;\n    timestamp: string;\n    id: string;\n    status: string;\n    type: string;\n}\nexport const PagesActionZone = (props: Props) => {\n    const { status, type } = props;\n    return (\n        <Icon type={type} title={`Set all zone to \"${status}\".`} onClick={onClick(props)} />\n    );\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { pin } from '../server/service';\n\n\nconst onPin = ({ projectId, timestamp, id }: Props) => async () => {\n    try {\n        await pin(projectId, timestamp.toString(), id);\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    timestamp: string,\n    id: string,\n    projectId: string,\n}\n\nconst PagesActionPin = (props: Props) =>\n    <Icon\n        type=\"pushpin\"\n        title=\"pin as reference for comparison\"\n        onClick={onPin(props)}\n    />;\n\nexport default function(props: Props) {\n    return PagesActionPin(props);\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n    coverStyle,\n    imgStyle,\n} from '../pages/pageStyle';\n\nimport { getThumbnail } from '../server/service';\n\nexport interface Props {\n    projectId: string;\n    folder: string;\n    id: string;\n    width?: number;\n    onImg?: () => void;\n    marginLeft: number;\n};\n\nexport const DiffImage = ({\n    projectId,\n    folder,\n    id,\n    onImg = () => { },\n    width = imgStyle.width,\n    children\n}: Props & React.PropsWithChildren<any>) => {\n    const [thumb, setThumb] = useState<string>();\n    const load = async () => {\n        setThumb(await getThumbnail(projectId, folder, id, width));\n        onImg();\n    }\n    useEffect(() => { load(); }, []);\n    return thumb ? (\n        <div style={coverStyle as any}>\n            {children}\n            <img style={{ width }} alt=\"\" src={thumb} />\n        </div>) : null;\n}\n","import React from 'react';\n\nimport {\n    imgStyle,\n} from '../pages/pageStyle';\n\nimport { DiffZone } from './DiffZone';\nimport { PngDiffDataZone, PageData } from '../server/typing';\nimport { Props as DiffImageProps, DiffImage } from './DiffImage';\n\ninterface Props {\n    zones?: PngDiffDataZone[];\n    originalWidth?: number;\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n};\n\nexport const DiffImageWithZone = ({\n    projectId,\n    folder,\n    id,\n    zones,\n    originalWidth = 0,\n    width = imgStyle.width,\n    setPages,\n    marginLeft,\n    ...props\n}: Props & DiffImageProps) =>\n    <DiffImage projectId={projectId} folder={folder} id={id} width={width} {...props}>\n        {zones && zones.map(({ zone, status }: PngDiffDataZone, index: number) =>\n            <DiffZone\n                projectId={projectId}\n                folder={folder}\n                id={id}\n                width={width}\n                index={index}\n                originalWidth={originalWidth}\n                marginLeft={marginLeft}\n                status={status}\n                zone={zone}\n                key={`zone-${id}-${index}`}\n                setPages={setPages}\n            />)}\n    </DiffImage>","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport Modal from 'antd/lib/modal';\nimport { PngDiffData, PageData } from '../server/typing';\nimport { Page } from './Page';\nimport { DiffImageWithZone } from '../diff/DiffImageWithZone';\n\nconst onClick = (setVisible: React.Dispatch<React.SetStateAction<boolean>>) => () => {\n    setVisible(true);\n}\n\nconst onCancel = (setVisible: React.Dispatch<React.SetStateAction<boolean>>) => () => {\n    setVisible(false);\n}\n\ninterface Props {\n    projectId: string;\n    timestamp: string;\n    id: string;\n    url: string;\n    pageError: any;\n    png: {\n        width: number;\n        diff?: PngDiffData;\n    };\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nexport const PagesActionFullscreen = ({ setPages, projectId, timestamp, id, png, url, pageError }: Props) => {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    return (\n        <>\n            <Modal\n                title=\"\"\n                visible={visible}\n                onCancel={onCancel(setVisible)}\n                footer={null}\n                width={png.width + 40}\n            >\n                <div style={{ position: \"relative\" }}>\n                    <DiffImageWithZone\n                        setPages={setPages}\n                        projectId={projectId}\n                        folder={timestamp}\n                        id={id}\n                        zones={png.diff && png.diff.zones}\n                        originalWidth={png.width}\n                        width={png.width}\n                        marginLeft={0}\n                    />\n                    <Page url={url} pageError={pageError} png={png} />\n                </div>\n            </Modal>\n            <Icon type=\"fullscreen\" title=\"fullscreen\" onClick={onClick(setVisible)} />\n        </>\n    );\n}\n","import React from 'react';\nimport { PngDiffData, PageData } from '../server/typing';\n\nimport { PagesActionZone } from './PagesActionZone';\nimport PagesActionPin from './PagesActionPin';\nimport { PagesActionFullscreen } from './PagesActionFullscreen';\n\ninterface Props {\n    projectId: string;\n    timestamp: string;\n    id: string;\n    url: string;\n    pageError: any;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n    setPages: React.Dispatch<React.SetStateAction<PageData[]>>;\n}\n\nexport const PagesActions = ({ setPages, projectId, timestamp, id, png, url, pageError }: Props) => [\n    ...[png && <PagesActionFullscreen setPages={setPages} projectId={projectId} png={png} id={id} timestamp={timestamp} url={url} pageError={pageError} />],\n    <PagesActionZone type=\"check\" setPages={setPages} projectId={projectId}  timestamp={timestamp} id={id} status={'valid'} />,\n    <PagesActionZone type=\"warning\" setPages={setPages} projectId={projectId} timestamp={timestamp} id={id} status={'report'} />,\n    <PagesActionPin projectId={projectId} timestamp={timestamp} id={id} />,\n    // <Icon type=\"ellipsis\" title=\"more\" />,\n];\n","import React from 'react';\n\nconst load = <T>(\n    fn: () => Promise<any>,\n    setResult: React.Dispatch<React.SetStateAction<T>>,\n    setError: React.Dispatch<React.SetStateAction<any | undefined>>,\n    setLoading: React.Dispatch<React.SetStateAction<boolean>>,\n) => async () => {\n    try {\n        setError(undefined);\n        setLoading(true);\n        const result = await fn();\n        setResult(result);\n    } catch (error) {\n        setError(error);\n    }\n    setLoading(false);\n}\nexport const useAsync = <T>(\n    fn: () => Promise<any>,\n    deps: React.DependencyList = [],\n    initialValue?: any,\n) => {\n    const [result, setResult] = React.useState<T>(initialValue);\n    const [error, setError] = React.useState();\n    const [loading, setLoading] = React.useState(false);\n    const call = load<T>(fn, setResult, setError, setLoading);\n    React.useEffect(() => { call(); }, deps);\n    return { loading, result, call, error, setResult }\n}","import React from 'react';\nimport Card from 'antd/lib/card';\nimport Spin from 'antd/lib/spin';\nimport Masonry from 'react-masonry-component';\nimport { useAsyncCacheEffect } from 'react-async-cache';\n\nimport {\n    masonryStyle,\n    masonryOptions,\n    cardStyle,\n    cardImgMargin,\n} from './pageStyle';\nimport { PageData } from '../server/typing';\nimport { getPages } from '../server/service';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { Search } from '../search/Search';\nimport { Page } from './Page';\nimport { PagesActions } from './PagesActions';\nimport { availableFilters } from '../search/search';\nimport { setMasonry, onMasonryImg } from '../common/refreshMasonry';\nimport { DiffImageWithZone } from '../diff/DiffImageWithZone';\nimport { useAsync } from '../hook/useAsync';\n\ninterface Props {\n    projectId: string;\n    timestamp: string;\n    lastUpdate: number;\n}\n\nexport const Pages = ({ projectId, timestamp, lastUpdate }: Props) => {\n    const { result: pages, error, setResult: setPages } = useAsync<PageData[]>(\n        () => getPages(projectId, timestamp),\n        [lastUpdate],\n    );\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n\n    return (\n        <Search response={pages} withFilters={availableFilters}>\n            {(pagesFiltered) => pagesFiltered ? (\n                <Masonry\n                    style={masonryStyle}\n                    options={masonryOptions}\n                    ref={(c: any) => { setMasonry(c && c.masonry); }}\n                >\n                    {\n                        pagesFiltered.map(({ id, url, png, error: pageError }: PageData) => (\n                            <Card\n                                key={id}\n                                style={cardStyle}\n                                cover={png && <DiffImageWithZone\n                                    projectId={projectId}\n                                    folder={timestamp}\n                                    id={id}\n                                    zones={png.diff && png.diff.zones}\n                                    originalWidth={png.width}\n                                    onImg={onMasonryImg}\n                                    setPages={setPages}\n                                    marginLeft={cardImgMargin}\n                                />}\n                                actions={PagesActions({ setPages, projectId, id, timestamp, png, url, pageError })}\n                            >\n                                <Page url={url} pageError={pageError} png={png} />\n                            </Card>\n                        ))\n                    }\n                </Masonry >\n            ) : <Spin />\n            }\n        </Search>);\n}\n","import React from 'react';\nimport Switch from 'antd/lib/switch';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { setStatus } from '../server/service';\nimport { Crawler } from '../server/typing';\n\nconst onChange = (\n    projectId: string,\n    timestamp: string,\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>,\n) => async (value: boolean) => {\n    try {\n        const status = value ? 'done' : 'review';\n        const crawler = await setStatus(projectId, timestamp, status);\n        setCrawler(crawler);\n        message.success(`Status set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\ninterface Props {\n    projectId: string;\n    timestamp: number;\n    status: string;\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>;\n}\nexport const SwitchStatus = ({ timestamp, status, projectId, setCrawler }: Props) => {\n    return <Switch\n        checkedChildren=\"done\"\n        unCheckedChildren=\"review\"\n        checked={status === 'done'}\n        onChange={onChange(projectId, timestamp.toString(), setCrawler)}\n    />;\n}","import notification from 'antd/lib/notification';\nimport { Project } from '../server/typing';\nimport { loadProject } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\n\nexport const useProject = (projectId: string) => {\n    const { result: project, setResult: setProject, error } =\n        useAsync<Project>(() => loadProject(projectId));\n    if (error) {\n        notification['warning']({\n            message: 'Something went wrong while loading project.',\n            description: error.toString(),\n        });\n    }\n    return { project, setProject };\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { getProjectRoute } from '../routes';\nimport { useProject } from './useProject';\n\ninterface Props {\n    projectId: string;\n}\n\nexport const ProjectName = ({\n    projectId\n}: Props) => {\n    const { project } = useProject(projectId);\n    return !project ? null : (\n        <p>\n            <b>Project:</b> <Link to={getProjectRoute(project.id)}>\n                {project.name}\n            </Link>\n        </p>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport Progress from 'antd/lib/progress';\nimport Icon from 'antd/lib/icon';\nimport { Crawler } from '../server/typing';\nimport { duration } from 'moment';\nimport 'moment-duration-format';\n\nimport { timestampToString } from '../utils';\nimport { SwitchStatus } from './SwitchStatus';\nimport { getViewportName } from '../viewport';\nimport { ProjectName } from '../projects/ProjectName';\n\nconst { Title } = Typography;\n\nconst warningStyle = {\n    color: '#faad29',\n};\n\nconst limitStyle = {\n    color: '#999',\n    fontSize: 11,\n};\n\ninterface Props {\n    setCrawler: React.Dispatch<React.SetStateAction<Crawler>>;\n    crawler: Crawler;\n    projectId: string;\n}\n\n// need to flatten props and use react memo\nexport const CrawlerInfo = ({\n    crawler: {\n        timestamp,\n        url,\n        diffZoneCount,\n        errorCount,\n        status,\n        urlsCount,\n        inQueue,\n        startAt,\n        lastUpdate,\n        limit,\n        viewport,\n    },\n    projectId,\n    setCrawler,\n}: Props) => {\n    const total = urlsCount + inQueue;\n    const percent = Math.floor(urlsCount / total * 100);\n    const screen = getViewportName(viewport);\n    return (\n        <>\n            <Title level={3}>{timestampToString(timestamp)}</Title>\n            {(diffZoneCount > 0 || errorCount > 0)\n                && <p><SwitchStatus setCrawler={setCrawler} projectId={projectId} status={status} timestamp={timestamp} /></p>}\n            <ProjectName projectId={projectId} />\n            <p><b>URL:</b> {url}</p>\n            <p><b>Screen:</b> {screen}</p>\n            <p>\n                <b>URL crawled:</b> {urlsCount}\n                {limit !== undefined && limit > 0 &&\n                    <span style={limitStyle}> (with limit set to {limit})</span>\n                }\n            </p>\n            <p><b>Duration:</b> {duration(lastUpdate - startAt).format('h [hrs], m [min], s [sec]')}</p>\n            {inQueue > 0 && <>\n                <Progress percent={percent} />\n                <p><b>In queue:</b> {inQueue}</p>\n            </>}\n            {errorCount > 0 &&\n                <p style={warningStyle}>\n                    <Icon type=\"exclamation-circle\" /> {errorCount} error(s) founds\n                </p>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { subscrib, unsubscrib } from 'isomor';\n\nimport { Pages } from '../pages/Pages';\nimport { CrawlerInfo } from './CrawlerInfo';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { useAsync } from '../hook/useAsync';\nimport { Crawler } from '../server/typing';\nimport { getCrawler } from '../server/service';\n\nexport const CrawlerResults = ({\n    match: { params: { timestamp, projectId } },\n}: RouteComponentProps<{ timestamp: string, projectId: string }>) => {\n    const { result: crawler, error, setResult: setCrawler } = useAsync<Crawler>(\n        () => getCrawler(projectId, timestamp)\n    );\n    React.useEffect(() => {\n        const id = subscrib(setCrawler);\n        return () => unsubscrib(id);\n    }, [crawler]);\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    const lastUpdate = crawler?.lastUpdate;\n    return crawler ? (\n        <>\n            <CrawlerInfo crawler={crawler} projectId={projectId} setCrawler={setCrawler} />\n            <Pages timestamp={timestamp} lastUpdate={lastUpdate!} projectId={projectId} />\n        </>\n    ) : <Spin />;\n}\n","import React from 'react';\nimport Card from 'antd/lib/card';\nimport Icon from 'antd/lib/icon';\nimport Popconfirm from 'antd/lib/popconfirm';\n\nimport {\n    cardStyle,\n    iconTheme,\n} from '../pages/pageStyle';\nimport { DiffImage } from '../diff/DiffImage';\nimport { PngDiffData, Viewport, PageData } from '../server/typing';\nimport { Link } from 'react-router-dom';\nimport { getCodeRoute } from '../routes';\nimport { getViewportName } from '../viewport';\nimport { removePin } from '../server/service';\n\nconst handleDelete = (\n    projectId: string,\n    id: string,\n    setPins: React.Dispatch<React.SetStateAction<PageData[]>>,\n) => async () => {\n    const pins = await removePin(projectId, id);\n    setPins(pins);\n}\n\ninterface Props {\n    projectId: string;\n    id: string;\n    url: string;\n    setPins: React.Dispatch<React.SetStateAction<PageData[]>>;\n    viewport?: Viewport,\n    onImg: () => void;\n    png?: {\n        width: number;\n        diff?: PngDiffData;\n    };\n}\n\nexport const PinPage = ({ projectId, id, url, viewport, onImg, png, setPins }: Props) => (\n    <Card\n        style={cardStyle}\n        cover={png && <DiffImage folder='base' id={id} onImg={onImg} projectId={projectId} />}\n        actions={[\n            <Popconfirm\n                title=\"Are you sure delete this pin?\"\n                onConfirm={handleDelete(projectId, id, setPins)}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"delete\" title={`Delete pin`} />\n            </Popconfirm>,\n            (<Link to={{\n                pathname: getCodeRoute(projectId, id),\n                state: { pattern: url }\n            }}>\n                <Icon type=\"code\" title={`Insert code while crawling`} />\n            </Link>),\n        ]}\n    >\n        <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n        {!png && <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>}\n        {viewport && <p><Icon type=\"picture\" theme={iconTheme} /> {getViewportName(viewport)}</p>}\n    </Card>\n);\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Masonry from 'react-masonry-component';\n\nimport {\n    masonryStyle,\n    masonryOptions,\n} from '../pages/pageStyle';\nimport { PageData } from '../server/typing';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { PinPage } from './PinPage';\nimport { Search } from '../search/Search';\nimport { setMasonry, onMasonryImg } from '../common/refreshMasonry';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { ProjectName } from '../projects/ProjectName';\nimport { useAsync } from '../hook/useAsync';\nimport { getPins } from '../server/service';\n\nconst { Title } = Typography;\n\nexport const Pins = ({\n    match: { params: { projectId } },\n}: RouteComponentProps<{ projectId: string }>) => {\n    const { result, error, setResult: setPins } = useAsync<PageData[]>(\n        () => getPins(projectId)\n    );\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n\n    return (\n        <>\n            <Title level={3}>Pins</Title>\n            <ProjectName projectId={projectId} />\n            <Search response={result}>\n                {(pins) => pins ? (\n                    <Masonry\n                        style={masonryStyle}\n                        options={masonryOptions}\n                        ref={(c: any) => { setMasonry(c && c.masonry); }}\n                    >\n                        {pins.map(({ id, url, png, viewport }: PageData) => (\n                            <PinPage\n                                projectId={projectId}\n                                id={id}\n                                key={id}\n                                url={url}\n                                setPins={setPins}\n                                png={png}\n                                viewport={viewport}\n                                onImg={onMasonryImg}\n                            />\n                        ))}\n                    </Masonry>\n                ) : <Spin />\n                }\n            </Search>\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\n\nimport { Info } from '../common/Info';\n\nconst { Paragraph, Text } = Typography;\n\nexport const CodeInfo = ({full = true}) => (\n    <Info>\n        <Paragraph>\n            Inject some code in the crawler while parsing the page. This code will\n            be executed just after the page finish loaded, before to make the screenshot and\n            before extracting the links. {full && <>You need to export a function that will take as\n            first parameter the <Text code>page</Text> coming from Puppeteer.</>}\n        </Paragraph>\n        {full && <Paragraph>\n            <Text code>module.exports = async (page) => ...some code</Text>\n        </Paragraph>}\n    </Info>\n);\n","import { cardStyle } from \"../pages/pageStyle\";\n\nexport const aceEditorStyle = {\n    border: '1px solid #EEE',\n    marginBottom: 15,\n    marginRight: 15,\n    float: 'left' as 'left',\n}\n\nexport const cardRightStyle = {\n    ...cardStyle,\n    float: 'left' as 'left',\n}\n\nexport const buttonBarStyle = {\n    marginBottom: 15,\n}\n\nexport const buttonStyle = {\n    marginRight: 10,\n}\n\nexport const inputStyle = {\n    maxWidth: 500,\n    margin: '0px 0px 10px 0px',\n}\n","import React from 'react';\nimport Input from 'antd/lib/input';\nimport notification from 'antd/lib/notification';\nimport Icon from 'antd/lib/icon';\nimport Button from 'antd/lib/button';\nimport message from 'antd/lib/message';\nimport Dropdown from 'antd/lib/dropdown';\nimport Typography from 'antd/lib/typography';\nimport Form, { FormComponentProps } from 'antd/lib/form';\nimport { Code } from '../server/typing';\n\nimport { setCode } from '../server/service';\nimport { codeSnippet } from './CodeSnippet';\nimport { buttonBarStyle, buttonStyle, inputStyle } from './codeStyle';\nimport { Info } from '../common/Info';\nimport { Location } from 'history';\n\nconst { Paragraph } = Typography;\n\ninterface FormInput extends HTMLFormElement {\n    name: string,\n    pattern: string,\n}\n\nconst onPlay = () => {\n    message.warn('To be implemented.', 2);\n}\n\nconst save = async (\n    projectId: string,\n    id: string,\n    source: string,\n    info: FormInput,\n) => {\n    try {\n        await setCode(projectId, {\n            id,\n            source,\n            ...info,\n        });\n        message.success('Code saved.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst handleSubmit = (\n    projectId: string,\n    id: string,\n    source: string,\n    validateFields: any,\n) => (event: React.FormEvent<FormInput>) => {\n    event.preventDefault();\n    validateFields((err: any, info: FormInput) => {\n        if (!err) {\n            save(projectId, id, source, info);\n        }\n    });\n}\n\ntype Props = FormComponentProps & {\n    projectId: string;\n    id: string;\n    code: Code;\n    location: Location<{ pattern: string }>;\n    setSource: (source: string) => void;\n};\n\nconst CodeFormComponent = ({\n    projectId,\n    setSource,\n    id,\n    code,\n    form: { getFieldDecorator, validateFields },\n    location: { state },\n}: Props) => {\n    return (\n        <Form onSubmit={handleSubmit(projectId, id, code.source, validateFields)}>\n            <Form.Item style={inputStyle}>\n                {getFieldDecorator('name', {\n                    initialValue: code.name || '',\n                })(\n                    <Input addonBefore=\"Name\" />\n                )}\n            </Form.Item>\n            <Form.Item style={inputStyle}>\n                {getFieldDecorator('pattern', {\n                    rules: [{ required: true, message: 'Please input a pattern!' }],\n                    initialValue: code.pattern || (state && state.pattern) || '',\n                })(\n                    <Input addonBefore=\"Pattern\" />\n                )}\n            </Form.Item>\n            <Info>\n                <Paragraph>\n                    Pattern is using <a href=\"https://www.npmjs.com/package/minimatch\" target=\"_blank\">minimatch</a> to\n                    match the urls to inject the code.\n                    It works by converting glob expressions into JavaScript RegExp objects.\n                </Paragraph>\n            </Info>\n            <div style={buttonBarStyle}>\n                <Button icon=\"save\" htmlType=\"submit\" style={buttonStyle}>Save</Button>\n                <Button icon=\"caret-right\" onClick={onPlay} style={buttonStyle}>Preview</Button>\n                <Dropdown overlay={codeSnippet(setSource)}>\n                    <Button style={buttonStyle}>\n                        Code snippet <Icon type=\"down\" />\n                    </Button>\n                </Dropdown>\n            </div>\n        </Form>\n    );\n}\n\nexport const CodeForm = Form.create<Props>({ name: 'code' })(CodeFormComponent);\n","import React from 'react';\nimport Menu from 'antd/lib/menu';\n\nexport const codeSnippet = (setCode: (source: string) => void) => (\n    <Menu>\n        <Menu.Item\n            key=\"1\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    await page.evaluate(() => {\n        const div = document.createElement(\"div\");\n        div.innerHTML = \"Test-crawler is awesome!\";\n        document.body.insertBefore(div, document.body.firstChild);\n    });\n}`\n                );\n            }}\n        >\n            Test-crawler is awesome\n        </Menu.Item>\n        <Menu.Item\n            key=\"2\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    return await page.evaluate(() => {\n        Array.from(document.body.getElementsByTagName(\"a\"))\n             .filter(a => !a.href)\n             .forEach(a => a.click());\n        return Array.from(document.links).map(\n            link => link.href.replace('/?', '/iframe.html?')\n        );\n    });\n}`\n                );\n            }}\n        >\n            Storybook\n        </Menu.Item>\n        <Menu.Item\n            key=\"3\"\n            onClick={() => {\n                setCode(\n`// expect library from jest is installed by default\n// but you can use any assertion tool of your choice\n// just install it and use it here :D\nconst expect = require('expect');\n\nmodule.exports = async function run(page) {\n  await expect(page.title()).resolves.toMatch('React App');\n  expect('a').toBe('b'); // fail\n}`\n                );\n            }}\n        >\n            Expect assetion example\n        </Menu.Item>\n    </Menu>\n);","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Form from 'antd/lib/form';\nimport AceEditor from 'react-ace';\nimport { RouteComponentProps } from 'react-router';\nimport { Code as CodeType } from '../server/typing';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\n\nimport { getCode } from '../server/service';\nimport { CodeInfo } from './CodeInfo';\nimport { aceEditorStyle } from './codeStyle';\nimport { CodeForm } from './CodeFrom';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { ProjectName } from '../projects/ProjectName';\nimport { useAsync } from '../hook/useAsync';\n\nconst { Title } = Typography;\n\nconst setSource = (\n    code: CodeType,\n    setCode: React.Dispatch<React.SetStateAction<CodeType>>,\n) => (source: string) => {\n    setCode({\n        ...code,\n        source,\n    })\n}\n\ntype Props = RouteComponentProps<{ id: string, projectId: string }>;\n\nexport const Code = ({ match: { params: { id, projectId } }, location }: Props) => {\n    const { error, result: code, setResult: setCode } = useAsync<CodeType>(() => getCode(projectId, id));\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    // instead to getPin, there should be a special endpoint retriving a\n    // list of pages matching the pattern\n    // (when it is coming from pin, pattern should be already be filled out)\n    return (\n        <>\n            <Title level={3}>Add some code</Title>\n            {\n                code ? (\n                    <Form>\n                        <CodeInfo />\n                        <ProjectName projectId={projectId} />\n                        <CodeForm\n                            projectId={projectId}\n                            id={id}\n                            code={code}\n                            setSource={setSource(code, setCode)}\n                            location={location}\n                        />\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow\"\n                            onChange={setSource(code, setCode)}\n                            fontSize={14}\n                            value={code.source.length\n                                ? code.source\n                                : `module.exports = async function run(page) {\\n// your code\\n}`}\n                            style={aceEditorStyle}\n                        />\n                        {/* {pin && <CodeCard id={pin.id} png={pin.png} url={pin.url} projectId={projectId} />} */}\n                    </Form>\n                ) : <Spin />\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport Spin from 'antd/lib/spin';\n\nimport { getSettings, startCrawlers } from './server/service';\nimport Button from 'antd/lib/button';\n\nconst { Title } = Typography;\n\nconst load = async (\n    setSettings: React.Dispatch<any>,\n) => {\n    setSettings(await getSettings());\n}\n\nexport const Settings = () => {\n    const [settings, setSettings] = React.useState();\n\n    React.useEffect(() => { load(setSettings); }, []);\n\n    return (\n        <>\n            <Title level={3}>Settings</Title>\n            {settings ? (\n                <>\n                    <p><b>Dir:</b> {settings.dir}</p>\n                </>\n            ) : <Spin />}\n            <p>\n                <Button\n                    icon=\"caret-right\"\n                    size=\"small\"\n                    onClick={startCrawlers}\n                >\n                    Start crawlers\n                </Button>\n            </p>\n        </>\n    );\n}\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport List from 'antd/lib/list';\nimport Button from 'antd/lib/button';\nimport Typography from 'antd/lib/typography';\nimport { CodeInfoList } from '../server/typing';\n\nimport { getCodes } from '../server/service';\nimport { CodeInfo } from './CodeInfo';\nimport { ErrorHandler } from '../common/ErrorHandler';\nimport { Link } from 'react-router-dom';\nimport { getCodeRoute } from '../routes';\nimport { useAsync } from '../hook/useAsync';\n\nconst { Title, Text } = Typography;\n\ninterface Props {\n    projectId: string;\n}\nexport const Codes = ({ projectId }: Props) => {\n    const { error, result } = useAsync<CodeInfoList>(() => getCodes(projectId));\n    if (error) {\n        return <ErrorHandler description={error.toString()} />;\n    }\n    return (\n        <>\n            <Title level={3}>Codes</Title>\n            <CodeInfo full={false} />\n            {\n                result\n                    ? <List\n                        bordered\n                        dataSource={Object.values(result)}\n                        renderItem={({ id, name, pattern }) => (\n                            <List.Item\n                                actions={[\n                                    <Link to={getCodeRoute(projectId, id)}>\n                                        Edit\n                                    </Link>,\n                                ]}\n                            >\n                                <List.Item.Meta\n                                    title={\n                                        <Link to={getCodeRoute(projectId, id)}>\n                                            {name} <Text code>{pattern}</Text>\n                                        </Link>\n                                    }\n                                />\n                            </List.Item>\n                        )}\n                    />\n                    : <Spin />\n            }\n            <br />\n            <Link to={getCodeRoute(projectId, Math.floor(Date.now() / 1000).toString())}>\n                <Button icon=\"plus\" size=\"small\">New code</Button>\n            </Link>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport { Project as ProjectType } from '../server/typing';\nimport { saveProject, startCrawlerFromProject } from '../server/service';\nimport Spin from 'antd/lib/spin';\nimport { getViewportName } from '../viewport';\nimport Icon from 'antd/lib/icon';\nimport Checkbox, { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { History } from 'history';\nimport { getResultsRoute, getPinsRoute } from '../routes';\nimport Button from 'antd/lib/button';\nimport { useProject } from './useProject';\nimport { useCrawlers } from './useCrawlers';\nimport List from 'antd/lib/list';\nimport { timestampToString } from '../utils';\nimport { Codes } from '../code/Codes';\n\nconst onStart = (\n    history: History<any>,\n    projectId: string,\n) => async () => {\n    try {\n        const response = await startCrawlerFromProject(projectId);\n        history.push(getResultsRoute(projectId, response.crawler.timestamp.toString()));\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst onAutoPinChange = (\n    { name, id, crawlerInput }: ProjectType,\n    setProject: React.Dispatch<React.SetStateAction<ProjectType>>,\n) => async ({ target: { checked } }: CheckboxChangeEvent) => {\n    const project = await saveProject({ ...crawlerInput, autopin: checked }, name, id);\n    setProject(project);\n}\n\nconst getCrawlerStatusIcon = (diffZoneCount: number, errorCount: number, status: string, inQueue: number) => {\n    if (inQueue > 0) {\n        return 'loading';\n    }\n    if (!diffZoneCount && errorCount === 0) {\n        return 'check';\n    }\n    if (status === 'done') {\n        return 'issues-close';\n    }\n    return 'exclamation-circle';\n}\n\nexport const Project = ({\n    match: { params: { projectId } },\n    history,\n}: RouteComponentProps<{ projectId: string }>) => {\n    const { project, setProject } = useProject(projectId);\n    const { crawlers } = useCrawlers(projectId);\n    return (\n        <>\n            <Typography.Title level={3}>Project</Typography.Title>\n            {!project ? <Spin /> : <>\n                <p><b>Name:</b> {project.name}</p>\n                <p><b>ID:</b> {projectId}</p>\n                <p><b>URL:</b> {project.crawlerInput.url}</p>\n                <p><b>Screen:</b> {getViewportName(project.crawlerInput.viewport)}</p>\n                <p><b>Method:</b>\n                    {project.crawlerInput.method === 'urls'\n                        ? <> <Icon type=\"ordered-list\" /> URLs list</>\n                        : <> <Icon type=\"radar-chart\" /> Spider bot\n                            {!!project.crawlerInput.limit && <span style={{ color: '#999', fontSize: 12 }}> (Limit: {project.crawlerInput.limit})</span>}\n                        </>\n                    }\n                </p>\n                <p>\n                    <Checkbox\n                        checked={project.crawlerInput.autopin}\n                        onChange={onAutoPinChange(project, setProject)}\n                    >\n                        Automatically pin new page founds.\n                    </Checkbox>\n                </p>\n                <p>\n                    <Button\n                        icon=\"caret-right\"\n                        size=\"small\"\n                        onClick={onStart(history, projectId)}\n                    >\n                        Run\n                    </Button> &nbsp;\n                    <Link to={getPinsRoute(projectId)}>\n                        <Button\n                            icon=\"pushpin\"\n                            size=\"small\"\n                        >\n                            Pins\n                        </Button>\n                    </Link>\n                </p>\n                <List\n                    itemLayout=\"horizontal\"\n                    bordered\n                    dataSource={crawlers}\n                    renderItem={({ timestamp, diffZoneCount, errorCount, status, inQueue }) => (\n                        <List.Item\n                            actions={[\n                                <Link to={getResultsRoute(projectId, timestamp.toString())}>\n                                    Open\n                                </Link>,\n                            ]}\n                        >\n                            <List.Item.Meta\n                                title={\n                                    <Link to={getResultsRoute(projectId, timestamp.toString())}>\n                                        {timestampToString(timestamp)}\n                                    </Link>}\n                                description={<>\n                                    <Icon type={getCrawlerStatusIcon(diffZoneCount, errorCount, status, inQueue)} />\n                                    <span> Diff: {diffZoneCount} - Error: {errorCount} - In queue: {inQueue}</span>\n                                </>}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </>}\n            <br />\n            <Codes projectId={projectId} />\n        </>\n    );\n}\n","import notification from 'antd/lib/notification';\nimport { getCrawlers } from '../server/service';\nimport { useAsync } from '../hook/useAsync';\nimport { Crawler } from '../server/typing';\n\nexport const useCrawlers = (projectId: string) => {\n    const { result: crawlers, setResult: setCrawlers, error } = useAsync<Crawler[]>(async () => {\n        const list = await getCrawlers(projectId);\n        return list.sort(({ timestamp: a }: any, { timestamp: b }: any) => b - a);\n    });\n    if (error) {\n        notification['warning']({\n            message: 'Something went wrong while loading crawlers from project.',\n            description: error.toString(),\n        });\n    }\n    return {crawlers, setCrawlers };\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport { useProject } from './useProject';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute } from '../routes';\n\nexport const ProjectBreadcrumb = ({\n    match: { params: { projectId } },\n}: RouteComponentProps<{ projectId: string }>) => {\n    const { project } = useProject(projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(projectId)}>{project?.name}</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getResultsRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\nimport { timestampToString } from '../utils';\n\nexport const CrawlerResultsBreadcrumb = ({\n    match: { params: { projectId, timestamp } },\n}: RouteComponentProps<{ projectId: string, timestamp: string }>) => {\n    const { project } = useProject(projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item>\n                <Link to={getResultsRoute(projectId, timestamp)}>\n                    Results: {timestampToString(parseInt(timestamp, 10))}\n                </Link>\n            </Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getPinsRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\n\nexport const PinsBreadcrumb = ({\n    match: { params: { projectId } },\n}: RouteComponentProps<{ projectId: string }>) => {\n    const { project } = useProject(projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getPinsRoute(projectId)}>Pins</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { getHomeRoute, getProjectRoute, getCodeRoute } from '../routes';\nimport { useProject } from '../projects/useProject';\n\nexport const CodeBreadcrumb = ({\n    match: { params: { projectId, id } },\n}: RouteComponentProps<{ projectId: string, id: string }>) => {\n    const { project } = useProject(projectId);\n    return (\n        <>\n            <Breadcrumb.Item><Link to={getHomeRoute()}>Projects</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getProjectRoute(projectId)}>{project?.name}</Link></Breadcrumb.Item>\n            <Breadcrumb.Item><Link to={getCodeRoute(projectId, id)}>Code</Link></Breadcrumb.Item>\n        </>\n    );\n}\n","import React from 'react';\nimport Layout from 'antd/lib/layout';\nimport Typography from 'antd/lib/typography';\nimport Breadcrumb from 'antd/lib/breadcrumb';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport './App.css';\nimport NewProject from './projects/new/NewProject';\nimport { Projects } from './projects/Projects';\nimport { CrawlerResults } from './crawler/CrawlerResults';\nimport {\n    getHomeRoute, getResultsRoute, getPinsRoute, getProjectRoute,\n    getCodeRoute, getSettingsRoute, getNewProjectRoute\n} from './routes';\nimport { Pins } from './pin/Pins';\nimport { Code } from './code/Code';\nimport { Settings } from './Settings';\nimport { Project } from './projects/Project';\nimport Menu from 'antd/lib/menu';\nimport Icon from 'antd/lib/icon';\nimport { ProjectBreadcrumb } from './projects/ProjectBreadcrumb';\nimport { CrawlerResultsBreadcrumb } from './crawler/CrawlerResultsBreadcrumb';\nimport { PinsBreadcrumb } from './pin/PinsBreadcrumb';\nimport { CodeBreadcrumb } from './code/CodeBreadcrumb';\n\nconst { Content, Header } = Layout;\nconst { Title } = Typography;\n\nconst layoutStyle = {\n    minHeight: '100vh',\n};\nconst titleStyle = {\n    color: '#fff',\n    marginTop: 15,\n    marginRight: 15,\n    float: 'left' as any,\n}\nconst contentStyle = {\n    background: '#fff',\n    padding: 24,\n    margin: 10,\n    minHeight: 280,\n};\n\nconst App = () => (\n    <Router>\n        <Layout style={layoutStyle}>\n            <Header>\n                <Link to={getHomeRoute()}>\n                    <Title level={3} style={titleStyle}>\n                        Test-crawler\n                    </Title>\n                </Link>\n                <Menu\n                    theme=\"dark\"\n                    mode=\"horizontal\"\n                    style={{ lineHeight: '64px' }}\n                >\n                    <Menu.Item key=\"projects\">\n                        <Icon type=\"folder\" />\n                        <span className=\"nav-text\">Projects</span>\n                        <Link to={getHomeRoute()} />\n                    </Menu.Item>\n                    <Menu.Item key=\"settings\" style={{ float: 'right' }} >\n                        <Link to={getSettingsRoute()}>\n                            <Icon type=\"setting\" />\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </Header>\n            <Breadcrumb style={{ margin: '10px 0 0 10px' }}>\n                <Route path={getProjectRoute(':projectId')} exact component={ProjectBreadcrumb} />\n                <Route path={getResultsRoute(':projectId', ':timestamp')} exact component={CrawlerResultsBreadcrumb} />\n                <Route path={getPinsRoute(':projectId')} exact component={PinsBreadcrumb} />\n                <Route path={getCodeRoute(':projectId', ':id')} exact component={CodeBreadcrumb} />\n            </Breadcrumb>\n            <Content style={contentStyle}>\n                <Route path={getHomeRoute()} exact component={Projects} />\n                <Route path={getNewProjectRoute()} exact component={NewProject} />\n                <Route path={getPinsRoute(':projectId')} exact component={Pins} />\n                <Route path={getSettingsRoute()} exact component={Settings} />\n                <Route path={getCodeRoute(':projectId', ':id')} exact component={Code} />\n                <Route path={getResultsRoute(':projectId', ':timestamp')} component={CrawlerResults} />\n                <Route path={getProjectRoute(':projectId')} exact component={Project} />\n            </Content>\n        </Layout>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AsyncCacheProvider } from 'react-async-cache';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((<AsyncCacheProvider><App /></AsyncCacheProvider>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
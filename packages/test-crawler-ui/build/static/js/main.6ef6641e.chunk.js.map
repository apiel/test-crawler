{"version":3,"sources":["routes.tsx","server/crawler.ts","Info.tsx","History.tsx","Preset.tsx","New.tsx","PagesActionPin.tsx","pageStyle.tsx","DiffImageButtons.tsx","DiffZone.tsx","DiffImage.tsx","PagesActionZone.tsx","Pages.tsx","utils/index.tsx","SwitchStatus.tsx","CrawlerInfo.tsx","SideMenu.tsx","Pins.tsx","PinCodeSnippet.tsx","PinCode.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getPinCodeRoute","id","concat","getHistoryRoute","timestamp","getCrawlers","_len","arguments","length","args","Array","_key","remote","loadPresets","_len2","_key2","saveAndStart","_len3","_key3","getCrawler","_len4","_key4","getPages","_len5","_key5","getPins","_len6","_key6","getPin","_len7","_key7","setPinCode","_len8","_key8","getPinCode","_len9","_key9","getThumbnail","_len10","_key10","pin","_len11","_key11","setZoneStatus","_len12","_key12","setZonesStatus","_len13","_key13","setStatus","_len14","_key14","timer","infoStyle","lineHeight","borderLeft","paddingLeft","color","textAlign","Info","_ref","children","react_default","a","createElement","style","menu","presets","setPreset","menu_default","map","preset","Item","key","onClick","name","Preset","setDefault","_useState","useState","_useState2","Object","slicedToArray","setPresets","load","_ref2","asyncToGenerator","regenerator_default","mark","_callee","list","defaultIndex","wrap","_context","prev","next","sent","findIndex","_ref3","objectSpread","stop","apply","this","useEffect","dropdown_default","overlay","trigger","button_default","icon","Paragraph","Typography","Text","inlineStyle","marginRight","display","toolbarStyle","backgroundColor","padding","borderRadius","marginBottom","NewForm","Form","create","history","search","location","_ref$form","form","getFieldDecorator","validateFields","call","useIsomor","start","saveAs","input","response","objectWithoutProperties","viewport","width","height","push","crawler","toString","t0","notification","message","description","_x","_usePreset","initialPreset","crawlerInput","method","url","parse","usePreset","form_default","onSubmit","e","preventDefault","err","values","Preset_Preset","rules","required","initialValue","input_default","addonBefore","radio_default","Group","size","Button","value","icon_default","type","Info_Info","ellipsis","rows","expandable","htmlType","placeholder","code","onPin","success","src_PagesActionPin","props","title","PagesActionPin","coverStyle","imgStyle","cardStyle","imgMargin","masonryStyle","paddingTop","paddingBottom","masonryOptions","gutter","fitWidth","buttonStyle","marginLeft","onSetStatus","update","status","index","pages","DiffImageButtons","Fragment","getColorByStatus","zoneStyle","ratio","img","over","xMin","yMin","top","left","xMax","yMax","border","position","backgroundImage","backgroundPosition","DiffZone","folder","originalWidth","zone","thumb","setThumb","t1","_useState3","_useState4","hover","setHover","popover_default","content","DiffImageButtons_DiffImageButtons","onMouseOver","onMouseOut","DiffImage","zones","_ref$originalWidth","_ref$onImg","onImg","DiffZone_DiffZone","assign","alt","src","PagesActionZone","Pages","masonry","lastUpdate","_useIsomor","React","layout","clearTimeout","setTimeout","lib_default","options","ref","c","png","card_default","cover","DiffImage_DiffImage","diff","actions","PagesActionZone_PagesActionZone","href","theme","tag_default","pixelDiffRatio","_ref4","perStatus","_ref5","toArray","more","slice","toConsumableArray","filter","includes","spin_default","timestampToString","unix","calendar","onChange","SwitchStatus","switch_default","checkedChildren","unCheckedChildren","checked","Title","CrawlerInfo","_ref$crawler","diffZoneCount","urlsCount","inQueue","startAt","_ref$crawler$viewport","total","percent","Math","floor","level","pathname","stringify","duration","format","progress_default","SwitchStatus_SwitchStatus","History","match","params","cache","crawlers","isEqual","get","CrawlerInfo_CrawlerInfo","Pages_Pages","dividerStyle","borderTop","getIcon","SideMenu","mode","className","react_router_dom","to","sort","Pins","_React$useState","_React$useState2","pins","setPins","Pins_Title","codeSnippet","setCode","aceEditorStyle","float","cardRightStyle","buttonBarStyle","PinCode","_React$useState3","_React$useState4","setPin","t2","t3","onSave","_callee2","_context2","PinCode_Title","PinCode_Paragraph","PinCode_Text","warn","react_ace_lib_default","fontSize","Sider","Layout","Content","layoutStyle","minHeight","titleStyle","margin","contentStyle","background","App","layout_default","App_Title","SideMenu_SideMenu","react_router","path","exact","component","New","Boolean","window","hostname","ReactDOM","render","dist","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ef6641e.chunk.js","sourcesContent":["export const getHomeRoute = () => '/';\nexport const getPinsRoute = () => '/pins';\nexport const getPinCodeRoute = (id: string) => `/pin/code/${id}`;\nexport const getHistoryRoute = (timestamp: string) => `/history/${timestamp}`;","import { remote } from \"isomor\";\nexport function getCrawlers(...args: any) {\n  return remote(\"server-crawler\", \"getCrawlers\", args);\n}\nexport function loadPresets(...args: any) {\n  return remote(\"server-crawler\", \"loadPresets\", args);\n}\nexport function saveAndStart(...args: any) {\n  return remote(\"server-crawler\", \"saveAndStart\", args);\n}\nexport function getCrawler(...args: any) {\n  return remote(\"server-crawler\", \"getCrawler\", args);\n}\nexport function getPages(...args: any) {\n  return remote(\"server-crawler\", \"getPages\", args);\n}\nexport function getPins(...args: any) {\n  return remote(\"server-crawler\", \"getPins\", args);\n}\nexport function getPin(...args: any) {\n  return remote(\"server-crawler\", \"getPin\", args);\n}\nexport function setPinCode(...args: any) {\n  return remote(\"server-crawler\", \"setPinCode\", args);\n}\nexport function getPinCode(...args: any) {\n  return remote(\"server-crawler\", \"getPinCode\", args);\n}\nexport function getThumbnail(...args: any) {\n  return remote(\"server-crawler\", \"getThumbnail\", args);\n}\nexport function pin(...args: any) {\n  return remote(\"server-crawler\", \"pin\", args);\n}\nexport function setZoneStatus(...args: any) {\n  return remote(\"server-crawler\", \"setZoneStatus\", args);\n}\nexport function setZonesStatus(...args: any) {\n  return remote(\"server-crawler\", \"setZonesStatus\", args);\n}\nexport function setStatus(...args: any) {\n  return remote(\"server-crawler\", \"setStatus\", args);\n}","import React from 'react';\n\nconst infoStyle = {\n    lineHeight: 1.2,\n    borderLeft: '8px solid #EEE',\n    paddingLeft: 15,\n    color: '#666',\n    textAlign: 'justify' as 'justify',\n}\n\nexport const Info = ({ children }: any) => (\n    <div style={infoStyle}>\n        { children }\n    </div>\n);\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport { RouteComponentProps } from 'react-router-dom';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { Pages}  from './Pages';\nimport { CrawlerInfo } from './CrawlerInfo';\nimport { Crawler } from 'test-crawler-lib';\nimport { getCrawler, getCrawlers } from './server/crawler';\nimport { useIsomor } from 'isomor-react';\n\nlet timer: NodeJS.Timeout;\n\nexport const History = ({ match: { params: { timestamp } }, history }: RouteComponentProps<any>) => {\n    const { call, response, cache, update } = useIsomor<Crawler>(); //\n    React.useEffect(() => { call(getCrawler, timestamp); }, []);\n    React.useEffect(() => {\n        if (response) {\n            const crawlers = cache(getCrawlers) as Crawler[];\n            if (crawlers) {\n                const index = crawlers.findIndex(crawler => crawler.id === response.id);\n                if (index !== -1) {\n                    if (!isEqual(crawlers[index], response)) {\n                        crawlers[index] = response;\n                        update(crawlers, getCrawlers);\n                    }\n                }\n            }\n        }\n    }, [response]);\n    const lastUpdate = get(response, 'lastUpdate');\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n        call(getCrawler, timestamp);\n    }, 1000);\n    return response ? (\n        <>\n            <CrawlerInfo crawler={response} history={history} />\n            <Pages timestamp={timestamp} lastUpdate={lastUpdate} />\n        </>\n    ) : <Spin />;\n}\n","import React, { useState, useEffect } from 'react';\nimport Dropdown from 'antd/lib/dropdown';\nimport Button from 'antd/lib/button';\nimport Menu from 'antd/lib/menu';\nimport { Preset as PresetType } from 'test-crawler-lib';\nimport { loadPresets } from './server/crawler';\n\nconst menu = (presets: PresetType[], setPreset: React.Dispatch<React.SetStateAction<PresetType>>) => (\n    <Menu>\n        { presets && presets.map((preset) => (\n            <Menu.Item\n                key={`preset-${preset.id}`}\n                onClick={() => { setPreset(preset); }}\n            >\n                {preset.name}\n            </Menu.Item>\n        ))}\n    </Menu>\n);\n\nexport const Preset = ({ setPreset, setDefault }: any) => {\n    const [presets, setPresets] = useState<PresetType[]>([]);\n    const load = async () => {\n        const list = await loadPresets();\n        setPresets(list);\n        if (setDefault) {\n            const defaultIndex = list.findIndex(({ name }: PresetType) => name === 'Default');\n            if (defaultIndex !== -1) {\n                setPreset({ ...list[defaultIndex], name: '' });\n            }\n        }\n    }\n    useEffect(() => { load(); }, []);\n    return (\n        <Dropdown overlay={menu(presets, setPreset)} trigger={['click']}>\n            <Button icon=\"folder-open\">\n                Load saved preset\n            </Button>\n        </Dropdown>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport Input from 'antd/lib/input';\n// import Select from 'antd/lib/select';\nimport Form from 'antd/lib/form';\nimport Icon from 'antd/lib/icon';\nimport Radio from 'antd/lib/radio';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport Button from 'antd/lib/button';\nimport { parse } from 'query-string';\nimport { Preset as PresetType, CrawlerInput } from 'test-crawler-lib';\n\nimport { getHistoryRoute } from './routes';\nimport { saveAndStart, getCrawlers } from './server/crawler';\nimport { useIsomor } from 'isomor-react';\nimport { Info } from './Info';\nimport { Preset } from './Preset';\n// import { CrawlerMethod } from 'test-crawler-lib';\n\nconst { Paragraph, Text } = Typography;\n\nconst inlineStyle = {\n    marginRight: 10,\n    display: 'inline-block',\n}\n\nconst toolbarStyle = {\n    backgroundColor: '#EEE',\n    padding: '0px 10px',\n    borderRadius: 5,\n    marginBottom: 12,\n}\n\nconst usePreset = (search: string) => {\n    const initialPreset: PresetType = {\n        name: '',\n        id: '',\n        crawlerInput: {\n            method: 'spiderbot', // CrawlerMethod.SPIDER_BOT,\n            url: 'http://localhost:3003/',\n            viewport: { width: 800, height: 600 },\n        }\n    };\n    const [preset, setPreset] = useState<PresetType>(initialPreset);\n\n    useEffect(() => {\n        if (search) {\n            const crawlerInput = parse(search) as any as CrawlerInput;\n            setPreset({ ...initialPreset, crawlerInput });\n        }\n    }, [search]);\n\n    return { preset, setPreset };\n}\n\nconst New = ({ history, location: { search }, form: { getFieldDecorator, validateFields } }: any) => {\n    const { call } = useIsomor();\n    const start = async ({ saveAs, ...input }: any) => {\n        try {\n            const response = await saveAndStart({ ...input, viewport: { width: 800, height: 600 } }, saveAs);\n            await call(getCrawlers);\n            history.push(getHistoryRoute(response.crawler.timestamp.toString()));\n        } catch (error) {\n            notification['error']({\n                message: 'Something went wrong!',\n                description: error.toString(),\n            });\n        }\n    }\n    const handleSubmit = (e: any) => {\n        e.preventDefault();\n        validateFields((err: any, values: any) => {\n            if (!err) {\n                start(values);\n            }\n        });\n    }\n\n    const { preset, setPreset } = usePreset(search);\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Item style={toolbarStyle}>\n                <Preset setPreset={setPreset} setDefault={!search} />\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator('url', {\n                    rules: [{ required: true, message: 'Please input an URL to crawl!' }],\n                    initialValue: preset.crawlerInput.url,\n                })(\n                    <Input addonBefore=\"URL\" />\n                )}\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator('method', {\n                    initialValue: preset.crawlerInput.method,\n                })(\n                    <Radio.Group size=\"small\">\n                        <Radio.Button value={'spiderbot'}><Icon type=\"radar-chart\" /> Spider bot</Radio.Button>\n                        <Radio.Button value={'urls'}><Icon type=\"ordered-list\" /> URLs list</Radio.Button>\n                    </Radio.Group>\n                )}\n                <Info>\n                    <Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>Spider bot</b> crawling method will get all the links inside the page of the given URL\n                        and crawl the children. It will then continue do the same with the children till no new\n                        link is found. Be careful if you have big website, this might is most likely not the right\n                        solution for you.\n                    </Paragraph>\n                    <Paragraph ellipsis={{ rows: 1, expandable: true }}>\n                        <b>URLs list</b> crawling method will crawl a specific sets of URLs. In the URL input field\n                        you must provide an endpoint containing a list of URLs (a simple text format, with one URL\n                        per line). The crawler will crawl each of those URL only and will not try to find links in\n                        the page.\n                    </Paragraph>\n                </Info>\n            </Form.Item>\n            {/* <Form.Item>\n                {getFieldDecorator('viewport', {\n                    initialValue: '800x600',\n                })(\n                    <Select addonBefore=\"Viewport\">\n                        <Select.Option value='800x600'>800x600</Select.Option>\n                        <Select.Option value='320x480'>320x480 mobile</Select.Option>\n                    </Select>\n                )}\n            </Form.Item> */}\n            <Form.Item>\n                <Form.Item style={inlineStyle}>\n                    <Button\n                        type=\"primary\"\n                        icon=\"caret-right\"\n                        htmlType=\"submit\"\n                    >\n                        Start\n                    </Button>\n                </Form.Item>\n                <Form.Item style={inlineStyle}>\n                    {getFieldDecorator('saveAs', {\n                        initialValue: preset.name,\n                    })(\n                        <Input addonBefore=\"Save as\" placeholder=\"Leave empty to don't save\" />\n                    )}\n                </Form.Item>\n                <Info>\n                    <Paragraph>\n                        If you save as <Text code>Default</Text>, this preset will always be load per default.\n                    </Paragraph>\n                </Info>\n            </Form.Item>\n        </Form>\n    );\n}\n\nconst NewForm = Form.create({ name: 'start_crawler' })(New);\nexport default NewForm;\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { pin } from './server/crawler';\n\n\nconst onPin = ({ timestamp, id }: any) => async () => {\n    try {\n        await pin(timestamp.toString(), id);\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nconst PagesActionPin = (props: any) =>\n    <Icon\n        type=\"pushpin\"\n        title=\"pin as reference for comparison\"\n        onClick={onPin(props)}\n    />;\n\nexport default function(props: any) {\n    return PagesActionPin(props);\n}\n","export const coverStyle = {\n    textAlign: 'center',\n    // borderBottom: '1px solid #888',\n}\n\nexport const imgStyle = {\n    width: 300,\n}\n\nexport const imgMargin = 10;\n\nexport const cardStyle = {\n    width: imgStyle.width + imgMargin*2,\n    marginBottom: 10,\n};\n\nexport const masonryStyle = {\n    paddingTop: 10,\n    paddingBottom: 10,\n}\n\nexport const masonryOptions = {\n    gutter: 10,\n    // percentPosition: true,\n    fitWidth: true,\n}\n\nexport const iconTheme = 'outlined'; // 'twoTone'\n","import React from 'react';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { useIsomor } from 'isomor-react';\nimport Button from 'antd/lib/button';\n\nimport { setZoneStatus } from './server/crawler';\nimport { getPages } from './server/crawler';\n\n\nconst buttonStyle = {\n    marginLeft: 5,\n    marginRight: 5,\n}\n\nconst onSetStatus = (update: any, status: string, { timestamp, id, index }: any) => async () => {\n    try {\n        const pages = await setZoneStatus(timestamp.toString(), id, index, status);\n        update(pages, getPages, timestamp);\n        message.success('Page pinned as reference for comparison.', 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n// neeed to flatten? and inject onSetStatus?\nexport const DiffImageButtons = (props: any) => {\n    const { update } = useIsomor();\n    return (\n        <>\n            <Button\n                style={buttonStyle}\n                icon=\"check\"\n                size=\"small\"\n                onClick={onSetStatus(update, 'valid', props)}>Valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"pushpin\"\n                size=\"small\"\n                onClick={onSetStatus(update, 'pin', props)}>Always valid</Button>\n            <Button\n                style={buttonStyle}\n                icon=\"warning\"\n                size=\"small\"\n                type=\"danger\"\n                onClick={onSetStatus(update, 'report', props)}>Report</Button>\n        </>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport Popover from 'antd/lib/popover';\n\nimport {\n    imgStyle,\n    imgMargin,\n} from './pageStyle';\n\nimport './App.css';\nimport { DiffImageButtons } from './DiffImageButtons';\nimport { getThumbnail } from './server/crawler';\nimport { Zone } from 'test-crawler-lib';\n\nexport const getColorByStatus = (status: string) => {\n    if (status === 'valid' || status === 'pin') {\n        return '#0F0'; //'green';\n    } else if (status === 'report') {\n        return 'red';\n    }\n    return 'yellow';\n}\n\nconst zoneStyle = ({ xMin, yMin, xMax, yMax }: any, ratio: number, img: string | undefined, over: boolean, status: string) => {\n    const top = yMin / ratio;\n    const left = xMin / ratio;\n    return ({\n        width: (xMax - xMin) / ratio + 1,\n        height: (yMax - yMin) / ratio + 1,\n        top,\n        left: left + imgMargin,\n        border: `1px solid ${getColorByStatus(status)}`,\n        position: 'absolute',\n        backgroundImage: over ? `url(\"${img}\")` : 'none',\n        backgroundPosition: `${-left}px ${-top}px`,\n    });\n}\n\ninterface Props {\n    folder: string;\n    id: string;\n    zone: Zone;\n    originalWidth: number;\n    index: number;\n    status: string;\n};\n\nexport const DiffZone = ({ folder, id, index, originalWidth, zone, status }: Props) => {\n    const [thumb, setThumb] = useState<string>();\n    const load = async () => {\n        setThumb(await getThumbnail('base', id, imgStyle.width));\n    }\n    useEffect(() => { load(); }, []);\n    const [hover, setHover] = useState(false);\n    const ratio = originalWidth / imgStyle.width;\n    return (\n        <Popover key={`${id}-${index}`} content={(\n            <DiffImageButtons index={index} timestamp={folder} id={id} />\n        )} trigger=\"click\">\n            <div\n                style={zoneStyle(zone, ratio, thumb, hover, status) as any}\n                onMouseOver={() => setHover(true)}\n                onMouseOut={() => setHover(false)}\n            />\n        </Popover>\n    );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n    coverStyle,\n    imgStyle,\n} from './pageStyle';\n\nimport './App.css';\nimport { getThumbnail } from './server/crawler';\nimport { DiffZone } from './DiffZone';\nimport { Zone } from 'test-crawler-lib';\n\ninterface Props {\n    folder: string;\n    id: string;\n    zones?: Zone[];\n    originalWidth?: number;\n    onImg?: () => void;\n};\n\nexport const DiffImage = ({ folder, id, zones, originalWidth = 0, onImg = () => {} }: Props) => {\n    const [thumb, setThumb] = useState<string>();\n    const load = async () => {\n        setThumb(await getThumbnail(folder, id, imgStyle.width));\n        onImg();\n    }\n    useEffect(() => { load(); }, []);\n    return thumb ? (\n        <div style={coverStyle as any}>\n            {zones && zones.map(({ zone, status }: any, index: number) =>\n                <DiffZone {...{ folder, id, index, originalWidth, zone, status }} key={`zone-${id}-${index}`} />)}\n            <img style={imgStyle} alt=\"\" src={thumb} />\n        </div>) : null;\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { useIsomor } from 'isomor-react';\nimport { setZonesStatus, getPages } from './server/crawler';\n\nconst onClick = (update: any, { timestamp, id, zones, status, type }: any) => async () => {\n    try {\n        const pages = await setZonesStatus(timestamp.toString(), id, status);\n        update(pages, getPages, timestamp);\n        message.success(`All zone are set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nexport const PagesActionZone = (props: any) => {\n    const { update } = useIsomor();\n    const { status, type } = props;\n    return (\n        <Icon type={type} title={`Set all zone to \"${status}\".`} onClick={onClick(update, props)} />\n    );\n}\n","import React from 'react';\nimport Card from 'antd/lib/card';\nimport Spin from 'antd/lib/spin';\nimport Tag from 'antd/lib/tag';\nimport Icon from 'antd/lib/icon';\nimport Masonry from 'react-masonry-component';\nimport { useIsomor } from 'isomor-react';\n\nimport PagesActionPin from './PagesActionPin';\nimport {\n    masonryStyle,\n    masonryOptions,\n    cardStyle,\n    iconTheme,\n} from './pageStyle';\nimport { DiffImage } from './DiffImage'\nimport { PagesActionZone } from './PagesActionZone';\n// import { PageData } from 'test-crawler-lib';\nimport { getPages } from './server/crawler';\nimport { getColorByStatus } from './DiffZone';\n\nconst getCountZonesPerStatus = (zones: any, perStatus: string[]) =>\n    zones.filter(({ status }: any) => perStatus.includes(status)).length\n\ninterface Props {\n    timestamp: string;\n    lastUpdate: number;\n}\nexport const Pages = ({ timestamp, lastUpdate }: Props) => {\n    const { call, response } = useIsomor(); // <PageData[]>\n    React.useEffect(() => { call(getPages, timestamp); }, [lastUpdate]);\n\n    let masonry: any;\n    let timer: NodeJS.Timer;\n    const onImg = () => {\n        if (masonry) masonry.layout();\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            if (masonry) masonry.layout();\n        }, 500);\n    }\n    return response ? (\n        <Masonry\n            style={masonryStyle}\n            options={masonryOptions}\n            ref={(c: any) => { masonry = c && c.masonry; }}\n        >\n            {\n                response.map(({ id, url, png }: any) => (\n                    <Card\n                        key={id}\n                        style={cardStyle}\n                        cover={png && <DiffImage\n                            folder={timestamp}\n                            id={id}\n                            zones={png.diff && png.diff.zones}\n                            originalWidth={png.width}\n                            onImg={onImg}\n                        />}\n                        actions={[\n                            <PagesActionZone type=\"check\" timestamp={timestamp} id={id} status={'valid'} zones={png && png.diff ? png.diff.zones : []} />,\n                            <PagesActionZone type=\"warning\" timestamp={timestamp} id={id} status={'report'} zones={png && png.diff ? png.diff.zones : []} />,\n                            <PagesActionPin timestamp={timestamp} id={id} />,\n                            // <Icon type=\"ellipsis\" title=\"more\" />,\n                        ]}\n                    >\n                        <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n                        {!png && <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>}\n                        {png && !png.diff && <div><Icon type=\"picture\" theme={iconTheme} /> New screenshot <Tag color=\"green\">New</Tag></div>}\n                        {png && png.diff && <>\n                            <p><Icon type=\"picture\" theme={iconTheme} /> Pixel diff ratio: {png.diff.pixelDiffRatio}</p>\n                            {png.diff.zones.length > 0 &&\n                                <p>\n                                    <b>Zone:</b>&nbsp;\n                            {[['diff'], ['valid', 'pin'], ['report']].map(([status, ...more]) => (\n                                        <React.Fragment key={status}>\n                                            <span style={{\n                                                marginLeft: 10,\n                                                color: getColorByStatus(status)\n                                            }}>■</span> <b>{getCountZonesPerStatus(png.diff.zones, [status, ...more])}</b> {status}\n                                        </React.Fragment>\n                                    ))}\n                                </p>\n                            }\n                        </>}\n                    </Card>\n                ))\n            }\n        </Masonry >\n    ) : <Spin />;\n}\n","import { unix } from 'moment';\n\nexport const timestampToString = (timestamp: number) => unix(timestamp)//.format('YYYY.DD.MM HH:mm')\n                                            .calendar()","import React from 'react';\nimport Switch from 'antd/lib/switch';\nimport message from 'antd/lib/message';\nimport notification from 'antd/lib/notification';\nimport { setStatus, getCrawler } from './server/crawler';\nimport { useIsomor } from 'isomor-react';\n\nconst onChange = (update: any, { timestamp }: any) => async (value: boolean) => {\n    try {\n        const status = value ? 'done' : 'review';\n        const crawler = await setStatus(timestamp.toString(), status);\n        update(crawler, getCrawler, timestamp.toString());\n        message.success(`Status set to \"${status}\".`, 2);\n    } catch (error) {\n        notification['error']({\n            message: 'Something went wrong!',\n            description: error.toString(),\n        });\n    }\n}\n\nexport const SwitchStatus = (props: any) => {\n    const { update } = useIsomor();\n    return <Switch\n        checkedChildren=\"done\"\n        unCheckedChildren=\"review\"\n        checked={props.status === 'done'}\n        onChange={onChange(update, props)}\n    />;\n}","import React from 'react';\nimport Typography from 'antd/lib/typography';\nimport Progress from 'antd/lib/progress';\nimport Button from 'antd/lib/button';\nimport { Crawler } from 'test-crawler-lib';\nimport { History } from 'history';\nimport { stringify } from 'query-string';\nimport { duration } from 'moment';\nimport 'moment-duration-format';\n\nimport { timestampToString } from './utils';\nimport { SwitchStatus } from './SwitchStatus';\nimport { getHomeRoute } from './routes';\n\nconst { Title } = Typography;\n\n// need to flatten props and use react memo\nexport const CrawlerInfo = ({\n    crawler: {\n        timestamp,\n        url,\n        diffZoneCount,\n        status,\n        urlsCount,\n        inQueue,\n        startAt,\n        lastUpdate,\n        method,\n        viewport: { width, height },\n    },\n    history,\n}: { crawler: Crawler, history: History }) => {\n    const total = urlsCount + inQueue;\n    const percent = Math.floor(urlsCount / total * 100);\n    const onReRun = () => {\n        history.push({\n            pathname: getHomeRoute(),\n            search: stringify({ url, width, height, method }),\n        });\n    };\n    return (\n        <>\n            <Title level={3}>{timestampToString(timestamp)}</Title>\n            <p><Button icon=\"retweet\" size=\"small\" onClick={onReRun}>Re-run</Button></p>\n            <p><b>URL:</b> {url}</p>\n            <p><b>Screen:</b> {width}x{height}</p>\n            <p><b>URL crawled:</b> {urlsCount}</p>\n            <p><b>Duration:</b> { duration(lastUpdate - startAt).format('h [hrs], m [min], s [sec]') }</p>\n            {inQueue > 0 && <>\n                <Progress percent={percent} />\n                <p><b>In queue:</b> {inQueue}</p>\n            </>}\n            {diffZoneCount > 0 && <p><SwitchStatus status={status} timestamp={timestamp} /></p>}\n        </>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from 'antd/lib/icon';\nimport Menu from 'antd/lib/menu';\nimport { Link } from 'react-router-dom';\nimport { Crawler } from 'test-crawler-lib';\nimport { useIsomor } from 'isomor-react';\n\nimport { getHomeRoute, getHistoryRoute, getPinsRoute } from './routes';\nimport { timestampToString } from './utils';\nimport { getCrawlers } from './server/crawler';\n\nconst dividerStyle = (index: number) => index === 0 ? ({\n    borderTop: '1px solid #7e8791',\n}) : ({});\n\nconst getIcon = (diffZoneCount: number, status: string, inQueue: number) => {\n    if (inQueue > 0) {\n        return 'loading';\n    }\n    if (!diffZoneCount) {\n        return 'check';\n    }\n    if (status === 'done') {\n        return 'issues-close';\n    }\n    return 'exclamation-circle';\n}\n\nexport const SideMenu = () => {\n    const { call, response: crawlers } = useIsomor(); // <Crawler[]>\n    React.useEffect(() => { call(getCrawlers); }, []);\n    return (\n        <Menu theme=\"dark\" mode=\"inline\">\n            <Menu.Item key=\"new\">\n                <Icon type=\"plus\" />\n                <span className=\"nav-text\">New</span>\n                <Link to={getHomeRoute()} />\n            </Menu.Item>\n            <Menu.Item key=\"pins\">\n                <Icon type=\"pushpin\" />\n                <span className=\"nav-text\">Pins</span>\n                <Link to={getPinsRoute()} />\n            </Menu.Item>\n            {crawlers &&\n                crawlers.sort(({ timestamp: a }: any, { timestamp: b }: any) => b - a)\n                    .map(({ timestamp, url, id, diffZoneCount, status, inQueue }: any, index: number) => (\n                        <Menu.Item key={`crawler-${id}`} title={url} style={dividerStyle(index)}>\n                            <Icon type={getIcon(diffZoneCount, status, inQueue)} />\n                            <span className=\"nav-text\">\n                                {timestampToString(timestamp)}\n                            </span>\n                            <Link to={getHistoryRoute(timestamp)} />\n                        </Menu.Item>\n                    ))}\n        </Menu>\n    );\n}\n","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Card from 'antd/lib/card';\nimport Icon from 'antd/lib/icon';\nimport Masonry from 'react-masonry-component';\n\nimport {\n    masonryStyle,\n    masonryOptions,\n    cardStyle,\n    iconTheme,\n} from './pageStyle';\nimport { DiffImage } from './DiffImage';\nimport { getPins } from './server/crawler';\nimport { PageData } from 'test-crawler-lib';\nimport { Link } from 'react-router-dom';\nimport { getPinCodeRoute } from './routes';\n\nconst { Title } = Typography;\n\nexport const Pins = () => {\n    const [pins, setPins] = React.useState<PageData[]>();\n    const load = async () => {\n        setPins(await getPins());\n    }\n    React.useEffect(() => { load(); }, []);\n\n\n    let masonry: any;\n    let timer: NodeJS.Timer;\n    const onImg = () => {\n        if (masonry) masonry.layout();\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            if (masonry) masonry.layout();\n        }, 500);\n    }\n    return (\n        <>\n            <Title level={3}>Pins</Title>\n            {\n                pins ? (\n                    <Masonry\n                        style={masonryStyle}\n                        options={masonryOptions}\n                        ref={(c: any) => { masonry = c && c.masonry; }}\n                    >\n                        {pins.map(({ id, url, png }: any) => (\n                            <Card\n                                key={id}\n                                style={cardStyle}\n                                cover={png && <DiffImage folder='base' id={id} onImg={onImg} />}\n                                actions={[\n                                    <Icon type=\"delete\" title={`Delete pin`} />,\n                                    (<Link to={getPinCodeRoute(id)}>\n                                        <Icon type=\"code\" title={`Insert code while crawling`} />\n                                    </Link>),\n                                ]}\n                            >\n                                <p><Icon type=\"link\" /> <a href={url}>{url}</a></p>\n                                {!png && <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>}\n                            </Card>\n                        ))}\n                    </Masonry>\n                ) : <Spin />\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Menu from 'antd/lib/menu';\n\nexport const codeSnippet = (setCode: any) => (\n    <Menu>\n        <Menu.Item\n            key=\"1\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    await page.evaluate(() => {\n        const div = document.createElement(\"div\");\n        div.innerHTML = \"Test-crawler is awesome!\";\n        document.body.insertBefore(div, document.body.firstChild);\n    });\n}`\n                );\n            }}\n        >\n            Test-crawler is awesome\n        </Menu.Item>\n        <Menu.Item\n            key=\"2\"\n            onClick={() => {\n                setCode(\n`module.exports = async function run(page) {\n    await page.evaluate(() => {\n        hrefs = Array.from(document.links).map(\n            link => link.href.replace('/?', '/iframe.html?')\n        );\n\n        document.body.innerHTML = hrefs.map(\n            href => \\`<a href=\"\\${href}\">\\${href}</a>\\`\n        ).join('<br />');\n    });\n}`\n                );\n            }}\n        >\n            Storybook\n        </Menu.Item>\n    </Menu>\n);","import React from 'react';\nimport Spin from 'antd/lib/spin';\nimport Typography from 'antd/lib/typography';\nimport Card from 'antd/lib/card';\nimport Icon from 'antd/lib/icon';\nimport Button from 'antd/lib/button';\nimport notification from 'antd/lib/notification';\nimport message from 'antd/lib/message';\nimport Dropdown from 'antd/lib/dropdown';\nimport AceEditor from 'react-ace';\nimport { RouteComponentProps } from 'react-router';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\n\nimport {\n    cardStyle,\n    iconTheme,\n} from './pageStyle';\nimport { DiffImage } from './DiffImage';\nimport { PageData } from 'test-crawler-lib';\nimport { getPin, setPinCode, getPinCode } from './server/crawler';\nimport { Info } from './Info';\nimport { codeSnippet } from './PinCodeSnippet';\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst aceEditorStyle = {\n    border: '1px solid #EEE',\n    marginBottom: 15,\n    marginRight: 15,\n    float: 'left' as 'left',\n}\n\nconst cardRightStyle = {\n    ...cardStyle,\n    float: 'left' as 'left',\n}\n\nconst buttonBarStyle = {\n    marginBottom: 15,\n}\n\nconst buttonStyle = {\n    marginRight: 10,\n}\n\nexport const PinCode = ({ match: { params: { id } } }: RouteComponentProps<any>) => {\n    const [code, setCode] = React.useState<string>(`module.exports = async function run(page) {\\n// your code\\n}`);\n    const [pin, setPin] = React.useState<PageData>();\n    const load = async () => {\n        setPin(await getPin(id));\n        setCode(await getPinCode(id));\n    }\n    React.useEffect(() => { load(); }, []);\n\n    const onSave = async () => {\n        try {\n            await setPinCode(id, code);\n            message.success('Code saved.', 2);\n        } catch (error) {\n            notification['error']({\n                message: 'Something went wrong!',\n                description: error.toString(),\n            });\n        }\n    }\n\n    const onPlay = () => {\n        message.warn('To be implemented.', 2);\n    }\n\n    return (\n        <>\n            <Title level={3}>Add some code</Title>\n            {\n                pin ? (\n                    <>\n                        <Info>\n                            <Paragraph>\n                                Inject some code in the crawler while you are parsing the page. This code will\n                                be executed just after the page finish loaded, before to make the screenshot and\n                                before extracting the links. You need to export a function that will take as\n                                first parameter the <Text code>page</Text> coming from Puppeteer.\n                            </Paragraph>\n                            <Paragraph>\n                                <Text code>module.exports = async (page) => ...some code</Text>\n                            </Paragraph>\n                        </Info>\n                        <div style={buttonBarStyle}>\n                            <Button icon=\"save\" onClick={onSave} style={buttonStyle}>Save</Button>\n                            <Button icon=\"caret-right\" onClick={onPlay} style={buttonStyle}>Preview</Button>\n                            <Dropdown overlay={codeSnippet(setCode)}>\n                                <Button style={buttonStyle}>\n                                    Code snippet <Icon type=\"down\" />\n                                </Button>\n                            </Dropdown>\n                        </div>\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow\"\n                            onChange={setCode}\n                            fontSize={14}\n                            value={code}\n                            style={aceEditorStyle}\n                        />\n                        <Card\n                            style={cardRightStyle}\n                            cover={pin.png && <DiffImage folder='base' id={pin.id} />}\n                        >\n                            <p><Icon type=\"link\" /> <a href={pin.url}>{pin.url}</a></p>\n                            {!pin.png && <p><Icon type=\"picture\" theme={iconTheme} /> No screenshot available</p>}\n                        </Card>\n                    </>\n                ) : <Spin />\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Icon from 'antd/lib/icon';\nimport Layout from 'antd/lib/layout';\nimport Typography from 'antd/lib/typography';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\nimport New from './New';\nimport { History } from './History';\nimport { SideMenu } from './SideMenu';\nimport { getHomeRoute, getHistoryRoute, getPinsRoute, getPinCodeRoute } from './routes';\nimport { Pins } from './Pins';\nimport { PinCode } from './PinCode';\n\nconst { Sider, Content } = Layout;\nconst { Title } = Typography;\n\nconst layoutStyle = {\n    minHeight: '100vh',\n};\nconst titleStyle = {\n    color: '#fff',\n    margin: 10,\n}\nconst contentStyle = {\n    background: '#fff',\n    padding: 24,\n    margin: 10,\n    minHeight: 280,\n};\n\nconst App = () => (\n    <Router>\n        <Layout style={layoutStyle}>\n            <Sider>\n                <Title level={3} style={titleStyle}>\n                    <Icon type=\"eye\" /> Test-crawler\n                </Title>\n                <SideMenu />\n            </Sider>\n            <Content style={contentStyle}>\n                <Route path={getHomeRoute()} exact component={New} />\n                <Route path={getPinsRoute()} exact component={Pins} />\n                <Route path={getPinCodeRoute(':id')} exact component={PinCode} />\n                <Route path={getHistoryRoute(':timestamp')} component={History} />\n            </Content>\n        </Layout>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { IsomorProvider } from 'isomor-react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((<IsomorProvider><App /></IsomorProvider>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}